{"version":3,"file":"ui-router-core.min.js","sources":["../src/common/hof.ts","../src/common/predicates.ts","../src/common/common.ts","../src/common/trace.ts","../src/transition/hookRegistry.ts","../src/transition/hookBuilder.ts","../src/params/paramType.ts","../src/params/param.ts","../src/common/strings.ts","../src/state/stateBuilder.ts","../src/url/urlMatcher.ts","../src/url/urlRouter.ts","../src/hooks/coreResolvables.ts","../src/hooks/onEnterExitRetain.ts","../src/hooks/lazyLoad.ts","../src/hooks/ignoredTransition.ts","../src/hooks/invalidTransition.ts","../src/vanilla/utils.ts","../src/vanilla/plugins.ts","../src/common/glob.ts","../src/state/stateObject.ts","../src/common/coreservices.ts","../src/common/queue.ts","../src/transition/rejectFactory.ts","../src/transition/interface.ts","../src/state/targetState.ts","../src/transition/transitionHook.ts","../src/path/pathNode.ts","../src/path/pathFactory.ts","../src/resolve/resolvable.ts","../src/resolve/interface.ts","../src/resolve/resolveContext.ts","../src/transition/transition.ts","../src/params/paramTypes.ts","../src/params/stateParams.ts","../src/state/stateMatcher.ts","../src/state/stateQueueManager.ts","../src/state/stateRegistry.ts","../src/url/urlMatcherFactory.ts","../src/url/urlRule.ts","../src/view/view.ts","../src/globals.ts","../src/url/urlService.ts","../src/router.ts","../src/hooks/redirectTo.ts","../src/hooks/resolve.ts","../src/hooks/views.ts","../src/hooks/updateGlobals.ts","../src/hooks/url.ts","../src/transition/transitionEventType.ts","../src/transition/transitionService.ts","../src/state/stateService.ts","../src/vanilla/q.ts","../src/vanilla/injector.ts","../src/vanilla/baseLocationService.ts","../src/vanilla/hashLocationService.ts","../src/vanilla/memoryLocationService.ts","../src/vanilla/pushStateLocationService.ts","../src/vanilla/memoryLocationConfig.ts","../src/vanilla/browserLocationConfig.ts","../src/interface.ts"],"sourcesContent":["/**\n * Higher order functions\n *\n * These utility functions are exported, but are subject to change without notice.\n *\n * @module common_hof\n */ /** */\n\nimport {Predicate} from \"./common\";\n/**\n * Returns a new function for [Partial Application](https://en.wikipedia.org/wiki/Partial_application) of the original function.\n *\n * Given a function with N parameters, returns a new function that supports partial application.\n * The new function accepts anywhere from 1 to N parameters.  When that function is called with M parameters,\n * where M is less than N, it returns a new function that accepts the remaining parameters.  It continues to\n * accept more parameters until all N parameters have been supplied.\n *\n *\n * This contrived example uses a partially applied function as an predicate, which returns true\n * if an object is found in both arrays.\n * @example\n * ```\n * // returns true if an object is in both of the two arrays\n * function inBoth(array1, array2, object) {\n *   return array1.indexOf(object) !== -1 &&\n *          array2.indexOf(object) !== 1;\n * }\n * let obj1, obj2, obj3, obj4, obj5, obj6, obj7\n * let foos = [obj1, obj3]\n * let bars = [obj3, obj4, obj5]\n *\n * // A curried \"copy\" of inBoth\n * let curriedInBoth = curry(inBoth);\n * // Partially apply both the array1 and array2\n * let inFoosAndBars = curriedInBoth(foos, bars);\n *\n * // Supply the final argument; since all arguments are\n * // supplied, the original inBoth function is then called.\n * let obj1InBoth = inFoosAndBars(obj1); // false\n *\n * // Use the inFoosAndBars as a predicate.\n * // Filter, on each iteration, supplies the final argument\n * let allObjs = [ obj1, obj2, obj3, obj4, obj5, obj6, obj7 ];\n * let foundInBoth = allObjs.filter(inFoosAndBars); // [ obj3 ]\n *\n * ```\n *\n * Stolen from: http://stackoverflow.com/questions/4394747/javascript-curry-function\n *\n * @param fn\n * @returns {*|function(): (*|any)}\n */\nexport function curry(fn: Function): Function {\n  let initial_args = [].slice.apply(arguments, [1]);\n  let func_args_length = fn.length;\n\n  function curried(args: any[]) {\n    if (args.length >= func_args_length)\n      return fn.apply(null, args);\n    return function () {\n      return curried(args.concat([].slice.apply(arguments)));\n    };\n  }\n  return curried(initial_args);\n}\n\n\n\n/**\n * Given a varargs list of functions, returns a function that composes the argument functions, right-to-left\n * given: f(x), g(x), h(x)\n * let composed = compose(f,g,h)\n * then, composed is: f(g(h(x)))\n */\nexport function compose() {\n  let args = arguments;\n  let start = args.length - 1;\n  return function() {\n    let i = start, result = args[start].apply(this, arguments);\n    while (i--) result = args[i].call(this, result);\n    return result;\n  };\n}\n\n/**\n * Given a varargs list of functions, returns a function that is composes the argument functions, left-to-right\n * given: f(x), g(x), h(x)\n * let piped = pipe(f,g,h);\n * then, piped is: h(g(f(x)))\n */\nexport function pipe(...funcs: Function[]): (obj: any) => any {\n  return compose.apply(null, [].slice.call(arguments).reverse());\n}\n\n/**\n * Given a property name, returns a function that returns that property from an object\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = prop(\"name\");\n * getName(obj) === \"blarg\"\n */\nexport const prop = (name: string) =>\n    (obj: any) => obj && obj[name];\n\n/**\n * Given a property name and a value, returns a function that returns a boolean based on whether\n * the passed object has a property that matches the value\n * let obj = { foo: 1, name: \"blarg\" };\n * let getName = propEq(\"name\", \"blarg\");\n * getName(obj) === true\n */\nexport const propEq = curry((name: string, val: any, obj: any) => obj && obj[name] === val);\n\n/**\n * Given a dotted property name, returns a function that returns a nested property from an object, or undefined\n * let obj = { id: 1, nestedObj: { foo: 1, name: \"blarg\" }, };\n * let getName = prop(\"nestedObj.name\");\n * getName(obj) === \"blarg\"\n * let propNotFound = prop(\"this.property.doesnt.exist\");\n * propNotFound(obj) === undefined\n */\nexport const parse = (name: string) =>\n    pipe.apply(null, name.split(\".\").map(prop));\n\n/**\n * Given a function that returns a truthy or falsey value, returns a\n * function that returns the opposite (falsey or truthy) value given the same inputs\n */\nexport const not: (fn: Predicate<any>) => Predicate<any> = (fn: Predicate<any>) =>\n    (...args: any[]) => !fn.apply(null, args);\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if both functions return truthy for the given arguments\n */\nexport function and(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) && fn2.apply(null, args);\n}\n\n/**\n * Given two functions that return truthy or falsey values, returns a function that returns truthy\n * if at least one of the functions returns truthy for the given arguments\n */\nexport function or(fn1: Predicate<any>, fn2: Predicate<any>): Predicate<any> {\n  return (...args: any[]) => fn1.apply(null, args) || fn2.apply(null, args);\n}\n\n/**\n * Check if all the elements of an array match a predicate function\n *\n * @param fn1 a predicate function `fn1`\n * @returns a function which takes an array and returns true if `fn1` is true for all elements of the array\n */\nexport const all = (fn1: Predicate<any>) =>\n    (arr: any[]) => arr.reduce((b, x) => b && !!fn1(x), true) as boolean;\nexport const any = (fn1: Predicate<any>) =>\n    (arr: any[]) => arr.reduce((b, x) => b || !!fn1(x), false) as boolean;\n\n/** Given a class, returns a Predicate function that returns true if the object is of that class */\nexport const is = <T> (ctor: { new(...args): T }) =>\n    (obj: any): obj is T =>\n        (obj != null && obj.constructor === ctor || obj instanceof ctor);\n\n/** Given a value, returns a Predicate function that returns true if another value is === equal to the original value */\nexport const eq: (comp: any) => Predicate<any> = (val: any) => (other: any) =>\n    val === other;\n\n/** Given a value, returns a function which returns the value */\nexport const val = <T> (v: T) => () => v;\n\n\n\nexport function invoke(fnName: string): Function;\nexport function invoke(fnName: string, args: any[]): Function;\nexport function invoke(fnName: string, args?: any[]): Function {\n  return (obj: any) =>\n      obj[fnName].apply(obj, args);\n}\n\n/**\n * Sorta like Pattern Matching (a functional programming conditional construct)\n *\n * See http://c2.com/cgi/wiki?PatternMatching\n *\n * This is a conditional construct which allows a series of predicates and output functions\n * to be checked and then applied.  Each predicate receives the input.  If the predicate\n * returns truthy, then its matching output function (mapping function) is provided with\n * the input and, then the result is returned.\n *\n * Each combination (2-tuple) of predicate + output function should be placed in an array\n * of size 2: [ predicate, mapFn ]\n *\n * These 2-tuples should be put in an outer array.\n *\n * @example\n * ```\n *\n * // Here's a 2-tuple where the first element is the isString predicate\n * // and the second element is a function that returns a description of the input\n * let firstTuple = [ angular.isString, (input) => `Heres your string ${input}` ];\n *\n * // Second tuple: predicate \"isNumber\", mapfn returns a description\n * let secondTuple = [ angular.isNumber, (input) => `(${input}) That's a number!` ];\n *\n * let third = [ (input) => input === null,  (input) => `Oh, null...` ];\n *\n * let fourth = [ (input) => input === undefined,  (input) => `notdefined` ];\n *\n * let descriptionOf = pattern([ firstTuple, secondTuple, third, fourth ]);\n *\n * console.log(descriptionOf(undefined)); // 'notdefined'\n * console.log(descriptionOf(55)); // '(55) That's a number!'\n * console.log(descriptionOf(\"foo\")); // 'Here's your string foo'\n * ```\n *\n * @param struct A 2D array.  Each element of the array should be an array, a 2-tuple,\n * with a Predicate and a mapping/output function\n * @returns {function(any): *}\n */\nexport function pattern(struct: Function[][]): Function {\n  return function(x: any) {\n    for (var i = 0; i < struct.length; i++) {\n      if (struct[i][0](x)) return struct[i][1](x);\n    }\n  };\n}\n\n","/** Predicates\n *\n * These predicates return true/false based on the input.\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_predicates\n */\n/** */\nimport { and, not, pipe, prop, or } from \"./hof\";\nimport { Predicate } from \"./common\"; // has or is using\nimport { StateObject } from \"../state/stateObject\";\n\nconst toStr = Object.prototype.toString;\nconst tis = (t: string) => (x: any) => typeof(x) === t;\nexport const isUndefined = tis('undefined');\nexport const isDefined = not(isUndefined);\nexport const isNull = (o: any) => o === null;\nexport const isNullOrUndefined = or(isNull, isUndefined);\nexport const isFunction: (x: any) => x is Function = <any> tis('function');\nexport const isNumber: (x: any) => x is number = <any> tis('number');\nexport const isString = <(x: any) => x is string> tis('string');\nexport const isObject = (x: any) => x !== null && typeof x === 'object';\nexport const isArray = Array.isArray;\nexport const isDate: (x: any) => x is Date = <any> ((x: any) => toStr.call(x) === '[object Date]');\nexport const isRegExp: (x: any) => x is RegExp = <any> ((x: any) => toStr.call(x) === '[object RegExp]');\nexport const isState: (x: any) => x is StateObject = StateObject.isState;\n\n/**\n * Predicate which checks if a value is injectable\n *\n * A value is \"injectable\" if it is a function, or if it is an ng1 array-notation-style array\n * where all the elements in the array are Strings, except the last one, which is a Function\n */\nexport function isInjectable(val: any) {\n  if (isArray(val) && val.length) {\n    let head = val.slice(0, -1), tail = val.slice(-1);\n    return !(head.filter(not(isString)).length || tail.filter(not(isFunction)).length);\n  }\n  return isFunction(val);\n}\n\n/**\n * Predicate which checks if a value looks like a Promise\n *\n * It is probably a Promise if it's an object, and it has a `then` property which is a Function\n */\nexport const isPromise = <(x: any) => x is Promise<any>> and(isObject, pipe(prop('then'), isFunction));\n\n","/**\n * Random utility functions used in the UI-Router code\n *\n * These functions are exported, but are subject to change without notice.\n *\n * @preferred\n * @module common\n */\n/** for typedoc */\nimport { isFunction, isString, isArray, isRegExp, isDate, isDefined } from \"./predicates\";\nimport { all, any, prop, curry, val, not } from \"./hof\";\nimport { services } from \"./coreservices\";\nimport { StateObject } from \"../state/stateObject\";\n\nlet w: any = typeof window === 'undefined' ? {} : window;\nlet angular = w.angular || {};\nexport const fromJson = angular.fromJson || JSON.parse.bind(JSON);\nexport const toJson = angular.toJson || JSON.stringify.bind(JSON);\nexport const copy = angular.copy || _copy;\nexport const forEach = angular.forEach || _forEach;\nexport const extend = Object.assign || _extend;\nexport const equals = angular.equals || _equals;\nexport function identity(x: any) { return x; }\nexport function noop(): any {}\n\nexport type Mapper<X, T> = (x: X, key?: (string|number)) => T;\nexport interface TypedMap<T> { [key: string]: T; }\nexport type Predicate<X> = (x?: X) => boolean;\n/**\n * An ng1-style injectable\n *\n * This could be a (non-minified) function such as:\n * ```js\n * function injectableFunction(SomeDependency) {\n *\n * }\n * ```\n *\n * or an explicitly annotated function (minify safe)\n * ```js\n * injectableFunction.$inject = [ 'SomeDependency' ];\n * function injectableFunction(SomeDependency) {\n *\n * }\n * ```\n *\n * or an array style annotated function (minify safe)\n * ```js\n * ['SomeDependency', function injectableFunction(SomeDependency) {\n *\n * }];\n * ```\n *\n * @publicapi\n */\nexport type IInjectable = (Function|any[]);\n\nexport interface Obj extends Object {\n  [key: string]: any\n}\n\n/**\n * Builds proxy functions on the `to` object which pass through to the `from` object.\n *\n * For each key in `fnNames`, creates a proxy function on the `to` object.\n * The proxy function calls the real function on the `from` object.\n *\n *\n * #### Example:\n * This example creates an new class instance whose functions are prebound to the new'd object.\n * ```js\n * class Foo {\n *   constructor(data) {\n *     // Binds all functions from Foo.prototype to 'this',\n *     // then copies them to 'this'\n *     bindFunctions(Foo.prototype, this, this);\n *     this.data = data;\n *   }\n *\n *   log() {\n *     console.log(this.data);\n *   }\n * }\n *\n * let myFoo = new Foo([1,2,3]);\n * var logit = myFoo.log;\n * logit(); // logs [1, 2, 3] from the myFoo 'this' instance\n * ```\n *\n * #### Example:\n * This example creates a bound version of a service function, and copies it to another object\n * ```\n *\n * var SomeService = {\n *   this.data = [3, 4, 5];\n *   this.log = function() {\n *     console.log(this.data);\n *   }\n * }\n *\n * // Constructor fn\n * function OtherThing() {\n *   // Binds all functions from SomeService to SomeService,\n *   // then copies them to 'this'\n *   bindFunctions(SomeService, this, SomeService);\n * }\n *\n * let myOtherThing = new OtherThing();\n * myOtherThing.log(); // logs [3, 4, 5] from SomeService's 'this'\n * ```\n *\n * @param source A function that returns the source object which contains the original functions to be bound\n * @param target A function that returns the target object which will receive the bound functions\n * @param bind A function that returns the object which the functions will be bound to\n * @param fnNames The function names which will be bound (Defaults to all the functions found on the 'from' object)\n * @param latebind If true, the binding of the function is delayed until the first time it's invoked\n */\nexport function createProxyFunctions(source: Function, target: Obj, bind: Function, fnNames?: string[], latebind = false): Obj {\n  const bindFunction = (fnName) =>\n      source()[fnName].bind(bind());\n\n  const makeLateRebindFn = fnName => function lateRebindFunction() {\n    target[fnName] = bindFunction(fnName);\n    return target[fnName].apply(null, arguments);\n  };\n\n  fnNames = fnNames || Object.keys(source());\n\n  return fnNames.reduce((acc, name) => {\n    acc[name] = latebind ? makeLateRebindFn(name) : bindFunction(name);\n    return acc;\n  }, target);\n}\n\n\n/**\n * prototypal inheritance helper.\n * Creates a new object which has `parent` object as its prototype, and then copies the properties from `extra` onto it\n */\nexport const inherit = (parent: Obj, extra?: Obj) =>\n    extend(Object.create(parent), extra);\n\n/**\n * Given an arguments object, converts the arguments at index idx and above to an array.\n * This is similar to es6 rest parameters.\n *\n * Optionally, the argument at index idx may itself already be an array.\n *\n * For example,\n * given either:\n *        arguments = [ obj, \"foo\", \"bar\" ]\n * or:\n *        arguments = [ obj, [\"foo\", \"bar\"] ]\n * then:\n *        restArgs(arguments, 1) == [\"foo\", \"bar\"]\n *\n * This allows functions like pick() to be implemented such that it allows either a bunch\n * of string arguments (like es6 rest parameters), or a single array of strings:\n *\n * given:\n *        var obj = { foo: 1, bar: 2, baz: 3 };\n * then:\n *        pick(obj, \"foo\", \"bar\");   // returns { foo: 1, bar: 2 }\n *        pick(obj, [\"foo\", \"bar\"]); // returns { foo: 1, bar: 2 }\n */\nconst restArgs = (args: IArguments, idx = 0) =>\n    Array.prototype.concat.apply(Array.prototype, Array.prototype.slice.call(args, idx));\n\n/** Given an array, returns true if the object is found in the array, (using indexOf) */\nexport const inArray: typeof _inArray = curry(_inArray) as any;\nexport function _inArray(array: any[], obj: any): boolean;\nexport function _inArray(array: any[]): (obj: any) => boolean;\nexport function _inArray(array, obj?): any {\n  return array.indexOf(obj) !== -1;\n}\n\n/**\n * Given an array, and an item, if the item is found in the array, it removes it (in-place).\n * The same array is returned\n */\nexport const removeFrom: typeof _removeFrom = curry(_removeFrom) as any;\nexport function _removeFrom<T>(array: T[], obj: T): T[];\nexport function _removeFrom<T>(array: T[]): (obj: T) => T[];\nexport function _removeFrom(array, obj?) {\n  let idx = array.indexOf(obj);\n  if (idx >= 0) array.splice(idx, 1);\n  return array;\n}\n\n/** pushes a values to an array and returns the value */\nexport const pushTo: typeof _pushTo = curry(_pushTo) as any;\nexport function _pushTo<T>(arr: T[], val: T): T ;\nexport function _pushTo<T>(arr: T[]): (val: T) => T ;\nexport function _pushTo(arr, val?): any {\n  return (arr.push(val), val);\n}\n\n/** Given an array of (deregistration) functions, calls all functions and removes each one from the source array */\nexport const deregAll = (functions: Function[]) =>\n    functions.slice().forEach(fn => {\n      typeof fn === 'function' && fn();\n      removeFrom(functions, fn);\n    });\n/**\n * Applies a set of defaults to an options object.  The options object is filtered\n * to only those properties of the objects in the defaultsList.\n * Earlier objects in the defaultsList take precedence when applying defaults.\n */\nexport function defaults(opts, ...defaultsList: Obj[]) {\n  let _defaultsList = defaultsList.concat({}).reverse();\n  let defaultVals = extend.apply(null, _defaultsList);\n  return extend({}, defaultVals, pick(opts || {}, Object.keys(defaultVals)));\n}\n\n/** Reduce function that merges each element of the list into a single object, using extend */\nexport const mergeR = (memo: Obj, item: Obj) => extend(memo, item);\n\n/**\n * Finds the common ancestor path between two states.\n *\n * @param {Object} first The first state.\n * @param {Object} second The second state.\n * @return {Array} Returns an array of state names in descending order, not including the root.\n */\nexport function ancestors(first: StateObject, second: StateObject) {\n  let path: StateObject[] = [];\n\n  for (let n in first.path) {\n    if (first.path[n] !== second.path[n]) break;\n    path.push(first.path[n]);\n  }\n  return path;\n}\n\n/**\n * Return a copy of the object only containing the whitelisted properties.\n *\n * #### Example:\n * ```\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = pick(foo, ['a', 'b']); // { a: 1, b: 2 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the whitelisted property names\n */\nexport function pick(obj: Obj, propNames: string[]): Obj {\n  let objCopy = {};\n  for (let prop in obj) {\n    if (propNames.indexOf(prop) !== -1) {\n      objCopy[prop] = obj[prop];\n    }\n  }\n  return objCopy;\n}\n\n/**\n * Return a copy of the object omitting the blacklisted properties.\n *\n * @example\n * ```\n *\n * var foo = { a: 1, b: 2, c: 3 };\n * var ab = omit(foo, ['a', 'b']); // { c: 3 }\n * ```\n * @param obj the source object\n * @param propNames an Array of strings, which are the blacklisted property names\n */\nexport function omit(obj: Obj, propNames: string[]): Obj {\n  return Object.keys(obj)\n      .filter(not(inArray(propNames)))\n      .reduce((acc, key) => (acc[key] = obj[key], acc), {});\n}\n\n\n/** Given an array of objects, maps each element to a named property of the element. */\nexport function pluck<T>(collection: Obj[], propName: string): T[];\n/** Given an object, maps each property of the object to a named property of the property. */\nexport function pluck(collection: { [key: string]: any }, propName: string): { [key: string]: any };\n/**\n * Maps an array, or object to a property (by name)\n */\nexport function pluck(collection: any, propName: string): any {\n  return map(collection, <Mapper<any, string>> prop(propName));\n}\n\n\n/** Given an array of objects, returns a new array containing only the elements which passed the callback predicate */\nexport function filter<T>(collection: T[], callback: (t: T, key?: number) => boolean): T[];\n/** Given an object, returns a new object with only those properties that passed the callback predicate */\nexport function filter<T>(collection: TypedMap<T>, callback: (t: T, key?: string) => boolean): TypedMap<T>;\n/** Filters an Array or an Object's properties based on a predicate */\nexport function filter<T>(collection: any, callback: Function): T {\n  let arr = isArray(collection), result: any = arr ? [] : {};\n  let accept = arr ? x => result.push(x) : (x, key) => result[key] = x;\n  forEach(collection, function(item, i) {\n    if (callback(item, i)) accept(item, i);\n  });\n  return <T>result;\n}\n\n\n/** Given an object, return the first property of that object which passed the callback predicate */\nexport function find<T>(collection: TypedMap<T>, callback: Predicate<T>): T;\n/** Given an array of objects, returns the first object which passed the callback predicate */\nexport function find<T>(collection: T[], callback: Predicate<T>): T;\n/** Finds an object from an array, or a property of an object, that matches a predicate */\nexport function find(collection: any, callback: any) {\n  let result;\n\n  forEach(collection, function(item, i) {\n    if (result) return;\n    if (callback(item, i)) result = item;\n  });\n\n  return result;\n}\n\n/** Given an object, returns a new object, where each property is transformed by the callback function */\nexport let mapObj: <T,U>(collection: { [key: string]: T }, callback: Mapper<T,U>) => { [key: string]: U } = map;\n/** Given an array, returns a new array, where each element is transformed by the callback function */\nexport function map<T, U>(collection: T[], callback: Mapper<T, U>): U[];\nexport function map<T, U>(collection: { [key: string]: T }, callback: Mapper<T, U>): { [key: string]: U }\n/** Maps an array or object properties using a callback function */\nexport function map(collection: any, callback: any): any {\n  let result = isArray(collection) ? [] : {};\n  forEach(collection, (item, i) => result[i] = callback(item, i));\n  return result;\n}\n\n/**\n * Given an object, return its enumerable property values\n *\n * @example\n * ```\n *\n * let foo = { a: 1, b: 2, c: 3 }\n * let vals = values(foo); // [ 1, 2, 3 ]\n * ```\n */\nexport const values: (<T> (obj: TypedMap<T>) => T[]) = (obj: Obj) =>\n    Object.keys(obj).map(key => obj[key]);\n\n/**\n * Reduce function that returns true if all of the values are truthy.\n *\n * @example\n * ```\n *\n * let vals = [ 1, true, {}, \"hello world\"];\n * vals.reduce(allTrueR, true); // true\n *\n * vals.push(0);\n * vals.reduce(allTrueR, true); // false\n * ```\n */\nexport const allTrueR  = (memo: boolean, elem: any) => memo && elem;\n\n/**\n * Reduce function that returns true if any of the values are truthy.\n *\n *  * @example\n * ```\n *\n * let vals = [ 0, null, undefined ];\n * vals.reduce(anyTrueR, true); // false\n *\n * vals.push(\"hello world\");\n * vals.reduce(anyTrueR, true); // true\n * ```\n */\nexport const anyTrueR  = (memo: boolean, elem: any) => memo || elem;\n\n/**\n * Reduce function which un-nests a single level of arrays\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnestR   = (memo: any[], elem: any[]) => memo.concat(elem);\n\n/**\n * Reduce function which recursively un-nests all arrays\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * input.reduce(unnestR, []) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flattenR  = (memo: any[], elem: any) =>\n    isArray(elem) ? memo.concat(elem.reduce(flattenR, [])) : pushR(memo, elem);\n\n/**\n * Reduce function that pushes an object to an array, then returns the array.\n * Mostly just for [[flattenR]] and [[uniqR]]\n */\nexport function pushR(arr: any[], obj: any) {\n  arr.push(obj);\n  return arr;\n}\n\n/** Reduce function that filters out duplicates */\nexport const uniqR = <T> (acc: T[], token: T): T[] =>\n    inArray(acc, token) ? acc : pushR(acc, token);\n\n/**\n * Return a new array with a single level of arrays unnested.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * unnest(input) // [ \"a\", \"b\", \"c\", \"d\", [ \"double, \"nested\" ] ]\n * ```\n */\nexport const unnest    = (arr: any[]) => arr.reduce(unnestR, []);\n/**\n * Return a completely flattened version of an array.\n *\n * @example\n * ```\n *\n * let input = [ [ \"a\", \"b\" ], [ \"c\", \"d\" ], [ [ \"double\", \"nested\" ] ] ];\n * flatten(input) // [ \"a\", \"b\", \"c\", \"d\", \"double, \"nested\" ]\n * ```\n */\nexport const flatten   = (arr: any[]) => arr.reduce(flattenR, []);\n\n/**\n * Given a .filter Predicate, builds a .filter Predicate which throws an error if any elements do not pass.\n * @example\n * ```\n *\n * let isNumber = (obj) => typeof(obj) === 'number';\n * let allNumbers = [ 1, 2, 3, 4, 5 ];\n * allNumbers.filter(assertPredicate(isNumber)); //OK\n *\n * let oneString = [ 1, 2, 3, 4, \"5\" ];\n * oneString.filter(assertPredicate(isNumber, \"Not all numbers\")); // throws Error(\"\"Not all numbers\"\");\n * ```\n */\nexport const assertPredicate: <T> (predicate: Predicate<T>, errMsg: (string|Function)) => Predicate<T> = assertFn;\n/**\n * Given a .map function, builds a .map function which throws an error if any mapped elements do not pass a truthyness test.\n * @example\n * ```\n *\n * var data = { foo: 1, bar: 2 };\n *\n * let keys = [ 'foo', 'bar' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // values is [1, 2]\n *\n * let keys = [ 'foo', 'bar', 'baz' ]\n * let values = keys.map(assertMap(key => data[key], \"Key not found\"));\n * // throws Error(\"Key not found\")\n * ```\n */\nexport const assertMap: <T, U> (mapFn: (t: T) => U, errMsg: (string|Function)) => (t: T) => U = assertFn;\nexport function assertFn(predicateOrMap: Function, errMsg: (string|Function) = \"assert failure\"): any {\n  return (obj) => {\n    let result = predicateOrMap(obj);\n    if (!result) {\n      throw new Error(isFunction(errMsg) ? (<Function> errMsg)(obj) : errMsg);\n    }\n    return result;\n  };\n}\n\n/**\n * Like _.pairs: Given an object, returns an array of key/value pairs\n *\n * @example\n * ```\n *\n * pairs({ foo: \"FOO\", bar: \"BAR }) // [ [ \"foo\", \"FOO\" ], [ \"bar\": \"BAR\" ] ]\n * ```\n */\nexport const pairs = (obj: Obj) =>\n    Object.keys(obj).map(key => [ key, obj[key]] );\n\n/**\n * Given two or more parallel arrays, returns an array of tuples where\n * each tuple is composed of [ a[i], b[i], ... z[i] ]\n *\n * @example\n * ```\n *\n * let foo = [ 0, 2, 4, 6 ];\n * let bar = [ 1, 3, 5, 7 ];\n * let baz = [ 10, 30, 50, 70 ];\n * arrayTuples(foo, bar);       // [ [0, 1], [2, 3], [4, 5], [6, 7] ]\n * arrayTuples(foo, bar, baz);  // [ [0, 1, 10], [2, 3, 30], [4, 5, 50], [6, 7, 70] ]\n * ```\n */\nexport function arrayTuples(...args: any[]): any[] {\n  if (args.length === 0) return [];\n  let maxArrayLen = args.reduce((min, arr) => Math.min(arr.length, min), 9007199254740991); // aka 2^53 − 1 aka Number.MAX_SAFE_INTEGER\n\n  let i, result = [];\n\n  for (i = 0; i < maxArrayLen; i++) {\n    // This is a hot function\n    // Unroll when there are 1-4 arguments\n    switch (args.length) {\n      case 1: result.push([args[0][i]]); break;\n      case 2: result.push([args[0][i], args[1][i]]); break;\n      case 3: result.push([args[0][i], args[1][i], args[2][i]]); break;\n      case 4: result.push([args[0][i], args[1][i], args[2][i], args[3][i]]); break;\n      default:\n        result.push(args.map(array => array[i])); break;\n    }\n  }\n\n  return result;\n}\n\n/**\n * Reduce function which builds an object from an array of [key, value] pairs.\n *\n * Each iteration sets the key/val pair on the memo object, then returns the memo for the next iteration.\n *\n * Each keyValueTuple should be an array with values [ key: string, value: any ]\n *\n * @example\n * ```\n *\n * var pairs = [ [\"fookey\", \"fooval\"], [\"barkey\", \"barval\"] ]\n *\n * var pairsToObj = pairs.reduce((memo, pair) => applyPairs(memo, pair), {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n *\n * // Or, more simply:\n * var pairsToObj = pairs.reduce(applyPairs, {})\n * // pairsToObj == { fookey: \"fooval\", barkey: \"barval\" }\n * ```\n */\nexport function applyPairs(memo: TypedMap<any>, keyValTuple: any[]) {\n  let key: string, value: any;\n  if (isArray(keyValTuple)) [key, value] = keyValTuple;\n  if (!isString(key)) throw new Error(\"invalid parameters to applyPairs\");\n  memo[key] = value;\n  return memo;\n}\n\n/** Get the last element of an array */\nexport function tail<T>(arr: T[]): T {\n  return arr.length && arr[arr.length - 1] || undefined;\n}\n\n/**\n * shallow copy from src to dest\n *\n * note: This is a shallow copy, while angular.copy is a deep copy.\n * ui-router uses `copy` only to make copies of state parameters.\n */\nfunction _copy(src: Obj, dest: Obj) {\n  if (dest) Object.keys(dest).forEach(key => delete dest[key]);\n  if (!dest) dest = {};\n  return extend(dest, src);\n}\n\n/** Naive forEach implementation works with Objects or Arrays */\nfunction _forEach(obj: (any[]|any), cb: (el, idx?) => void, _this: Obj) {\n  if (isArray(obj)) return obj.forEach(cb, _this);\n  Object.keys(obj).forEach(key => cb(obj[key], key));\n}\n\n/** Like Object.assign() */\nexport function _extend(toObj: Obj, ...fromObjs: Obj[]): any;\nexport function _extend(toObj: Obj): any {\n  for (let i = 1; i < arguments.length; i++) {\n    let obj = arguments[i];\n    if (!obj) continue;\n    let keys = Object.keys(obj);\n\n    for (let j = 0; j < keys.length; j++) {\n      toObj[keys[j]] = obj[keys[j]];\n    }\n  }\n\n  return toObj;\n}\n\nfunction _equals(o1: any, o2: any): boolean {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1, t2 = typeof o2;\n  if (t1 !== t2 || t1 !== 'object') return false;\n\n  const tup = [o1, o2];\n  if (all(isArray)(tup)) return _arraysEq(o1, o2);\n  if (all(isDate)(tup)) return o1.getTime() === o2.getTime();\n  if (all(isRegExp)(tup)) return o1.toString() === o2.toString();\n  if (all(isFunction)(tup)) return true; // meh\n\n  let predicates = [isFunction, isArray, isDate, isRegExp];\n  if (predicates.map(any).reduce((b, fn) => b || !!fn(tup), false)) return false;\n\n  let key: string, keys: { [i: string]: boolean } = {};\n  for (key in o1) {\n    if (!_equals(o1[key], o2[key])) return false;\n    keys[key] = true;\n  }\n  for (key in o2) {\n    if (!keys[key]) return false;\n  }\n\n  return true;\n}\n\nfunction _arraysEq(a1: any[], a2: any[]) {\n  if (a1.length !== a2.length) return false;\n  return arrayTuples(a1, a2).reduce((b, t) => b && _equals(t[0], t[1]), true);\n}\n\nexport type sortfn = (a: any, b: any) => number;\n\n/**\n * Create a sort function\n *\n * Creates a sort function which sorts by a numeric property.\n *\n * The `propFn` should return the property as a number which can be sorted.\n *\n * #### Example:\n * This example returns the `priority` prop.\n * ```js\n * var sortfn = sortBy(obj => obj.priority)\n * // equivalent to:\n * var longhandSortFn = (a, b) => a.priority - b.priority;\n * ```\n *\n * #### Example:\n * This example uses [[prop]]\n * ```js\n * var sortfn = sortBy(prop('priority'))\n * ```\n *\n * The `checkFn` can be used to exclude objects from sorting.\n *\n * #### Example:\n * This example only sorts objects with type === 'FOO'\n * ```js\n * var sortfn = sortBy(prop('priority'), propEq('type', 'FOO'))\n * ```\n *\n * @param propFn a function that returns the property (as a number)\n * @param checkFn a predicate\n *\n * @return a sort function like: `(a, b) => (checkFn(a) && checkFn(b)) ? propFn(a) - propFn(b) : 0`\n */\nexport const sortBy = (propFn: (a) => number, checkFn: Predicate<any> = val(true)) =>\n    (a, b) =>\n        (checkFn(a) && checkFn(b)) ? propFn(a) - propFn(b) : 0;\n\n/**\n * Composes a list of sort functions\n *\n * Creates a sort function composed of multiple sort functions.\n * Each sort function is invoked in series.\n * The first sort function to return non-zero \"wins\".\n *\n * @param sortFns list of sort functions\n */\nexport const composeSort = (...sortFns: sortfn[]): sortfn =>\n    function composedSort(a, b) {\n      return sortFns.reduce((prev, fn) => prev || fn(a, b), 0);\n    };\n\n// issue #2676\nexport const silenceUncaughtInPromise = (promise: Promise<any>) =>\n    promise.catch(e => 0) && promise;\nexport const silentRejection = (error: any) =>\n    silenceUncaughtInPromise(services.$q.reject(error));\n","/**\n * # Transition tracing (debug)\n *\n * Enable transition tracing to print transition information to the console,\n * in order to help debug your application.\n * Tracing logs detailed information about each Transition to your console.\n *\n * To enable tracing, import the [[Trace]] singleton and enable one or more categories.\n *\n * ### ES6\n * ```js\n * import {trace} from \"ui-router-ng2\"; // or \"angular-ui-router\"\n * trace.enable(1, 5); // TRANSITION and VIEWCONFIG\n * ```\n *\n * ### CJS\n * ```js\n * let trace = require(\"angular-ui-router\").trace; // or \"ui-router-ng2\"\n * trace.enable(\"TRANSITION\", \"VIEWCONFIG\");\n * ```\n *\n * ### Globals\n * ```js\n * let trace = window[\"angular-ui-router\"].trace; // or \"ui-router-ng2\"\n * trace.enable(); // Trace everything (very verbose)\n * ```\n *\n * ### Angular 1:\n * ```js\n * app.run($trace => $trace.enable());\n * ```\n *\n * @coreapi\n * @module trace\n */ /** for typedoc */\nimport {parse} from \"../common/hof\";\nimport {isNumber} from \"../common/predicates\";\nimport {Transition}  from \"../transition/transition\";\nimport {ActiveUIView, ViewConfig, ViewContext}  from \"../view/interface\";\nimport {stringify, functionToString, maxLength, padString} from \"./strings\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {PathNode} from \"../path/pathNode\";\nimport {PolicyWhen} from \"../resolve/interface\";\nimport {TransitionHook} from \"../transition/transitionHook\";\nimport {HookResult} from \"../transition/interface\";\nimport {StateObject} from \"../state/stateObject\";\n\n/** @hidden */\nfunction uiViewString (uiview: ActiveUIView) {\n    if (!uiview) return 'ui-view (defunct)';\n    const state = uiview.creationContext ? uiview.creationContext.name || '(root)' : '(none)';\n    return `[ui-view#${uiview.id} ${uiview.$type}:${uiview.fqn} (${uiview.name}@${state})]`;\n}\n\n/** @hidden */\nconst viewConfigString = (viewConfig: ViewConfig) => {\n  let view = viewConfig.viewDecl;\n  const state = view.$context.name || '(root)';\n  return `[View#${viewConfig.$id} from '${state}' state]: target ui-view: '${view.$uiViewName}@${view.$uiViewContextAnchor}'`;\n};\n\n/** @hidden */\nfunction normalizedCat(input: Category|string): string {\n  return isNumber(input) ? Category[input] : Category[Category[input]];\n}\n\n\n/**\n * Trace categories Enum\n *\n * Enable or disable a category using [[Trace.enable]] or [[Trace.disable]]\n *\n * `trace.enable(Category.TRANSITION)`\n *\n * These can also be provided using a matching string, or position ordinal\n *\n * `trace.enable(\"TRANSITION\")`\n *\n * `trace.enable(1)`\n */\nexport enum Category {\n  RESOLVE, TRANSITION, HOOK, UIVIEW, VIEWCONFIG,\n}\n\n/** @hidden */ const _tid = parse(\"$id\");\n/** @hidden */ const _rid = parse(\"router.$id\");\n/** @hidden */ const transLbl = (trans) => `Transition #${_tid(trans)}-${_rid(trans)}`;\n\n/**\n * Prints UI-Router Transition trace information to the console.\n */\nexport class Trace {\n  /** @hidden */\n  approximateDigests: number;\n\n  /** @hidden */\n  constructor() {\n    this.approximateDigests = 0;\n  }\n\n  /** @hidden */\n  private _enabled: { [key: string]: boolean } = {};\n\n   /** @hidden */\n  private _set(enabled: boolean, categories: Category[]) {\n    if (!categories.length) {\n      categories = <any> Object.keys(Category)\n          .map(k => parseInt(k, 10))\n          .filter(k => !isNaN(k))\n          .map(key => Category[key]);\n    }\n    categories.map(normalizedCat).forEach(category => this._enabled[category] = enabled);\n  }\n\n  /**\n   * Enables a trace [[Category]]\n   *\n   * ```js\n   * trace.enable(\"TRANSITION\");\n   * ```\n   *\n   * @param categories categories to enable. If `categories` is omitted, all categories are enabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  enable(...categories: (Category|string|number)[]);\n  enable(...categories: any[]) { this._set(true, categories); }\n  /**\n   * Disables a trace [[Category]]\n   *\n   * ```js\n   * trace.disable(\"VIEWCONFIG\");\n   * ```\n   *\n   * @param categories categories to disable. If `categories` is omitted, all categories are disabled.\n   *        Also takes strings (category name) or ordinal (category position)\n   */\n  disable(...categories: (Category|string|number)[]);\n  disable(...categories: any[]) { this._set(false, categories); }\n\n  /**\n   * Retrieves the enabled stateus of a [[Category]]\n   *\n   * ```js\n   * trace.enabled(\"VIEWCONFIG\"); // true or false\n   * ```\n   *\n   * @returns boolean true if the category is enabled\n   */\n  enabled(category: (Category|string|number)): boolean {\n    return !!this._enabled[normalizedCat(category)];\n  }\n\n  /** @internalapi called by ui-router code */\n  traceTransitionStart(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: Started  -> ${stringify(trans)}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceTransitionIgnored(trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: Ignored  <> ${stringify(trans)}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceHookInvocation(step: TransitionHook, trans: Transition, options: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    let event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = functionToString((step as any).registeredHook.callback);\n    console.log(`${transLbl(trans)}:   Hook -> ${event} context: ${context}, ${maxLength(200, name)}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceHookResult(hookResult: HookResult, trans: Transition, transitionOptions: any) {\n    if (!this.enabled(Category.HOOK)) return;\n    console.log(`${transLbl(trans)}:   <- Hook returned: ${maxLength(200, stringify(hookResult))}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceResolvePath(path: PathNode[], when: PolicyWhen, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    console.log(`${transLbl(trans)}:         Resolving ${path} (${when})`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceResolvableResolved(resolvable: Resolvable, trans?: Transition) {\n    if (!this.enabled(Category.RESOLVE)) return;\n    console.log(`${transLbl(trans)}:               <- Resolved  ${resolvable} to: ${maxLength(200, stringify(resolvable.data))}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceError(reason: any, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: <- Rejected ${stringify(trans)}, reason: ${reason}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceSuccess(finalState: StateObject, trans: Transition) {\n    if (!this.enabled(Category.TRANSITION)) return;\n    console.log(`${transLbl(trans)}: <- Success  ${stringify(trans)}, final state: ${finalState.name}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceUIViewEvent(event: string, viewData: ActiveUIView, extra = \"\") {\n    if (!this.enabled(Category.UIVIEW)) return;\n    console.log(`ui-view: ${padString(30, event)} ${uiViewString(viewData)}${extra}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceUIViewConfigUpdated(viewData: ActiveUIView, context: ViewContext) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Updating\", viewData, ` with ViewConfig from context='${context}'`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceUIViewFill(viewData: ActiveUIView, html: string) {\n    if (!this.enabled(Category.UIVIEW)) return;\n    this.traceUIViewEvent(\"Fill\", viewData, ` with: ${maxLength(200, html)}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceViewSync(pairs: any[]) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    const mapping = pairs.map(([ uiViewData, config ]) => {\n      const uiView = `${uiViewData.$type}:${uiViewData.fqn}`;\n      const view = config && `${config.viewDecl.$context.name}: ${config.viewDecl.$name} (${config.viewDecl.$type})`;\n\n      return { 'ui-view fqn': uiView, 'state: view name': view };\n    }).sort((a, b) => a['ui-view fqn'].localeCompare(b['ui-view fqn']));\n\n    console.table(mapping);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceViewServiceEvent(event: string, viewConfig: ViewConfig) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${viewConfigString(viewConfig)}`);\n  }\n\n  /** @internalapi called by ui-router code */\n  traceViewServiceUIViewEvent(event: string, viewData: ActiveUIView) {\n    if (!this.enabled(Category.VIEWCONFIG)) return;\n    console.log(`VIEWCONFIG: ${event} ${uiViewString(viewData)}`);\n  }\n}\n\n/**\n * The [[Trace]] singleton\n *\n * #### Example:\n * ```js\n * import {trace} from \"angular-ui-router\";\n * trace.enable(1, 5);\n * ```\n */\nlet trace = new Trace();\nexport {trace};\n","/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\nimport { extend, removeFrom, tail, values, identity, map } from \"../common/common\";\nimport {isString, isFunction} from \"../common/predicates\";\nimport {PathNode} from \"../path/pathNode\";\nimport {\n    TransitionStateHookFn, TransitionHookFn, TransitionHookPhase, TransitionHookScope, IHookRegistry, PathType\n} from \"./interface\"; // has or is using\n\nimport {\n    HookRegOptions, HookMatchCriteria, TreeChanges,\n    HookMatchCriterion, IMatchingNodes, HookFn\n} from \"./interface\";\nimport {Glob} from \"../common/glob\";\nimport {StateObject} from \"../state/stateObject\";\nimport {TransitionEventType} from \"./transitionEventType\";\nimport { TransitionService } from \"./transitionService\";\n\n/**\n * Determines if the given state matches the matchCriteria\n *\n * @hidden\n *\n * @param state a State Object to test against\n * @param criterion\n * - If a string, matchState uses the string as a glob-matcher against the state name\n * - If an array (of strings), matchState uses each string in the array as a glob-matchers against the state name\n *   and returns a positive match if any of the globs match.\n * - If a function, matchState calls the function with the state and returns true if the function's result is truthy.\n * @returns {boolean}\n */\nexport function matchState(state: StateObject, criterion: HookMatchCriterion) {\n  let toMatch = isString(criterion) ? [criterion] : criterion;\n\n  function matchGlobs(_state: StateObject) {\n    let globStrings = <string[]> toMatch;\n    for (let i = 0; i < globStrings.length; i++) {\n      let glob = new Glob(globStrings[i]);\n\n      if ((glob && glob.matches(_state.name)) || (!glob && globStrings[i] === _state.name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  let matchFn = <any> (isFunction(toMatch) ? toMatch : matchGlobs);\n  return !!matchFn(state);\n}\n\n/**\n * @internalapi\n * The registration data for a registered transition hook\n */\nexport class RegisteredHook {\n  priority: number;\n  bind: any;\n  _deregistered: boolean;\n\n  constructor(public tranSvc: TransitionService,\n              public eventType: TransitionEventType,\n              public callback: HookFn,\n              public matchCriteria: HookMatchCriteria,\n              options: HookRegOptions = {} as any) {\n    this.priority = options.priority || 0;\n    this.bind = options.bind || null;\n    this._deregistered = false;\n  }\n\n  /**\n   * Gets the matching [[PathNode]]s\n   *\n   * Given an array of [[PathNode]]s, and a [[HookMatchCriterion]], returns an array containing\n   * the [[PathNode]]s that the criteria matches, or `null` if there were no matching nodes.\n   *\n   * Returning `null` is significant to distinguish between the default\n   * \"match-all criterion value\" of `true` compared to a `() => true` function,\n   * when the nodes is an empty array.\n   *\n   * This is useful to allow a transition match criteria of `entering: true`\n   * to still match a transition, even when `entering === []`.  Contrast that\n   * with `entering: (state) => true` which only matches when a state is actually\n   * being entered.\n   */\n  private _matchingNodes(nodes: PathNode[], criterion: HookMatchCriterion): PathNode[] {\n    if (criterion === true) return nodes;\n    let matching = nodes.filter(node => matchState(node.state, criterion));\n    return matching.length ? matching : null;\n  }\n\n  /**\n   * Gets the default match criteria (all `true`)\n   *\n   * Returns an object which has all the criteria match paths as keys and `true` as values, i.e.:\n   *\n   * ```js\n   * {\n   *   to: true,\n   *   from: true,\n   *   entering: true,\n   *   exiting: true,\n   *   retained: true,\n   * }\n   */\n  private _getDefaultMatchCriteria(): HookMatchCriteria {\n    return map(this.tranSvc._pluginapi._getPathTypes(), () => true);\n  }\n\n  /**\n   * Gets matching nodes as [[IMatchingNodes]]\n   *\n   * Create a IMatchingNodes object from the TransitionHookTypes that is roughly equivalent to:\n   *\n   * ```js\n   * let matches: IMatchingNodes = {\n   *   to:       _matchingNodes([tail(treeChanges.to)],   mc.to),\n   *   from:     _matchingNodes([tail(treeChanges.from)], mc.from),\n   *   exiting:  _matchingNodes(treeChanges.exiting,      mc.exiting),\n   *   retained: _matchingNodes(treeChanges.retained,     mc.retained),\n   *   entering: _matchingNodes(treeChanges.entering,     mc.entering),\n   * };\n   * ```\n   */\n  private _getMatchingNodes(treeChanges: TreeChanges): IMatchingNodes {\n    let criteria = extend(this._getDefaultMatchCriteria(), this.matchCriteria);\n    let paths: PathType[] = values(this.tranSvc._pluginapi._getPathTypes());\n\n    return paths.reduce((mn: IMatchingNodes, pathtype: PathType) => {\n      // STATE scope criteria matches against every node in the path.\n      // TRANSITION scope criteria matches against only the last node in the path\n      let isStateHook = pathtype.scope === TransitionHookScope.STATE;\n      let path = treeChanges[pathtype.name] || [];\n      let nodes: PathNode[] = isStateHook ? path : [tail(path)];\n\n      mn[pathtype.name] = this._matchingNodes(nodes, criteria[pathtype.name]);\n      return mn;\n    }, {} as IMatchingNodes);\n  }\n\n  /**\n   * Determines if this hook's [[matchCriteria]] match the given [[TreeChanges]]\n   *\n   * @returns an IMatchingNodes object, or null. If an IMatchingNodes object is returned, its values\n   * are the matching [[PathNode]]s for each [[HookMatchCriterion]] (to, from, exiting, retained, entering)\n   */\n  matches(treeChanges: TreeChanges): IMatchingNodes {\n    let matches = this._getMatchingNodes(treeChanges);\n\n    // Check if all the criteria matched the TreeChanges object\n    let allMatched = values(matches).every(identity);\n    return allMatched ? matches : null;\n  }\n}\n\n/** @hidden Return a registration function of the requested type. */\nexport function makeEvent(registry: IHookRegistry, transitionService: TransitionService, eventType: TransitionEventType) {\n  // Create the object which holds the registered transition hooks.\n  let _registeredHooks = registry._registeredHooks = (registry._registeredHooks || {});\n  let hooks = _registeredHooks[eventType.name] = [];\n\n  // Create hook registration function on the IHookRegistry for the event\n  registry[eventType.name] = hookRegistrationFn;\n\n  function hookRegistrationFn(matchObject, callback, options = {}) {\n    let registeredHook = new RegisteredHook(transitionService, eventType, callback, matchObject, options);\n    hooks.push(registeredHook);\n\n    return function deregisterEventHook() {\n      registeredHook._deregistered = true;\n      removeFrom(hooks)(registeredHook);\n    };\n  }\n\n  return hookRegistrationFn;\n}","/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n\nimport {extend, tail, assertPredicate, unnestR, identity} from \"../common/common\";\nimport {isArray} from \"../common/predicates\";\n\nimport {\n    TransitionOptions, TransitionHookOptions, IHookRegistry, TreeChanges, IMatchingNodes,\n    TransitionHookPhase, TransitionHookScope\n} from \"./interface\";\n\nimport {Transition} from \"./transition\";\nimport {TransitionHook} from \"./transitionHook\";\nimport {StateObject} from \"../state/stateObject\";\nimport {PathNode} from \"../path/pathNode\";\nimport {TransitionService} from \"./transitionService\";\nimport {TransitionEventType} from \"./transitionEventType\";\nimport {RegisteredHook} from \"./hookRegistry\";\n\n/**\n * This class returns applicable TransitionHooks for a specific Transition instance.\n *\n * Hooks ([[RegisteredHook]]) may be registered globally, e.g., $transitions.onEnter(...), or locally, e.g.\n * myTransition.onEnter(...).  The HookBuilder finds matching RegisteredHooks (where the match criteria is\n * determined by the type of hook)\n *\n * The HookBuilder also converts RegisteredHooks objects to TransitionHook objects, which are used to run a Transition.\n *\n * The HookBuilder constructor is given the $transitions service and a Transition instance.  Thus, a HookBuilder\n * instance may only be used for one specific Transition object. (side note: the _treeChanges accessor is private\n * in the Transition class, so we must also provide the Transition's _treeChanges)\n *\n */\nexport class HookBuilder {\n  constructor(private transition: Transition) { }\n\n  buildHooksForPhase(phase: TransitionHookPhase): TransitionHook[] {\n    let $transitions = this.transition.router.transitionService;\n    return $transitions._pluginapi._getEvents(phase)\n        .map(type => this.buildHooks(type))\n        .reduce(unnestR, [])\n        .filter(identity);\n  }\n\n  /**\n   * Returns an array of newly built TransitionHook objects.\n   *\n   * - Finds all RegisteredHooks registered for the given `hookType` which matched the transition's [[TreeChanges]].\n   * - Finds [[PathNode]] (or `PathNode[]`) to use as the TransitionHook context(s)\n   * - For each of the [[PathNode]]s, creates a TransitionHook\n   *\n   * @param hookType the type of the hook registration function, e.g., 'onEnter', 'onFinish'.\n   */\n  buildHooks(hookType: TransitionEventType): TransitionHook[] {\n    let transition = this.transition;\n    let treeChanges = transition.treeChanges();\n\n    // Find all the matching registered hooks for a given hook type\n    let matchingHooks = this.getMatchingHooks(hookType, treeChanges);\n    if (!matchingHooks) return [];\n\n    let baseHookOptions = <TransitionHookOptions> {\n      transition: transition,\n      current: transition.options().current\n    };\n\n    const makeTransitionHooks = (hook: RegisteredHook) => {\n       // Fetch the Nodes that caused this hook to match.\n       let matches: IMatchingNodes = hook.matches(treeChanges);\n       // Select the PathNode[] that will be used as TransitionHook context objects\n       let matchingNodes: PathNode[] = matches[hookType.criteriaMatchPath.name];\n\n       // Return an array of HookTuples\n       return matchingNodes.map(node => {\n         let _options = extend({\n           bind: hook.bind,\n           traceData: { hookType: hookType.name, context: node }\n         }, baseHookOptions);\n\n         let state = hookType.criteriaMatchPath.scope === TransitionHookScope.STATE ? node.state.self : null;\n         let transitionHook = new TransitionHook(transition, state, hook, _options);\n         return <HookTuple> { hook, node, transitionHook };\n       });\n    };\n\n    return matchingHooks.map(makeTransitionHooks)\n        .reduce(unnestR, [])\n        .sort(tupleSort(hookType.reverseSort))\n        .map(tuple => tuple.transitionHook);\n  }\n\n  /**\n   * Finds all RegisteredHooks from:\n   * - The Transition object instance hook registry\n   * - The TransitionService ($transitions) global hook registry\n   *\n   * which matched:\n   * - the eventType\n   * - the matchCriteria (to, from, exiting, retained, entering)\n   *\n   * @returns an array of matched [[RegisteredHook]]s\n   */\n  public getMatchingHooks(hookType: TransitionEventType, treeChanges: TreeChanges): RegisteredHook[] {\n    let isCreate = hookType.hookPhase === TransitionHookPhase.CREATE;\n\n    // Instance and Global hook registries\n    let $transitions = this.transition.router.transitionService;\n    let registries = isCreate ? [ $transitions ] : [ this.transition, $transitions ];\n\n    return registries.map((reg: IHookRegistry) => reg.getHooks(hookType.name))    // Get named hooks from registries\n        .filter(assertPredicate(isArray, `broken event named: ${hookType.name}`)) // Sanity check\n        .reduce(unnestR, [])                                                      // Un-nest RegisteredHook[][] to RegisteredHook[] array\n        .filter(hook => hook.matches(treeChanges));                               // Only those satisfying matchCriteria\n  }\n}\n\ninterface HookTuple { hook: RegisteredHook, node: PathNode, transitionHook: TransitionHook }\n\n/**\n * A factory for a sort function for HookTuples.\n *\n * The sort function first compares the PathNode depth (how deep in the state tree a node is), then compares\n * the EventHook priority.\n *\n * @param reverseDepthSort a boolean, when true, reverses the sort order for the node depth\n * @returns a tuple sort function\n */\nfunction tupleSort(reverseDepthSort = false) {\n  return function nodeDepthThenPriority(l: HookTuple, r: HookTuple): number {\n    let factor = reverseDepthSort ? -1 : 1;\n    let depthDelta = (l.node.state.path.length - r.node.state.path.length) * factor;\n    return depthDelta !== 0 ? depthDelta : r.hook.priority - l.hook.priority;\n  }\n}","/**\n * @coreapi\n * @module params\n */\n/** */\nimport {extend, filter, map} from \"../common/common\";\nimport {isArray, isDefined} from \"../common/predicates\";\nimport {ParamTypeDefinition} from \"./interface\";\n\n/**\n * An internal class which implements [[ParamTypeDefinition]].\n *\n * A [[ParamTypeDefinition]] is a plain javascript object used to register custom parameter types.\n * When a param type definition is registered, an instance of this class is created internally.\n *\n * This class has naive implementations for all the [[ParamTypeDefinition]] methods.\n *\n * Used by [[UrlMatcher]] when matching or formatting URLs, or comparing and validating parameter values.\n *\n * #### Example:\n * ```js\n * var paramTypeDef = {\n *   decode: function(val) { return parseInt(val, 10); },\n *   encode: function(val) { return val && val.toString(); },\n *   equals: function(a, b) { return this.is(a) && a === b; },\n *   is: function(val) { return angular.isNumber(val) && isFinite(val) && val % 1 === 0; },\n *   pattern: /\\d+/\n * }\n *\n * var paramType = new ParamType(paramTypeDef);\n * ```\n * @internalapi\n */\nexport class ParamType implements ParamTypeDefinition {\n  /** @inheritdoc */\n  pattern: RegExp = /.*/;\n  /** The name/id of the parameter type */\n  name: string;\n  /** @inheritdoc */\n  raw: boolean;\n  /** @inheritdoc */\n  dynamic: boolean;\n  /** @inheritdoc */\n  inherit = true;\n\n  /**\n   * @param def  A configuration object which contains the custom type definition.  The object's\n   *        properties will override the default methods and/or pattern in `ParamType`'s public interface.\n   * @returns a new ParamType object\n   */\n  constructor(def: ParamTypeDefinition) {\n    extend(this, def);\n  }\n\n\n  // consider these four methods to be \"abstract methods\" that should be overridden\n  /** @inheritdoc */\n  is(val: any, key?: string): boolean { return true; }\n  /** @inheritdoc */\n  encode(val: any, key?: string): (string|string[]) { return val; }\n  /** @inheritdoc */\n  decode(val: string, key?: string): any { return val; }\n  /** @inheritdoc */\n  equals(a: any, b: any): boolean { return a == b; }\n\n\n  $subPattern() {\n    let sub = this.pattern.toString();\n    return sub.substr(1, sub.length - 2);\n  }\n\n  toString() {\n    return `{ParamType:${this.name}}`;\n  }\n\n  /** Given an encoded string, or a decoded object, returns a decoded object */\n  $normalize(val: any) {\n    return this.is(val) ? val : this.decode(val);\n  }\n\n  /**\n   * Wraps an existing custom ParamType as an array of ParamType, depending on 'mode'.\n   * e.g.:\n   * - urlmatcher pattern \"/path?{queryParam[]:int}\"\n   * - url: \"/path?queryParam=1&queryParam=2\n   * - $stateParams.queryParam will be [1, 2]\n   * if `mode` is \"auto\", then\n   * - url: \"/path?queryParam=1 will create $stateParams.queryParam: 1\n   * - url: \"/path?queryParam=1&queryParam=2 will create $stateParams.queryParam: [1, 2]\n   */\n  $asArray(mode: (boolean|\"auto\"), isSearch: boolean) {\n    if (!mode) return this;\n    if (mode === \"auto\" && !isSearch) throw new Error(\"'auto' array mode is for query parameters only\");\n    return new (<any> ArrayType)(this, mode);\n  }\n}\n\n/**\n * Wraps up a `ParamType` object to handle array values.\n * @internalapi\n */\nfunction ArrayType(type: ParamType, mode: (boolean|\"auto\")) {\n  // Wrap non-array value as array\n  function arrayWrap(val: any): any[] {\n    return isArray(val) ? val : (isDefined(val) ? [ val ] : []);\n  }\n\n  // Unwrap array value for \"auto\" mode. Return undefined for empty array.\n  function arrayUnwrap(val: any) {\n    switch (val.length) {\n      case 0: return undefined;\n      case 1: return mode === \"auto\" ? val[0] : val;\n      default: return val;\n    }\n  }\n\n  // Wraps type (.is/.encode/.decode) functions to operate on each value of an array\n  function arrayHandler(callback: (x: any) => any, allTruthyMode?: boolean) {\n    return function handleArray(val: any) {\n      if (isArray(val) && val.length === 0) return val;\n      let arr = arrayWrap(val);\n      let result = map(arr, callback);\n      return (allTruthyMode === true) ? filter(result, x => !x).length === 0 : arrayUnwrap(result);\n    };\n  }\n\n  // Wraps type (.equals) functions to operate on each value of an array\n  function arrayEqualsHandler(callback: (l: any, r: any) => boolean) {\n    return function handleArray(val1: any, val2: any) {\n      let left = arrayWrap(val1), right = arrayWrap(val2);\n      if (left.length !== right.length) return false;\n      for (let i = 0; i < left.length; i++) {\n        if (!callback(left[i], right[i])) return false;\n      }\n      return true;\n    };\n  }\n\n  ['encode', 'decode', 'equals', '$normalize'].forEach(name => {\n    var paramTypeFn = type[name].bind(type);\n    var wrapperFn: Function = name === 'equals' ? arrayEqualsHandler : arrayHandler;\n    this[name] = wrapperFn(paramTypeFn);\n  });\n\n  extend(this, {\n    dynamic: type.dynamic,\n    name: type.name,\n    pattern: type.pattern,\n    inherit: type.inherit,\n    is: arrayHandler(type.is.bind(type), true),\n    $arrayMode: mode\n  });\n}\n","/**\n * @coreapi\n * @module params\n */ /** for typedoc */\nimport { extend, filter, map, allTrueR } from \"../common/common\";\nimport { prop } from \"../common/hof\";\nimport { isInjectable, isDefined, isString, isArray, isUndefined } from \"../common/predicates\";\nimport { RawParams, ParamDeclaration } from \"../params/interface\";\nimport { services } from \"../common/coreservices\";\nimport { ParamType } from \"./paramType\";\nimport { ParamTypes } from \"./paramTypes\";\nimport { UrlMatcherFactory } from \"../url/urlMatcherFactory\";\n\n/** @hidden */ let hasOwn = Object.prototype.hasOwnProperty;\n/** @hidden */ let isShorthand = (cfg: ParamDeclaration) =>\n    [\"value\", \"type\", \"squash\", \"array\", \"dynamic\"].filter(hasOwn.bind(cfg || {})).length === 0;\n\n/** @internalapi */\nexport enum DefType {\n  PATH,\n  SEARCH,\n  CONFIG,\n}\n\n/** @hidden */\nfunction unwrapShorthand(cfg: ParamDeclaration): ParamDeclaration {\n  cfg = isShorthand(cfg) && { value: cfg } as any || cfg;\n\n  getStaticDefaultValue['__cacheable'] = true;\n  function getStaticDefaultValue() {\n    return cfg.value;\n  }\n\n  return extend(cfg, {\n    $$fn: isInjectable(cfg.value) ? cfg.value : getStaticDefaultValue,\n  });\n}\n\n/** @hidden */\nfunction getType(cfg: ParamDeclaration, urlType: ParamType, location: DefType, id: string, paramTypes: ParamTypes) {\n  if (cfg.type && urlType && urlType.name !== 'string') throw new Error(`Param '${id}' has two type configurations.`);\n  if (cfg.type && urlType && urlType.name === 'string' && paramTypes.type(cfg.type as string)) return paramTypes.type(cfg.type as string);\n  if (urlType) return urlType;\n  if (!cfg.type) {\n    let type = location === DefType.CONFIG ? \"any\" :\n        location === DefType.PATH ? \"path\" :\n        location === DefType.SEARCH ? \"query\" : \"string\";\n    return paramTypes.type(type);\n  }\n  return cfg.type instanceof ParamType ? cfg.type : paramTypes.type(cfg.type as string);\n}\n\n/**\n * @internalapi\n * returns false, true, or the squash value to indicate the \"default parameter url squash policy\".\n */\nfunction getSquashPolicy(config: ParamDeclaration, isOptional: boolean, defaultPolicy: (boolean|string)) {\n  let squash = config.squash;\n  if (!isOptional || squash === false) return false;\n  if (!isDefined(squash) || squash == null) return defaultPolicy;\n  if (squash === true || isString(squash)) return squash;\n  throw new Error(`Invalid squash policy: '${squash}'. Valid policies: false, true, or arbitrary string`);\n}\n\n/** @internalapi */\nfunction getReplace(config: ParamDeclaration, arrayMode: boolean, isOptional: boolean, squash: (string|boolean)) {\n  let replace: any, configuredKeys: string[], defaultPolicy = [\n    {from: \"\", to: (isOptional || arrayMode ? undefined : \"\")},\n    {from: null, to: (isOptional || arrayMode ? undefined : \"\")},\n  ];\n  replace = isArray(config.replace) ? config.replace : [];\n  if (isString(squash)) replace.push({ from: squash, to: undefined });\n  configuredKeys = map(replace, prop(\"from\"));\n  return filter(defaultPolicy, item => configuredKeys.indexOf(item.from) === -1).concat(replace);\n}\n\n\n/** @internalapi */\nexport class Param {\n  id: string;\n  type: ParamType;\n  location: DefType;\n  isOptional: boolean;\n  dynamic: boolean;\n  raw: boolean;\n  squash: (boolean|string);\n  replace: [{ to: any, from: any }];\n  inherit: boolean;\n  array: boolean;\n  config: any;\n  /** Cache the default value if it is a static value */\n  _defaultValueCache: {\n    defaultValue: any,\n  };\n\n  constructor(id: string, type: ParamType, config: ParamDeclaration, location: DefType, urlMatcherFactory: UrlMatcherFactory) {\n    config = unwrapShorthand(config);\n    type = getType(config, type, location, id, urlMatcherFactory.paramTypes);\n    let arrayMode = getArrayMode();\n    type = arrayMode ? type.$asArray(arrayMode, location === DefType.SEARCH) : type;\n    let isOptional = config.value !== undefined || location === DefType.SEARCH;\n    let dynamic = isDefined(config.dynamic) ? !!config.dynamic : !!type.dynamic;\n    let raw = isDefined(config.raw) ? !!config.raw : !!type.raw;\n    let squash = getSquashPolicy(config, isOptional, urlMatcherFactory.defaultSquashPolicy());\n    let replace = getReplace(config, arrayMode, isOptional, squash);\n    let inherit = isDefined(config.inherit) ? !!config.inherit : !!type.inherit;\n\n    // array config: param name (param[]) overrides default settings.  explicit config overrides param name.\n    function getArrayMode() {\n      let arrayDefaults = { array: (location === DefType.SEARCH ? \"auto\" : false) };\n      let arrayParamNomenclature = id.match(/\\[\\]$/) ? { array: true } : {};\n      return extend(arrayDefaults, arrayParamNomenclature, config).array;\n    }\n\n    extend(this, {id, type, location, isOptional, dynamic, raw, squash, replace, inherit, array: arrayMode, config });\n  }\n\n  isDefaultValue(value: any): boolean {\n    return this.isOptional && this.type.equals(this.value(), value);\n  }\n\n  /**\n   * [Internal] Gets the decoded representation of a value if the value is defined, otherwise, returns the\n   * default value, which may be the result of an injectable function.\n   */\n  value(value?: any): any {\n    /**\n     * [Internal] Get the default value of a parameter, which may be an injectable function.\n     */\n    const getDefaultValue = () => {\n      if (this._defaultValueCache) return this._defaultValueCache.defaultValue;\n\n      if (!services.$injector) throw new Error(\"Injectable functions cannot be called at configuration time\");\n\n      let defaultValue = services.$injector.invoke(this.config.$$fn);\n\n      if (defaultValue !== null && defaultValue !== undefined && !this.type.is(defaultValue))\n        throw new Error(`Default value (${defaultValue}) for parameter '${this.id}' is not an instance of ParamType (${this.type.name})`);\n\n      if (this.config.$$fn['__cacheable']) {\n        this._defaultValueCache = { defaultValue };\n      }\n\n      return defaultValue;\n    };\n\n    const replaceSpecialValues = (val: any) => {\n      for (let tuple of this.replace) {\n        if (tuple.from === val) return tuple.to;\n      }\n      return val;\n    };\n\n    value = replaceSpecialValues(value);\n\n    return isUndefined(value) ? getDefaultValue() : this.type.$normalize(value);\n  }\n\n  isSearch(): boolean {\n    return this.location === DefType.SEARCH;\n  }\n\n  validates(value: any): boolean {\n    // There was no parameter value, but the param is optional\n    if ((isUndefined(value) || value === null) && this.isOptional) return true;\n\n    // The value was not of the correct ParamType, and could not be decoded to the correct ParamType\n    const normalized = this.type.$normalize(value);\n    if (!this.type.is(normalized)) return false;\n\n    // The value was of the correct type, but when encoded, did not match the ParamType's regexp\n    const encoded = this.type.encode(normalized);\n    return !(isString(encoded) && !this.type.pattern.exec(<string> encoded));\n  }\n\n  toString() {\n    return `{Param:${this.id} ${this.type} squash: '${this.squash}' optional: ${this.isOptional}}`;\n  }\n\n  static values(params: Param[], values: RawParams = {}): RawParams {\n    const paramValues = {} as RawParams;\n    for (let param of params) {\n      paramValues[param.id] = param.value(values[param.id]);\n    }\n    return paramValues;\n  }\n\n  /**\n   * Finds [[Param]] objects which have different param values\n   *\n   * Filters a list of [[Param]] objects to only those whose parameter values differ in two param value objects\n   *\n   * @param params: The list of Param objects to filter\n   * @param values1: The first set of parameter values\n   * @param values2: the second set of parameter values\n   *\n   * @returns any Param objects whose values were different between values1 and values2\n   */\n  static changed(params: Param[], values1: RawParams = {}, values2: RawParams = {}): Param[] {\n    return params.filter(param => !param.type.equals(values1[param.id], values2[param.id]));\n  }\n\n  /**\n   * Checks if two param value objects are equal (for a set of [[Param]] objects)\n   *\n   * @param params The list of [[Param]] objects to check\n   * @param values1 The first set of param values\n   * @param values2 The second set of param values\n   *\n   * @returns true if the param values in values1 and values2 are equal\n   */\n  static equals(params: Param[], values1 = {}, values2 = {}): boolean {\n    return Param.changed(params, values1, values2).length === 0;\n  }\n\n  /** Returns true if a the parameter values are valid, according to the Param definitions */\n  static validates(params: Param[], values: RawParams = {}): boolean {\n    return params.map(param => param.validates(values[param.id])).reduce(allTrueR, true);\n  }\n}","/**\n * Functions that manipulate strings\n *\n * Although these functions are exported, they are subject to change without notice.\n *\n * @module common_strings\n */ /** */\n\nimport { isString, isArray, isDefined, isNull, isPromise, isInjectable, isObject } from \"./predicates\";\nimport { Rejection } from \"../transition/rejectFactory\";\nimport { IInjectable, identity, Obj, tail, pushR } from \"./common\";\nimport { pattern, is, not, val, invoke } from \"./hof\";\nimport { Transition } from \"../transition/transition\";\nimport { Resolvable } from \"../resolve/resolvable\";\n\n/**\n * Returns a string shortened to a maximum length\n *\n * If the string is already less than the `max` length, return the string.\n * Else return the string, shortened to `max - 3` and append three dots (\"...\").\n *\n * @param max the maximum length of the string to return\n * @param str the input string\n */\nexport function maxLength(max: number, str: string) {\n  if (str.length <= max) return str;\n  return str.substr(0, max - 3) + \"...\";\n}\n\n/**\n * Returns a string, with spaces added to the end, up to a desired str length\n *\n * If the string is already longer than the desired length, return the string.\n * Else returns the string, with extra spaces on the end, such that it reaches `length` characters.\n *\n * @param length the desired length of the string to return\n * @param str the input string\n */\nexport function padString(length: number, str: string) {\n  while (str.length < length) str += \" \";\n  return str;\n}\n\nexport function kebobString(camelCase: string) {\n  return camelCase\n      .replace(/^([A-Z])/, $1 => $1.toLowerCase()) // replace first char\n      .replace(/([A-Z])/g, $1 => \"-\" + $1.toLowerCase()); // replace rest\n}\n\nfunction _toJson(obj: Obj) {\n  return JSON.stringify(obj);\n}\n\nfunction _fromJson(json: string) {\n  return isString(json) ? JSON.parse(json) : json;\n}\n\n\nfunction promiseToString(p: Promise<any>) {\n  return `Promise(${JSON.stringify(p)})`;\n}\n\nexport function functionToString(fn: Function) {\n  let fnStr = fnToString(fn);\n  let namedFunctionMatch = fnStr.match(/^(function [^ ]+\\([^)]*\\))/);\n  let toStr = namedFunctionMatch ? namedFunctionMatch[1] : fnStr;\n\n  let fnName = fn['name'] || \"\";\n  if (fnName && toStr.match(/function \\(/)) {\n    return 'function ' + fnName + toStr.substr(9);\n  }\n  return toStr;\n}\n\nexport function fnToString(fn: IInjectable) {\n  let _fn = isArray(fn) ? fn.slice(-1)[0] : fn;\n  return _fn && _fn.toString() || \"undefined\";\n}\n\nlet stringifyPatternFn: (val: any) => string = null;\nlet stringifyPattern = function(value: any) {\n  let isRejection = Rejection.isRejectionPromise;\n\n  stringifyPatternFn = <any> stringifyPatternFn || pattern([\n    [not(isDefined),  val(\"undefined\")],\n    [isNull,          val(\"null\")],\n    [isPromise,       val(\"[Promise]\")],\n    [isRejection,     (x: any) => x._transitionRejection.toString()],\n    [is(Rejection),   invoke(\"toString\")],\n    [is(Transition),  invoke(\"toString\")],\n    [is(Resolvable),  invoke(\"toString\")],\n    [isInjectable,    functionToString],\n    [val(true),       identity]\n  ]);\n\n  return stringifyPatternFn(value);\n};\n\nexport function stringify(o: any) {\n  var seen: any[] = [];\n\n  function format(val: any) {\n    if (isObject(val)) {\n      if (seen.indexOf(val) !== -1) return '[circular ref]';\n      seen.push(val);\n    }\n    return stringifyPattern(val);\n  }\n\n  return JSON.stringify(o, (key, val) => format(val)).replace(/\\\\\"/g, '\"');\n}\n\n/** Returns a function that splits a string on a character or substring */\nexport const beforeAfterSubstr = (char: string) => (str: string) => {\n  if (!str) return [\"\", \"\"];\n  let idx = str.indexOf(char);\n  if (idx === -1) return [str, \"\"];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\n/**\n * Splits on a delimiter, but returns the delimiters in the array\n *\n * #### Example:\n * ```js\n * var splitOnSlashes = splitOnDelim('/');\n * splitOnSlashes(\"/foo\"); // [\"/\", \"foo\"]\n * splitOnSlashes(\"/foo/\"); // [\"/\", \"foo\", \"/\"]\n * ```\n */\nexport function splitOnDelim(delim: string) {\n  let re = new RegExp(\"(\" + delim + \")\", \"g\");\n  return (str: string) =>\n      str.split(re).filter(identity);\n};\n\n\n/**\n * Reduce fn that joins neighboring strings\n *\n * Given an array of strings, returns a new array\n * where all neighboring strings have been joined.\n *\n * #### Example:\n * ```js\n * let arr = [\"foo\", \"bar\", 1, \"baz\", \"\", \"qux\" ];\n * arr.reduce(joinNeighborsR, []) // [\"foobar\", 1, \"bazqux\" ]\n * ```\n */\nexport function joinNeighborsR(acc: any[], x: any) {\n  if (isString(tail(acc)) && isString(x))\n    return acc.slice(0, -1).concat(tail(acc)+ x);\n  return pushR(acc, x);\n};\n\n","/** @module state */ /** for typedoc */\nimport {Obj, omit, noop, extend, inherit, values, applyPairs, tail, mapObj, identity} from \"../common/common\";\nimport {isDefined, isFunction, isString, isArray} from \"../common/predicates\";\nimport {stringify} from \"../common/strings\";\nimport {prop, pattern, is, pipe, val} from \"../common/hof\";\nimport {StateDeclaration} from \"./interface\";\n\nimport {StateObject} from \"./stateObject\";\nimport {StateMatcher} from \"./stateMatcher\";\nimport {Param} from \"../params/param\";\nimport {UrlMatcherFactory} from \"../url/urlMatcherFactory\";\nimport {UrlMatcher} from \"../url/urlMatcher\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {services} from \"../common/coreservices\";\nimport {ResolvePolicy} from \"../resolve/interface\";\nimport { ParamFactory } from \"../url/interface\";\n\nconst parseUrl = (url: string): any => {\n  if (!isString(url)) return false;\n  let root = url.charAt(0) === '^';\n  return { val: root ? url.substring(1) : url, root };\n};\n\nexport type BuilderFunction = (state: StateObject, parent?: BuilderFunction) => any;\n\ninterface Builders {\n  [key: string]: BuilderFunction[];\n\n  name: BuilderFunction[];\n  parent: BuilderFunction[];\n  data: BuilderFunction[];\n  url: BuilderFunction[];\n  navigable: BuilderFunction[];\n  params: BuilderFunction[];\n  views: BuilderFunction[];\n  path: BuilderFunction[];\n  includes: BuilderFunction[];\n  resolvables: BuilderFunction[];\n}\n\n\nfunction nameBuilder(state: StateObject) {\n  return state.name;\n}\n\nfunction selfBuilder(state: StateObject) {\n  state.self.$$state = () => state;\n  return state.self;\n}\n\nfunction dataBuilder(state: StateObject) {\n  if (state.parent && state.parent.data) {\n    state.data = state.self.data = inherit(state.parent.data, state.data);\n  }\n  return state.data;\n}\n\nconst getUrlBuilder = ($urlMatcherFactoryProvider: UrlMatcherFactory, root: () => StateObject) =>\nfunction urlBuilder(state: StateObject) {\n  let stateDec: StateDeclaration = <any> state;\n\n  // For future states, i.e., states whose name ends with `.**`,\n  // match anything that starts with the url prefix\n  if (stateDec && stateDec.url && stateDec.name && stateDec.name.match(/\\.\\*\\*$/)) {\n    stateDec.url += \"{remainder:any}\"; // match any path (.*)\n  }\n\n  const parsed = parseUrl(stateDec.url), parent = state.parent;\n  const url = !parsed ? stateDec.url : $urlMatcherFactoryProvider.compile(parsed.val, {\n    params: state.params || {},\n    paramMap: function (paramConfig: any, isSearch: boolean) {\n      if (stateDec.reloadOnSearch === false && isSearch) paramConfig = extend(paramConfig || {}, {dynamic: true});\n      return paramConfig;\n    }\n  });\n\n  if (!url) return null;\n  if (!$urlMatcherFactoryProvider.isMatcher(url)) throw new Error(`Invalid url '${url}' in state '${state}'`);\n  return (parsed && parsed.root) ? url : ((parent && parent.navigable) || root()).url.append(<UrlMatcher> url);\n};\n\nconst getNavigableBuilder = (isRoot: (state: StateObject) => boolean) =>\nfunction navigableBuilder(state: StateObject) {\n  return !isRoot(state) && state.url ? state : (state.parent ? state.parent.navigable : null);\n};\n\nconst getParamsBuilder = (paramFactory: ParamFactory) =>\nfunction paramsBuilder(state: StateObject): { [key: string]: Param } {\n  const makeConfigParam = (config: any, id: string) => paramFactory.fromConfig(id, null, config);\n  let urlParams: Param[] = (state.url && state.url.parameters({inherit: false})) || [];\n  let nonUrlParams: Param[] = values(mapObj(omit(state.params || {}, urlParams.map(prop('id'))), makeConfigParam));\n  return urlParams.concat(nonUrlParams).map(p => [p.id, p]).reduce(applyPairs, {});\n};\n\nfunction pathBuilder(state: StateObject) {\n  return state.parent ? state.parent.path.concat(state) : /*root*/ [state];\n}\n\nfunction includesBuilder(state: StateObject) {\n  let includes = state.parent ? extend({}, state.parent.includes) : {};\n  includes[state.name] = true;\n  return includes;\n}\n\n/**\n * This is a [[StateBuilder.builder]] function for the `resolve:` block on a [[StateDeclaration]].\n *\n * When the [[StateBuilder]] builds a [[StateObject]] object from a raw [[StateDeclaration]], this builder\n * validates the `resolve` property and converts it to a [[Resolvable]] array.\n *\n * resolve: input value can be:\n *\n * {\n *   // analyzed but not injected\n *   myFooResolve: function() { return \"myFooData\"; },\n *\n *   // function.toString() parsed, \"DependencyName\" dep as string (not min-safe)\n *   myBarResolve: function(DependencyName) { return DependencyName.fetchSomethingAsPromise() },\n *\n *   // Array split; \"DependencyName\" dep as string\n *   myBazResolve: [ \"DependencyName\", function(dep) { return dep.fetchSomethingAsPromise() },\n *\n *   // Array split; DependencyType dep as token (compared using ===)\n *   myQuxResolve: [ DependencyType, function(dep) { return dep.fetchSometingAsPromise() },\n *\n *   // val.$inject used as deps\n *   // where:\n *   //     corgeResolve.$inject = [\"DependencyName\"];\n *   //     function corgeResolve(dep) { dep.fetchSometingAsPromise() }\n *   // then \"DependencyName\" dep as string\n *   myCorgeResolve: corgeResolve,\n *\n *  // inject service by name\n *  // When a string is found, desugar creating a resolve that injects the named service\n *   myGraultResolve: \"SomeService\"\n * }\n *\n * or:\n *\n * [\n *   new Resolvable(\"myFooResolve\", function() { return \"myFooData\" }),\n *   new Resolvable(\"myBarResolve\", function(dep) { return dep.fetchSomethingAsPromise() }, [ \"DependencyName\" ]),\n *   { provide: \"myBazResolve\", useFactory: function(dep) { dep.fetchSomethingAsPromise() }, deps: [ \"DependencyName\" ] }\n * ]\n */\nexport function resolvablesBuilder(state: StateObject): Resolvable[] {\n  interface Tuple { token: any, val: any, deps: any[], policy: ResolvePolicy }\n  \n  /** convert resolve: {} and resolvePolicy: {} objects to an array of tuples */\n  const objects2Tuples    = (resolveObj: Obj, resolvePolicies: { [key: string]: ResolvePolicy }) =>\n      Object.keys(resolveObj || {}).map(token => ({token, val: resolveObj[token], deps: undefined, policy: resolvePolicies[token]}));\n\n  /** fetch DI annotations from a function or ng1-style array */\n  const annotate          = (fn: Function)  => {\n    let $injector = services.$injector;\n    // ng1 doesn't have an $injector until runtime.\n    // If the $injector doesn't exist, use \"deferred\" literal as a\n    // marker indicating they should be annotated when runtime starts\n    return fn['$inject'] || ($injector && $injector.annotate(fn, $injector.strictDi)) || <any> \"deferred\";\n  };\n\n  /** true if the object has both `token` and `resolveFn`, and is probably a [[ResolveLiteral]] */\n  const isResolveLiteral  = (obj: any) => !!(obj.token && obj.resolveFn);\n\n  /** true if the object looks like a provide literal, or a ng2 Provider */\n  const isLikeNg2Provider = (obj: any) => !!((obj.provide || obj.token) && (obj.useValue || obj.useFactory || obj.useExisting || obj.useClass));\n\n  /** true if the object looks like a tuple from obj2Tuples */\n  const isTupleFromObj    = (obj: any) => !!(obj && obj.val && (isString(obj.val) || isArray(obj.val)  || isFunction(obj.val)));\n\n  /** extracts the token from a Provider or provide literal */\n  const token             = (p: any) => p.provide || p.token;\n\n  /** Given a literal resolve or provider object, returns a Resolvable */\n  const literal2Resolvable = pattern([\n    [prop('resolveFn'),   p => new Resolvable(token(p), p.resolveFn, p.deps, p.policy)],\n    [prop('useFactory'),  p => new Resolvable(token(p), p.useFactory, (p.deps || p.dependencies), p.policy)],\n    [prop('useClass'),    p => new Resolvable(token(p), () => new (<any>p.useClass)(), [], p.policy)],\n    [prop('useValue'),    p => new Resolvable(token(p), () => p.useValue, [], p.policy, p.useValue)],\n    [prop('useExisting'), p => new Resolvable(token(p), identity, [p.useExisting], p.policy)],\n  ]);\n\n  const tuple2Resolvable = pattern([\n    [pipe(prop(\"val\"), isString),   (tuple: Tuple) => new Resolvable(tuple.token, identity, [ tuple.val ], tuple.policy)],\n    [pipe(prop(\"val\"), isArray),    (tuple: Tuple) => new Resolvable(tuple.token, tail(<any[]> tuple.val), tuple.val.slice(0, -1), tuple.policy)],\n    [pipe(prop(\"val\"), isFunction), (tuple: Tuple) => new Resolvable(tuple.token, tuple.val, annotate(tuple.val), tuple.policy)],\n  ]);\n\n  const item2Resolvable = <(obj: any) => Resolvable> pattern([\n    [is(Resolvable),                (r: Resolvable) => r],\n    [isResolveLiteral,              literal2Resolvable],\n    [isLikeNg2Provider,             literal2Resolvable],\n    [isTupleFromObj,                tuple2Resolvable],\n    [val(true),                     (obj: any) => { throw new Error(\"Invalid resolve value: \" + stringify(obj)) }]\n  ]);\n\n  // If resolveBlock is already an array, use it as-is.\n  // Otherwise, assume it's an object and convert to an Array of tuples\n  let decl = state.resolve;\n  let items: any[] = isArray(decl) ? decl : objects2Tuples(decl, state.resolvePolicy || {});\n  return items.map(item2Resolvable);\n}\n\n/**\n * @internalapi A internal global service\n *\n * StateBuilder is a factory for the internal [[StateObject]] objects.\n *\n * When you register a state with the [[StateRegistry]], you register a plain old javascript object which\n * conforms to the [[StateDeclaration]] interface.  This factory takes that object and builds the corresponding\n * [[StateObject]] object, which has an API and is used internally.\n *\n * Custom properties or API may be added to the internal [[StateObject]] object by registering a decorator function\n * using the [[builder]] method.\n */\nexport class StateBuilder {\n  /** An object that contains all the BuilderFunctions registered, key'd by the name of the State property they build */\n  private builders: Builders;\n\n  constructor(private matcher: StateMatcher, urlMatcherFactory: UrlMatcherFactory) {\n    let self = this;\n\n    const root = () => matcher.find(\"\");\n    const isRoot = (state: StateObject) => state.name === \"\";\n\n    function parentBuilder(state: StateObject) {\n      if (isRoot(state)) return null;\n      return matcher.find(self.parentName(state)) || root();\n    }\n\n    this.builders = {\n      name: [ nameBuilder ],\n      self: [ selfBuilder ],\n      parent: [ parentBuilder ],\n      data: [ dataBuilder ],\n      // Build a URLMatcher if necessary, either via a relative or absolute URL\n      url: [ getUrlBuilder(urlMatcherFactory, root) ],\n      // Keep track of the closest ancestor state that has a URL (i.e. is navigable)\n      navigable: [ getNavigableBuilder(isRoot) ],\n      params: [ getParamsBuilder(urlMatcherFactory.paramFactory) ],\n      // Each framework-specific ui-router implementation should define its own `views` builder\n      // e.g., src/ng1/statebuilders/views.ts\n      views: [],\n      // Keep a full path from the root down to this state as this is needed for state activation.\n      path: [ pathBuilder ],\n      // Speed up $state.includes() as it's used a lot\n      includes: [ includesBuilder ],\n      resolvables: [ resolvablesBuilder ]\n    };\n  }\n\n  /**\n   * Registers a [[BuilderFunction]] for a specific [[StateObject]] property (e.g., `parent`, `url`, or `path`).\n   * More than one BuilderFunction can be registered for a given property.\n   *\n   * The BuilderFunction(s) will be used to define the property on any subsequently built [[StateObject]] objects.\n   *\n   * @param name The name of the State property being registered for.\n   * @param fn The BuilderFunction which will be used to build the State property\n   * @returns a function which deregisters the BuilderFunction\n   */\n  builder(name: string, fn: BuilderFunction): (BuilderFunction|BuilderFunction[]|Function) {\n    let builders = this.builders;\n    let array = builders[name] || [];\n    // Backwards compat: if only one builder exists, return it, else return whole arary.\n    if (isString(name) && !isDefined(fn)) return array.length > 1 ? array : array[0];\n    if (!isString(name) || !isFunction(fn)) return;\n\n    builders[name] = array;\n    builders[name].push(fn);\n    return () => builders[name].splice(builders[name].indexOf(fn, 1)) && null;\n  }\n\n  /**\n   * Builds all of the properties on an essentially blank State object, returning a State object which has all its\n   * properties and API built.\n   *\n   * @param state an uninitialized State object\n   * @returns the built State object\n   */\n  build(state: StateObject): StateObject {\n    let {matcher, builders} = this;\n    let parent = this.parentName(state);\n\n    if (parent && !matcher.find(parent, undefined, false)) {\n      return null;\n    }\n\n    for (let key in builders) {\n      if (!builders.hasOwnProperty(key)) continue;\n      let chain = builders[key].reduce((parentFn: BuilderFunction, step: BuilderFunction) => (_state) => step(_state, parentFn), noop);\n      state[key] = chain(state);\n    }\n    return state;\n  }\n\n  parentName(state: StateObject) {\n    // name = 'foo.bar.baz.**'\n    let name = state.name || \"\";\n    // segments = ['foo', 'bar', 'baz', '.**']\n    let segments = name.split('.');\n    // segments = ['foo', 'bar', 'baz']\n    let lastSegment = segments.pop();\n    // segments = ['foo', 'bar'] (ignore .** segment for future states)\n    if (lastSegment === '**') segments.pop();\n\n    if (segments.length) {\n      if (state.parent) {\n        throw new Error(`States that specify the 'parent:' property should not have a '.' in their name (${name})`);\n      }\n\n      // 'foo.bar'\n      return segments.join(\".\");\n    }\n\n    if (!state.parent) return \"\";\n    return isString(state.parent) ? state.parent : state.parent.name;\n  }\n\n  name(state: StateObject) {\n    let name = state.name;\n    if (name.indexOf('.') !== -1 || !state.parent) return name;\n\n    let parentName = isString(state.parent) ? state.parent : state.parent.name;\n    return parentName ? parentName + \".\" + name : name;\n  }\n}\n","/**\n * @coreapi\n * @module url\n */\n/** for typedoc */\nimport {\n  map, defaults, inherit, identity, unnest, tail, find, Obj, pairs, allTrueR, unnestR, arrayTuples\n} from \"../common/common\";\nimport { prop, propEq } from \"../common/hof\";\nimport { isArray, isString, isDefined } from \"../common/predicates\";\nimport { Param, DefType } from \"../params/param\";\nimport { ParamTypes } from \"../params/paramTypes\";\nimport { RawParams } from \"../params/interface\";\nimport { ParamFactory } from \"./interface\";\nimport { joinNeighborsR, splitOnDelim } from \"../common/strings\";\n\n/** @hidden */\nfunction quoteRegExp(string: any, param?: any) {\n  let surroundPattern = ['', ''], result = string.replace(/[\\\\\\[\\]\\^$*+?.()|{}]/g, \"\\\\$&\");\n  if (!param) return result;\n\n  switch (param.squash) {\n    case false:\n      surroundPattern = ['(', ')' + (param.isOptional ? '?' : '')]; break;\n    case true:\n      result = result.replace(/\\/$/, '');\n      surroundPattern = ['(?:\\/(', ')|\\/)?'];\n      break;\n    default:\n      surroundPattern = [`(${param.squash}|`, ')?']; break;\n  }\n  return result + surroundPattern[0] + param.type.pattern.source + surroundPattern[1];\n}\n\n/** @hidden */\nconst memoizeTo = (obj: Obj, prop: string, fn: Function) =>\n    obj[prop] = obj[prop] || fn();\n\n/** @hidden */\nconst splitOnSlash = splitOnDelim('/');\n\n/** @hidden */\ninterface UrlMatcherCache {\n  segments?: any[];\n  weights?: number[];\n  path?: UrlMatcher[];\n  parent?: UrlMatcher;\n  pattern?: RegExp;\n}\n\n/**\n * Matches URLs against patterns.\n *\n * Matches URLs against patterns and extracts named parameters from the path or the search\n * part of the URL.\n *\n * A URL pattern consists of a path pattern, optionally followed by '?' and a list of search (query)\n * parameters. Multiple search parameter names are separated by '&'. Search parameters\n * do not influence whether or not a URL is matched, but their values are passed through into\n * the matched parameters returned by [[UrlMatcher.exec]].\n *\n * - *Path parameters* are defined using curly brace placeholders (`/somepath/{param}`)\n * or colon placeholders (`/somePath/:param`).\n *\n * - *A parameter RegExp* may be defined for a param after a colon\n * (`/somePath/{param:[a-zA-Z0-9]+}`) in a curly brace placeholder.\n * The regexp must match for the url to be matched.\n * Should the regexp itself contain curly braces, they must be in matched pairs or escaped with a backslash.\n *\n * Note: a RegExp parameter will encode its value using either [[ParamTypes.path]] or [[ParamTypes.query]].\n *\n * - *Custom parameter types* may also be specified after a colon (`/somePath/{param:int}`) in curly brace parameters.\n *   See [[UrlMatcherFactory.type]] for more information.\n *\n * - *Catch-all parameters* are defined using an asterisk placeholder (`/somepath/*catchallparam`).\n *   A catch-all * parameter value will contain the remainder of the URL.\n *\n * ---\n *\n * Parameter names may contain only word characters (latin letters, digits, and underscore) and\n * must be unique within the pattern (across both path and search parameters).\n * A path parameter matches any number of characters other than '/'. For catch-all\n * placeholders the path parameter matches any number of characters.\n *\n * Examples:\n *\n * * `'/hello/'` - Matches only if the path is exactly '/hello/'. There is no special treatment for\n *   trailing slashes, and patterns have to match the entire path, not just a prefix.\n * * `'/user/:id'` - Matches '/user/bob' or '/user/1234!!!' or even '/user/' but not '/user' or\n *   '/user/bob/details'. The second path segment will be captured as the parameter 'id'.\n * * `'/user/{id}'` - Same as the previous example, but using curly brace syntax.\n * * `'/user/{id:[^/]*}'` - Same as the previous example.\n * * `'/user/{id:[0-9a-fA-F]{1,8}}'` - Similar to the previous example, but only matches if the id\n *   parameter consists of 1 to 8 hex digits.\n * * `'/files/{path:.*}'` - Matches any URL starting with '/files/' and captures the rest of the\n *   path into the parameter 'path'.\n * * `'/files/*path'` - ditto.\n * * `'/calendar/{start:date}'` - Matches \"/calendar/2014-11-12\" (because the pattern defined\n *   in the built-in  `date` ParamType matches `2014-11-12`) and provides a Date object in $stateParams.start\n *\n */\nexport class UrlMatcher {\n  /** @hidden */\n  static nameValidator: RegExp = /^\\w+([-.]+\\w+)*(?:\\[\\])?$/;\n\n  /** @hidden */\n  private _cache: UrlMatcherCache = { path: [this] };\n  /** @hidden */\n  private _children: UrlMatcher[] = [];\n  /** @hidden */\n  private _params:   Param[]      = [];\n  /** @hidden */\n  private _segments: string[]     = [];\n  /** @hidden */\n  private _compiled: string[]     = [];\n\n  /** The pattern that was passed into the constructor */\n  public pattern: string;\n\n  /**\n   * @param pattern The pattern to compile into a matcher.\n   * @param paramTypes The [[ParamTypes]] registry\n   * @param config  A configuration object\n   * - `caseInsensitive` - `true` if URL matching should be case insensitive, otherwise `false`, the default value (for backward compatibility) is `false`.\n   * - `strict` - `false` if matching against a URL with a trailing slash should be treated as equivalent to a URL without a trailing slash, the default value is `true`.\n   */\n  constructor(pattern: string, paramTypes: ParamTypes, paramFactory: ParamFactory, public config?: any) {\n    this.pattern = pattern;\n    this.config = defaults(this.config, {\n      params: {},\n      strict: true,\n      caseInsensitive: false,\n      paramMap: identity\n    });\n\n    // Find all placeholders and create a compiled pattern, using either classic or curly syntax:\n    //   '*' name\n    //   ':' name\n    //   '{' name '}'\n    //   '{' name ':' regexp '}'\n    // The regular expression is somewhat complicated due to the need to allow curly braces\n    // inside the regular expression. The placeholder regexp breaks down as follows:\n    //    ([:*])([\\w\\[\\]]+)              - classic placeholder ($1 / $2) (search version has - for snake-case)\n    //    \\{([\\w\\[\\]]+)(?:\\:\\s*( ... ))?\\}  - curly brace placeholder ($3) with optional regexp/type ... ($4) (search version has - for snake-case\n    //    (?: ... | ... | ... )+         - the regexp consists of any number of atoms, an atom being either\n    //    [^{}\\\\]+                       - anything other than curly braces or backslash\n    //    \\\\.                            - a backslash escape\n    //    \\{(?:[^{}\\\\]+|\\\\.)*\\}          - a matched set of curly braces containing other atoms\n    let placeholder = /([:*])([\\w\\[\\]]+)|\\{([\\w\\[\\]]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        searchPlaceholder = /([:]?)([\\w\\[\\].-]+)|\\{([\\w\\[\\].-]+)(?:\\:\\s*((?:[^{}\\\\]+|\\\\.|\\{(?:[^{}\\\\]+|\\\\.)*\\})+))?\\}/g,\n        last = 0, m: RegExpExecArray, patterns: any[][] = [];\n\n    const checkParamErrors = (id: string) => {\n      if (!UrlMatcher.nameValidator.test(id)) throw new Error(`Invalid parameter name '${id}' in pattern '${pattern}'`);\n      if (find(this._params, propEq('id', id))) throw new Error(`Duplicate parameter name '${id}' in pattern '${pattern}'`);\n    };\n\n    // Split into static segments separated by path parameter placeholders.\n    // The number of segments is always 1 more than the number of parameters.\n    const matchDetails = (m: RegExpExecArray, isSearch: boolean) => {\n      // IE[78] returns '' for unmatched groups instead of null\n      let id = m[2] || m[3];\n      let regexp = isSearch ? m[4] : m[4] || (m[1] === '*' ? '[\\\\s\\\\S]*' : null);\n\n      const makeRegexpType = (regexp) => inherit(paramTypes.type(isSearch ? \"query\" : \"path\"), {\n        pattern: new RegExp(regexp, this.config.caseInsensitive ? 'i' : undefined)\n      });\n\n      return {\n        id,\n        regexp,\n        cfg:     this.config.params[id],\n        segment: pattern.substring(last, m.index),\n        type:    !regexp ? null : paramTypes.type(regexp) || makeRegexpType(regexp)\n      };\n    };\n\n    let p: any, segment: string;\n\n    while ((m = placeholder.exec(pattern))) {\n      p = matchDetails(m, false);\n      if (p.segment.indexOf('?') >= 0) break; // we're into the search part\n\n      checkParamErrors(p.id);\n      this._params.push(paramFactory.fromPath(p.id, p.type, this.config.paramMap(p.cfg, false)));\n      this._segments.push(p.segment);\n      patterns.push([p.segment, tail(this._params)]);\n      last = placeholder.lastIndex;\n    }\n    segment = pattern.substring(last);\n\n    // Find any search parameter names and remove them from the last segment\n    let i = segment.indexOf('?');\n\n    if (i >= 0) {\n      let search = segment.substring(i);\n      segment = segment.substring(0, i);\n\n      if (search.length > 0) {\n        last = 0;\n\n        while ((m = searchPlaceholder.exec(search))) {\n          p = matchDetails(m, true);\n          checkParamErrors(p.id);\n          this._params.push(paramFactory.fromSearch(p.id, p.type, this.config.paramMap(p.cfg, true)));\n          last = placeholder.lastIndex;\n          // check if ?&\n        }\n      }\n    }\n\n    this._segments.push(segment);\n    this._compiled = patterns.map(pattern => quoteRegExp.apply(null, pattern)).concat(quoteRegExp(segment));\n  }\n\n  /**\n   * Creates a new concatenated UrlMatcher\n   *\n   * Builds a new UrlMatcher by appending another UrlMatcher to this one.\n   *\n   * @param url A `UrlMatcher` instance to append as a child of the current `UrlMatcher`.\n   */\n  append(url: UrlMatcher): UrlMatcher {\n    this._children.push(url);\n    url._cache = {\n      path: this._cache.path.concat(url),\n      parent: this,\n      pattern: null,\n    };\n    return url;\n  }\n\n  /** @hidden */\n  isRoot(): boolean {\n    return this._cache.path[0] === this;\n  }\n\n  /** Returns the input pattern string */\n  toString(): string {\n    return this.pattern;\n  }\n\n  /**\n   * Tests the specified url/path against this matcher.\n   *\n   * Tests if the given url matches this matcher's pattern, and returns an object containing the captured\n   * parameter values.  Returns null if the path does not match.\n   *\n   * The returned object contains the values\n   * of any search parameters that are mentioned in the pattern, but their value may be null if\n   * they are not present in `search`. This means that search parameters are always treated\n   * as optional.\n   *\n   * #### Example:\n   * ```js\n   * new UrlMatcher('/user/{id}?q&r').exec('/user/bob', {\n   *   x: '1', q: 'hello'\n   * });\n   * // returns { id: 'bob', q: 'hello', r: null }\n   * ```\n   *\n   * @param path    The URL path to match, e.g. `$location.path()`.\n   * @param search  URL search parameters, e.g. `$location.search()`.\n   * @param hash    URL hash e.g. `$location.hash()`.\n   * @param options\n   *\n   * @returns The captured parameter values.\n   */\n  exec(path: string, search: any = {}, hash?: string, options: any = {}): RawParams {\n    let match = memoizeTo(this._cache, 'pattern', () => {\n      return new RegExp([\n        '^',\n        unnest(this._cache.path.map(prop('_compiled'))).join(''),\n        this.config.strict === false ? '\\/?' : '',\n        '$'\n      ].join(''), this.config.caseInsensitive ? 'i' : undefined);\n    }).exec(path);\n\n    if (!match) return null;\n\n    //options = defaults(options, { isolate: false });\n\n    let allParams:    Param[] = this.parameters(),\n        pathParams:   Param[] = allParams.filter(param => !param.isSearch()),\n        searchParams: Param[] = allParams.filter(param => param.isSearch()),\n        nPathSegments  = this._cache.path.map(urlm => urlm._segments.length - 1).reduce((a, x) => a + x),\n        values: RawParams = {};\n\n    if (nPathSegments !== match.length - 1)\n      throw new Error(`Unbalanced capture group in route '${this.pattern}'`);\n\n    function decodePathArray(string: string) {\n      const reverseString = (str: string) => str.split(\"\").reverse().join(\"\");\n      const unquoteDashes = (str: string) => str.replace(/\\\\-/g, \"-\");\n\n      let split = reverseString(string).split(/-(?!\\\\)/);\n      let allReversed = map(split, reverseString);\n      return map(allReversed, unquoteDashes).reverse();\n    }\n\n    for (let i = 0; i < nPathSegments; i++) {\n      let param: Param = pathParams[i];\n      let value: (any|any[]) = match[i + 1];\n\n      // if the param value matches a pre-replace pair, replace the value before decoding.\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (value && param.array === true) value = decodePathArray(value);\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    }\n    searchParams.forEach(param => {\n      let value = search[param.id];\n      for (let j = 0; j < param.replace.length; j++) {\n        if (param.replace[j].from === value) value = param.replace[j].to;\n      }\n      if (isDefined(value)) value = param.type.decode(value);\n      values[param.id] = param.value(value);\n    });\n\n    if (hash) values[\"#\"] = hash;\n\n    return values;\n  }\n\n  /**\n   * @hidden\n   * Returns all the [[Param]] objects of all path and search parameters of this pattern in order of appearance.\n   *\n   * @returns {Array.<Param>}  An array of [[Param]] objects. Must be treated as read-only. If the\n   *    pattern has no parameters, an empty array is returned.\n   */\n  parameters(opts: any = {}): Param[] {\n    if (opts.inherit === false) return this._params;\n    return unnest(this._cache.path.map(matcher => matcher._params));\n  }\n\n  /**\n   * @hidden\n   * Returns a single parameter from this UrlMatcher by id\n   *\n   * @param id\n   * @param opts\n   * @returns {T|Param|any|boolean|UrlMatcher|null}\n   */\n  parameter(id: string, opts: any = {}): Param {\n    const findParam = () => {\n      for (let param of this._params) {\n        if (param.id === id) return param;\n      }\n    };\n\n    let parent = this._cache.parent;\n    return findParam() || (opts.inherit !== false && parent && parent.parameter(id, opts)) || null;\n  }\n\n  /**\n   * Validates the input parameter values against this UrlMatcher\n   *\n   * Checks an object hash of parameters to validate their correctness according to the parameter\n   * types of this `UrlMatcher`.\n   *\n   * @param params The object hash of parameters to validate.\n   * @returns Returns `true` if `params` validates, otherwise `false`.\n   */\n  validates(params: RawParams): boolean {\n    const validParamVal = (param: Param, val: any) =>\n        !param || param.validates(val);\n\n    params = params || {};\n\n    // I'm not sure why this checks only the param keys passed in, and not all the params known to the matcher\n    let paramSchema = this.parameters().filter(paramDef => params.hasOwnProperty(paramDef.id));\n    return paramSchema.map(paramDef => validParamVal(paramDef, params[paramDef.id])).reduce(allTrueR, true);\n  }\n\n  /**\n   * Given a set of parameter values, creates a URL from this UrlMatcher.\n   *\n   * Creates a URL that matches this pattern by substituting the specified values\n   * for the path and search parameters.\n   *\n   * #### Example:\n   * ```js\n   * new UrlMatcher('/user/{id}?q').format({ id:'bob', q:'yes' });\n   * // returns '/user/bob?q=yes'\n   * ```\n   *\n   * @param values  the values to substitute for the parameters in this pattern.\n   * @returns the formatted URL (path and optionally search part).\n   */\n  format(values: RawParams = {}) {\n    // Build the full path of UrlMatchers (including all parent UrlMatchers)\n    let urlMatchers = this._cache.path;\n\n    // Extract all the static segments and Params (processed as ParamDetails)\n    // into an ordered array\n    let pathSegmentsAndParams: Array<string|ParamDetails> = urlMatchers.map(UrlMatcher.pathSegmentsAndParams)\n            .reduce(unnestR, [])\n            .map(x => isString(x) ? x : getDetails(x));\n\n    // Extract the query params into a separate array\n    let queryParams: Array<ParamDetails> = urlMatchers.map(UrlMatcher.queryParams)\n            .reduce(unnestR, [])\n            .map(getDetails);\n\n    const isInvalid = (param: ParamDetails) => param.isValid === false;\n    if (pathSegmentsAndParams.concat(queryParams).filter(isInvalid).length) {\n      return null;\n    }\n\n    /**\n     * Given a Param, applies the parameter value, then returns detailed information about it\n     */\n    function getDetails(param: Param): ParamDetails {\n      // Normalize to typed value\n      let value = param.value(values[param.id]);\n      let isValid = param.validates(value);\n      let isDefaultValue = param.isDefaultValue(value);\n      // Check if we're in squash mode for the parameter\n      let squash = isDefaultValue ? param.squash : false;\n      // Allow the Parameter's Type to encode the value\n      let encoded = param.type.encode(value);\n\n      return { param, value, isValid, isDefaultValue, squash, encoded };\n    }\n\n    // Build up the path-portion from the list of static segments and parameters\n    let pathString = pathSegmentsAndParams.reduce((acc: string, x: string|ParamDetails) => {\n      // The element is a static segment (a raw string); just append it\n      if (isString(x)) return acc + x;\n\n      // Otherwise, it's a ParamDetails.\n      let { squash, encoded, param } = x;\n\n      // If squash is === true, try to remove a slash from the path\n      if (squash === true) return (acc.match(/\\/$/)) ? acc.slice(0, -1) : acc;\n      // If squash is a string, use the string for the param value\n      if (isString(squash)) return acc + squash;\n      if (squash !== false) return acc; // ?\n      if (encoded == null) return acc;\n      // If this parameter value is an array, encode the value using encodeDashes\n      if (isArray(encoded)) return acc + map(<string[]> encoded, UrlMatcher.encodeDashes).join(\"-\");\n      // If the parameter type is \"raw\", then do not encodeURIComponent\n      if (param.raw) return acc + encoded;\n      // Encode the value\n      return acc + encodeURIComponent(<string> encoded);\n    }, \"\");\n\n    // Build the query string by applying parameter values (array or regular)\n    // then mapping to key=value, then flattening and joining using \"&\"\n    let queryString = queryParams.map((paramDetails: ParamDetails) => {\n      let { param, squash, encoded, isDefaultValue } = paramDetails;\n      if (encoded == null || (isDefaultValue && squash !== false)) return;\n      if (!isArray(encoded)) encoded = [<string> encoded];\n      if (encoded.length === 0) return;\n      if (!param.raw) encoded = map(<string[]> encoded, encodeURIComponent);\n\n      return (<string[]> encoded).map(val => `${param.id}=${val}`);\n    }).filter(identity).reduce(unnestR, []).join(\"&\");\n\n    // Concat the pathstring with the queryString (if exists) and the hashString (if exists)\n    return pathString + (queryString ? `?${queryString}` : \"\") + (values[\"#\"] ? \"#\" + values[\"#\"] : \"\");\n  }\n\n  /** @hidden */\n  static encodeDashes(str: string) { // Replace dashes with encoded \"\\-\"\n    return encodeURIComponent(str).replace(/-/g, c => `%5C%${c.charCodeAt(0).toString(16).toUpperCase()}`);\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's path segments and path params, in order */\n  static pathSegmentsAndParams(matcher: UrlMatcher) {\n    let staticSegments = matcher._segments;\n    let pathParams = matcher._params.filter(p => p.location === DefType.PATH);\n    return arrayTuples(staticSegments, pathParams.concat(undefined))\n        .reduce(unnestR, [])\n        .filter(x => x !== \"\" && isDefined(x));\n  }\n\n  /** @hidden Given a matcher, return an array with the matcher's query params */\n  static queryParams(matcher: UrlMatcher): Param[] {\n    return matcher._params.filter(p => p.location === DefType.SEARCH);\n  }\n\n  /**\n   * Compare two UrlMatchers\n   *\n   * This comparison function converts a UrlMatcher into static and dynamic path segments.\n   * Each static path segment is a static string between a path separator (slash character).\n   * Each dynamic segment is a path parameter.\n   *\n   * The comparison function sorts static segments before dynamic ones.\n   */\n  static compare(a: UrlMatcher, b: UrlMatcher): number {\n    /**\n     * Turn a UrlMatcher and all its parent matchers into an array\n     * of slash literals '/', string literals, and Param objects\n     *\n     * This example matcher matches strings like \"/foo/:param/tail\":\n     * var matcher = $umf.compile(\"/foo\").append($umf.compile(\"/:param\")).append($umf.compile(\"/\")).append($umf.compile(\"tail\"));\n     * var result = segments(matcher); // [ '/', 'foo', '/', Param, '/', 'tail' ]\n     *\n     * Caches the result as `matcher._cache.segments`\n     */\n    const segments = (matcher: UrlMatcher) =>\n        matcher._cache.segments = matcher._cache.segments ||\n            matcher._cache.path.map(UrlMatcher.pathSegmentsAndParams)\n                .reduce(unnestR, [])\n                .reduce(joinNeighborsR, [])\n                .map(x => isString(x) ? splitOnSlash(x) : x)\n                .reduce(unnestR, []);\n\n    /**\n     * Gets the sort weight for each segment of a UrlMatcher\n     *\n     * Caches the result as `matcher._cache.weights`\n     */\n    const weights = (matcher: UrlMatcher) =>\n        matcher._cache.weights = matcher._cache.weights ||\n            segments(matcher).map(segment => {\n              // Sort slashes first, then static strings, the Params\n              if (segment === '/') return 1;\n              if (isString(segment)) return 2;\n              if (segment instanceof Param) return 3;\n            });\n\n    let cmp, i, pairs = arrayTuples(weights(a), weights(b));\n\n    for (i = 0; i < pairs.length; i++) {\n      cmp = pairs[i][0] - pairs[i][1];\n      if (cmp !== 0) return cmp;\n    }\n\n    return 0;\n  }\n}\n\n/** @hidden */\ninterface ParamDetails {\n  param: Param;\n  value: any;\n  isValid: boolean;\n  isDefaultValue: boolean;\n  squash: (boolean|string);\n  encoded: (string|string[]);\n}\n","/**\n * @internalapi\n * @module url\n */\n/** for typedoc */\nimport { composeSort, createProxyFunctions, extend, inArray, removeFrom, sortBy } from '../common/common';\nimport { isDefined, isFunction, isString } from '../common/predicates';\nimport { UrlMatcher } from './urlMatcher';\nimport { RawParams } from '../params/interface';\nimport { Disposable } from '../interface';\nimport { UIRouter } from '../router';\nimport { is, pattern, pipe, prop, val } from '../common/hof';\nimport { UrlRuleFactory } from './urlRule';\nimport { TargetState } from '../state/targetState';\nimport { MatchResult, UrlParts, UrlRule, UrlRuleHandlerFn, UrlRuleMatchFn, UrlRulesApi, UrlSyncApi } from './interface';\nimport { TargetStateDef } from '../state/interface';\n\n/** @hidden */\nfunction appendBasePath(url: string, isHtml5: boolean, absolute: boolean, baseHref: string): string {\n  if (baseHref === '/') return url;\n  if (isHtml5) return baseHref.slice(0, -1) + url;\n  if (absolute) return baseHref.slice(1) + url;\n  return url;\n}\n\n/** @hidden */\nconst getMatcher = prop(\"urlMatcher\");\n\n/**\n * Default rule priority sorting function.\n *\n * Sorts rules by:\n *\n * - Explicit priority (set rule priority using [[UrlRulesApi.when]])\n * - Rule type (STATE: 4, URLMATCHER: 4, REGEXP: 3, RAW: 2, OTHER: 1)\n * - `UrlMatcher` specificity ([[UrlMatcher.compare]]): works for STATE and URLMATCHER types to pick the most specific rule.\n * - Registration order (for rule types other than STATE and URLMATCHER)\n *\n * @coreapi\n */\nlet defaultRuleSortFn: (a: UrlRule, b: UrlRule) => number;\ndefaultRuleSortFn = composeSort(\n    sortBy(pipe(prop(\"priority\"), x => -x)),\n    sortBy(pipe(prop(\"type\"), type => ({ \"STATE\": 4, \"URLMATCHER\": 4, \"REGEXP\": 3, \"RAW\": 2, \"OTHER\": 1 })[type])),\n    (a, b) => (getMatcher(a) && getMatcher(b)) ? UrlMatcher.compare(getMatcher(a), getMatcher(b)) : 0,\n    sortBy(prop(\"$id\"), inArray([ \"REGEXP\", \"RAW\", \"OTHER\" ])),\n);\n\n/**\n * Updates URL and responds to URL changes\n *\n * ### Deprecation warning:\n * This class is now considered to be an internal API\n * Use the [[UrlService]] instead.\n * For configuring URL rules, use the [[UrlRulesApi]] which can be found as [[UrlService.rules]].\n *\n * This class updates the URL when the state changes.\n * It also responds to changes in the URL.\n */\nexport class UrlRouter implements UrlRulesApi, UrlSyncApi, Disposable {\n  /** used to create [[UrlRule]] objects for common cases */\n  public urlRuleFactory: UrlRuleFactory;\n\n  /** @hidden */ private _router: UIRouter;\n  /** @hidden */ private location: string;\n  /** @hidden */ private _sortFn = defaultRuleSortFn;\n  /** @hidden */ private _stopFn: Function;\n  /** @hidden */ _rules: UrlRule[] = [];\n  /** @hidden */ private _otherwiseFn: UrlRule;\n  /** @hidden */ interceptDeferred = false;\n  /** @hidden */ private _id = 0;\n  /** @hidden */ private _sorted = false;\n\n  /** @hidden */\n  constructor(router: UIRouter) {\n    this._router = router;\n    this.urlRuleFactory = new UrlRuleFactory(router);\n    createProxyFunctions(val(UrlRouter.prototype), this, val(this));\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.listen(false);\n    this._rules = [];\n    delete this._otherwiseFn;\n  }\n\n  /** @inheritdoc */\n  sort(compareFn?: (a: UrlRule, b: UrlRule) => number) {\n    this._rules.sort(this._sortFn = compareFn || this._sortFn);\n    this._sorted = true;\n  }\n\n  private ensureSorted() {\n    this._sorted || this.sort();\n  }\n\n  /**\n   * Given a URL, check all rules and return the best [[MatchResult]]\n   * @param url\n   * @returns {MatchResult}\n   */\n  match(url: UrlParts): MatchResult {\n    this.ensureSorted();\n\n    url = extend({path: '', search: {}, hash: '' }, url);\n    let rules = this.rules();\n    if (this._otherwiseFn) rules.push(this._otherwiseFn);\n\n    // Checks a single rule. Returns { rule: rule, match: match, weight: weight } if it matched, or undefined\n\n    let checkRule = (rule: UrlRule): MatchResult => {\n      let match = rule.match(url, this._router);\n      return match && { match, rule, weight: rule.matchPriority(match) };\n    };\n\n    // The rules are pre-sorted.\n    // - Find the first matching rule.\n    // - Find any other matching rule that sorted *exactly the same*, according to `.sort()`.\n    // - Choose the rule with the highest match weight.\n    let best: MatchResult;\n    for (let i = 0; i < rules.length; i++) {\n      // Stop when there is a 'best' rule and the next rule sorts differently than it.\n      if (best && this._sortFn(rules[i], best.rule) !== 0) break;\n\n      let current = checkRule(rules[i]);\n      // Pick the best MatchResult\n      best = (!best || current && current.weight > best.weight) ? current : best;\n    }\n\n    return best;\n  }\n\n  /** @inheritdoc */\n  sync(evt?) {\n    if (evt && evt.defaultPrevented) return;\n\n    let router = this._router,\n        $url = router.urlService,\n        $state = router.stateService;\n\n    let url: UrlParts = {\n      path: $url.path(), search: $url.search(), hash: $url.hash(),\n    };\n\n    let best = this.match(url);\n\n    let applyResult = pattern([\n      [isString, (newurl: string) => $url.url(newurl, true)],\n      [TargetState.isDef, (def: TargetStateDef) => $state.go(def.state, def.params, def.options)],\n      [is(TargetState), (target: TargetState) => $state.go(target.state(), target.params(), target.options())],\n    ]);\n\n    applyResult(best && best.rule.handler(best.match, url, router));\n  }\n\n  /** @inheritdoc */\n  listen(enabled?: boolean): Function {\n    if (enabled === false) {\n      this._stopFn && this._stopFn();\n      delete this._stopFn;\n    } else {\n      return this._stopFn = this._stopFn || this._router.urlService.onChange(evt => this.sync(evt));\n    }\n  }\n\n  /**\n   * Internal API.\n   * @internalapi\n   */\n  update(read?: boolean) {\n    let $url = this._router.locationService;\n    if (read) {\n      this.location = $url.path();\n      return;\n    }\n    if ($url.path() === this.location) return;\n\n    $url.url(this.location, true);\n  }\n\n  /**\n   * Internal API.\n   *\n   * Pushes a new location to the browser history.\n   *\n   * @internalapi\n   * @param urlMatcher\n   * @param params\n   * @param options\n   */\n  push(urlMatcher: UrlMatcher, params?: RawParams, options?: { replace?: (string|boolean) }) {\n    let replace = options && !!options.replace;\n    this._router.urlService.url(urlMatcher.format(params || {}), replace);\n  }\n\n  /**\n   * Builds and returns a URL with interpolated parameters\n   *\n   * #### Example:\n   * ```js\n   * matcher = $umf.compile(\"/about/:person\");\n   * params = { person: \"bob\" };\n   * $bob = $urlRouter.href(matcher, params);\n   * // $bob == \"/about/bob\";\n   * ```\n   *\n   * @param urlMatcher The [[UrlMatcher]] object which is used as the template of the URL to generate.\n   * @param params An object of parameter values to fill the matcher's required parameters.\n   * @param options Options object. The options are:\n   *\n   * - **`absolute`** - {boolean=false},  If true will generate an absolute url, e.g. \"http://www.example.com/fullurl\".\n   *\n   * @returns Returns the fully compiled URL, or `null` if `params` fail validation against `urlMatcher`\n   */\n  href(urlMatcher: UrlMatcher, params?: any, options?: { absolute: boolean }): string {\n    let url = urlMatcher.format(params);\n    if (url == null) return null;\n    \n    options = options || { absolute: false };\n\n    let cfg = this._router.urlService.config;\n    let isHtml5 = cfg.html5Mode();\n    if (!isHtml5 && url !== null) {\n      url = \"#\" + cfg.hashPrefix() + url;\n    }\n    url = appendBasePath(url, isHtml5, options.absolute, cfg.baseHref());\n\n    if (!options.absolute || !url) {\n      return url;\n    }\n\n    let slash = (!isHtml5 && url ? '/' : ''), port = cfg.port();\n    port = <any> (port === 80 || port === 443 ? '' : ':' + port);\n\n    return [cfg.protocol(), '://', cfg.host(), port, slash, url].join('');\n  }\n\n\n  /**\n   * Manually adds a URL Rule.\n   *\n   * Usually, a url rule is added using [[StateDeclaration.url]] or [[when]].\n   * This api can be used directly for more control (to register a [[BaseUrlRule]], for example).\n   * Rules can be created using [[UrlRouter.urlRuleFactory]], or create manually as simple objects.\n   *\n   * A rule should have a `match` function which returns truthy if the rule matched.\n   * It should also have a `handler` function which is invoked if the rule is the best match.\n   *\n   * @return a function that deregisters the rule\n   */\n  rule(rule: UrlRule): Function {\n    if (!UrlRuleFactory.isUrlRule(rule)) throw new Error(\"invalid rule\");\n    rule.$id = this._id++;\n    rule.priority = rule.priority || 0;\n\n    this._rules.push(rule);\n    this._sorted = false;\n\n    return () => this.removeRule(rule);\n  }\n\n  /** @inheritdoc */\n  removeRule(rule): void {\n    removeFrom(this._rules, rule);\n  }\n\n  /** @inheritdoc */\n  rules(): UrlRule[] {\n    this.ensureSorted();\n    return this._rules.slice();\n  }\n\n  /** @inheritdoc */\n  otherwise(handler: string|UrlRuleHandlerFn|TargetState|TargetStateDef) {\n    let handlerFn: UrlRuleHandlerFn = getHandlerFn(handler);\n\n    this._otherwiseFn = this.urlRuleFactory.create(val(true), handlerFn);\n    this._sorted = false;\n  };\n\n  /** @inheritdoc */\n  initial(handler: string | UrlRuleHandlerFn | TargetState | TargetStateDef) {\n    let handlerFn: UrlRuleHandlerFn = getHandlerFn(handler);\n\n    let matchFn: UrlRuleMatchFn = (urlParts, router) =>\n        router.globals.transitionHistory.size() === 0 && !!/^\\/?$/.exec(urlParts.path);\n\n    this.rule(this.urlRuleFactory.create(matchFn, handlerFn));\n  };\n\n  /** @inheritdoc */\n  when(matcher: (RegExp|UrlMatcher|string), handler: string|UrlRuleHandlerFn, options?: { priority: number }): UrlRule {\n    let rule = this.urlRuleFactory.create(matcher, handler);\n    if (isDefined(options && options.priority)) rule.priority = options.priority;\n    this.rule(rule);\n    return rule;\n  };\n\n  /** @inheritdoc */\n  deferIntercept(defer?: boolean) {\n    if (defer === undefined) defer = true;\n    this.interceptDeferred = defer;\n  };\n}\n\nfunction getHandlerFn(handler: string|UrlRuleHandlerFn|TargetState|TargetStateDef): UrlRuleHandlerFn {\n  if (!isFunction(handler) && !isString(handler) && !is(TargetState)(handler) && !TargetState.isDef(handler)) {\n    throw new Error(\"'handler' must be a string, function, TargetState, or have a state: 'newtarget' property\");\n  }\n  return isFunction(handler) ? handler as UrlRuleHandlerFn : val(handler);\n}\n","/** @module hooks */ /** */\nimport { Transition } from \"../transition/transition\";\nimport { UIRouter } from \"../router\";\nimport { TransitionService } from \"../transition/transitionService\";\n\nfunction addCoreResolvables(trans: Transition) {\n  trans.addResolvable({ token: UIRouter,       deps: [], resolveFn: () => trans.router,   data: trans.router },   \"\");\n  trans.addResolvable({ token: Transition,     deps: [], resolveFn: () => trans,          data: trans },          \"\");\n  trans.addResolvable({ token: '$transition$', deps: [], resolveFn: () => trans,          data: trans },          \"\");\n  trans.addResolvable({ token: '$stateParams', deps: [], resolveFn: () => trans.params(), data: trans.params() }, \"\");\n\n  trans.entering().forEach(state => {\n    trans.addResolvable({ token: '$state$',    deps: [], resolveFn: () => state,          data: state },       state);\n  });\n}\n\nexport const registerAddCoreResolvables = (transitionService: TransitionService) =>\n    transitionService.onCreate({}, addCoreResolvables);\n","/** @module hooks */\n/** for typedoc */\nimport { TransitionStateHookFn } from '../transition/interface';\nimport { Transition } from '../transition/transition';\nimport { TransitionService } from '../transition/transitionService';\nimport { StateDeclaration } from '../state/interface';\nimport { StateObject } from '../state/stateObject';\n\n/**\n * A factory which creates an onEnter, onExit or onRetain transition hook function\n *\n * The returned function invokes the (for instance) state.onEnter hook when the\n * state is being entered.\n *\n * @hidden\n */\nfunction makeEnterExitRetainHook(hookName: string): TransitionStateHookFn {\n  return (transition: Transition, state: StateDeclaration) => {\n    let _state: StateObject = state.$$state();\n    let hookFn: TransitionStateHookFn = _state[hookName];\n    return hookFn(transition, state);\n  }\n}\n\n/**\n * The [[TransitionStateHookFn]] for onExit\n *\n * When the state is being exited, the state's .onExit function is invoked.\n *\n * Registered using `transitionService.onExit({ exiting: (state) => !!state.onExit }, onExitHook);`\n *\n * See: [[IHookRegistry.onExit]]\n */\nconst onExitHook: TransitionStateHookFn = makeEnterExitRetainHook('onExit');\nexport const registerOnExitHook = (transitionService: TransitionService) =>\n    transitionService.onExit({exiting: state => !!state.onExit}, onExitHook);\n\n/**\n * The [[TransitionStateHookFn]] for onRetain\n *\n * When the state was already entered, and is not being exited or re-entered, the state's .onRetain function is invoked.\n *\n * Registered using `transitionService.onRetain({ retained: (state) => !!state.onRetain }, onRetainHook);`\n *\n * See: [[IHookRegistry.onRetain]]\n */\nconst onRetainHook: TransitionStateHookFn = makeEnterExitRetainHook('onRetain');\nexport const registerOnRetainHook = (transitionService: TransitionService) =>\n    transitionService.onRetain({retained: state => !!state.onRetain}, onRetainHook);\n\n/**\n * The [[TransitionStateHookFn]] for onEnter\n *\n * When the state is being entered, the state's .onEnter function is invoked.\n *\n * Registered using `transitionService.onEnter({ entering: (state) => !!state.onEnter }, onEnterHook);`\n *\n * See: [[IHookRegistry.onEnter]]\n */\nconst onEnterHook: TransitionStateHookFn = makeEnterExitRetainHook('onEnter');\nexport const registerOnEnterHook = (transitionService: TransitionService) =>\n    transitionService.onEnter({entering: state => !!state.onEnter}, onEnterHook);\n\n","/** @module hooks */ /** */\nimport {Transition} from \"../transition/transition\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {TransitionHookFn} from \"../transition/interface\";\nimport {StateDeclaration, LazyLoadResult} from \"../state/interface\";\nimport {services} from \"../common/coreservices\";\nimport { StateRule } from \"../url/interface\";\n\n/**\n * A [[TransitionHookFn]] that performs lazy loading\n *\n * When entering a state \"abc\" which has a `lazyLoad` function defined:\n * - Invoke the `lazyLoad` function (unless it is already in process)\n *   - Flag the hook function as \"in process\"\n *   - The function should return a promise (that resolves when lazy loading is complete)\n * - Wait for the promise to settle\n *   - If the promise resolves to a [[LazyLoadResult]], then register those states\n *   - Flag the hook function as \"not in process\"\n * - If the hook was successful\n *   - Remove the `lazyLoad` function from the state declaration\n * - If all the hooks were successful\n *   - Retry the transition (by returning a TargetState)\n *\n * ```\n * .state('abc', {\n *   component: 'fooComponent',\n *   lazyLoad: () => System.import('./fooComponent')\n *   });\n * ```\n *\n * See [[StateDeclaration.lazyLoad]]\n */\nconst lazyLoadHook: TransitionHookFn = (transition: Transition) => {\n  let router = transition.router;\n\n  function retryTransition() {\n    if (transition.originalTransition().options().source !== 'url') {\n      // The original transition was not triggered via url sync\n      // The lazy state should be loaded now, so re-try the original transition\n      let orig = transition.targetState();\n      return router.stateService.target(orig.identifier(), orig.params(), orig.options());\n    }\n\n    // The original transition was triggered via url sync\n    // Run the URL rules and find the best match\n    let $url = router.urlService;\n    let result = $url.match($url.parts());\n    let rule = result && result.rule;\n\n    // If the best match is a state, redirect the transition (instead\n    // of calling sync() which supersedes the current transition)\n    if (rule && rule.type === \"STATE\") {\n      let state = (rule as StateRule).state;\n      let params = result.match;\n      return router.stateService.target(state, params, transition.options());\n    }\n\n    // No matching state found, so let .sync() choose the best non-state match/otherwise\n    router.urlService.sync();\n  }\n\n  let promises = transition.entering()\n      .filter(state => !!state.$$state().lazyLoad)\n      .map(state => lazyLoadState(transition, state));\n\n  return services.$q.all(promises).then(retryTransition);\n};\n\nexport const registerLazyLoadHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({ entering: (state) => !!state.lazyLoad }, lazyLoadHook);\n\n\n/**\n * Invokes a state's lazy load function\n *\n * @param transition a Transition context\n * @param state the state to lazy load\n * @returns A promise for the lazy load result\n */\nexport function lazyLoadState(transition: Transition, state: StateDeclaration): Promise<LazyLoadResult> {\n  let lazyLoadFn = state.$$state().lazyLoad;\n\n  // Store/get the lazy load promise on/from the hookfn so it doesn't get re-invoked\n  let promise = lazyLoadFn['_promise'];\n  if (!promise) {\n    const success = (result) => {\n      delete state.lazyLoad;\n      delete state.$$state().lazyLoad;\n      delete lazyLoadFn['_promise'];\n      return result;\n    };\n\n    const error = (err) => {\n      delete lazyLoadFn['_promise'];\n      return services.$q.reject(err);\n    };\n\n    promise = lazyLoadFn['_promise'] =\n        services.$q.when(lazyLoadFn(transition, state))\n            .then(updateStateRegistry)\n            .then(success, error);\n  }\n\n  /** Register any lazy loaded state definitions */\n  function updateStateRegistry(result: LazyLoadResult) {\n    if (result && Array.isArray(result.states)) {\n      result.states.forEach(state => transition.router.stateRegistry.register(state));\n    }\n    return result;\n  }\n\n  return promise;\n}\n","/** @module hooks */ /** */\n\nimport { trace } from '../common/trace';\nimport { Rejection } from '../transition/rejectFactory';\nimport { TransitionService } from '../transition/transitionService';\nimport { Transition } from '../transition/transition';\n\n/**\n * A [[TransitionHookFn]] that skips a transition if it should be ignored\n *\n * This hook is invoked at the end of the onBefore phase.\n *\n * If the transition should be ignored (because no parameter or states changed)\n * then the transition is ignored and not processed.\n */\nfunction ignoredHook(trans: Transition) {\n  const ignoredReason = trans._ignoredReason();\n  if (!ignoredReason) return;\n\n  trace.traceTransitionIgnored(trans);\n\n  const pending = trans.router.globals.transition;\n\n  // The user clicked a link going back to the *current state* ('A')\n  // However, there is also a pending transition in flight (to 'B')\n  // Abort the transition to 'B' because the user now wants to be back at 'A'.\n  if (ignoredReason === 'SameAsCurrent' && pending) {\n    pending.abort();\n  }\n\n  return Rejection.ignored().toPromise();\n}\n\nexport const registerIgnoredTransitionHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({}, ignoredHook, { priority: -9999 });\n","/** @module hooks */ /** */\n\nimport { TransitionService } from '../transition/transitionService';\nimport { Transition } from '../transition/transition';\n\n/**\n * A [[TransitionHookFn]] that rejects the Transition if it is invalid\n *\n * This hook is invoked at the end of the onBefore phase.\n * If the transition is invalid (for example, param values do not validate)\n * then the transition is rejected.\n */\nfunction invalidTransitionHook(trans: Transition) {\n  if (!trans.valid()) {\n    throw new Error(trans.error());\n  }\n}\n\nexport const registerInvalidTransitionHook = (transitionService: TransitionService) =>\n    transitionService.onBefore({}, invalidTransitionHook, { priority: -10000 });\n","/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { isArray } from \"../common/index\";\nimport { LocationServices, LocationConfig } from \"../common/coreservices\";\nimport { UIRouter } from \"../router\";\nimport { identity, unnestR, removeFrom, deregAll, extend } from \"../common/common\";\nimport { LocationLike, HistoryLike } from \"./interface\";\nimport { isDefined } from \"../common/predicates\";\nimport { Disposable } from \"../interface\";\n\nconst beforeAfterSubstr = (char: string) => (str: string): string[] => {\n  if (!str) return [\"\", \"\"];\n  let idx = str.indexOf(char);\n  if (idx === -1) return [str, \"\"];\n  return [str.substr(0, idx), str.substr(idx + 1)];\n};\n\nexport const splitHash = beforeAfterSubstr(\"#\");\nexport const splitQuery = beforeAfterSubstr(\"?\");\nexport const splitEqual = beforeAfterSubstr(\"=\");\nexport const trimHashVal = (str) => str ? str.replace(/^#/, \"\") : \"\";\n\nexport const keyValsToObjectR = (accum, [key, val]) => {\n  if (!accum.hasOwnProperty(key)) {\n    accum[key] = val;\n  } else if (isArray(accum[key])) {\n    accum[key].push(val);\n  } else {\n    accum[key] = [accum[key], val]\n  }\n  return accum;\n};\n\nexport const getParams = (queryString: string): any =>\n    queryString.split(\"&\").filter(identity).map(splitEqual).reduce(keyValsToObjectR, {});\n\nexport function parseUrl(url: string) {\n  const orEmptyString = x => x || \"\";\n  let [beforehash, hash] = splitHash(url).map(orEmptyString);\n  let [path, search] = splitQuery(beforehash).map(orEmptyString);\n\n  return { path, search, hash, url };\n}\n\nexport const buildUrl = (loc: LocationServices) => {\n  let path = loc.path();\n  let searchObject = loc.search();\n  let hash = loc.hash();\n\n  let search = Object.keys(searchObject).map(key => {\n    let param = searchObject[key];\n    let vals = isArray(param) ? param : [param];\n    return vals.map(val => key + \"=\" + val);\n  }).reduce(unnestR, []).join(\"&\");\n\n  return path + (search ? \"?\" + search : \"\") + (hash ? \"#\" + hash : \"\");\n};\n\nexport function locationPluginFactory(\n    name: string,\n    isHtml5: boolean,\n    serviceClass: { new(router?: UIRouter): LocationServices },\n    configurationClass: { new(router?: UIRouter, isHtml5?: boolean): LocationConfig }\n) {\n  return function(router: UIRouter) {\n    let service       = router.locationService = new serviceClass(router);\n    let configuration = router.locationConfig  = new configurationClass(router, isHtml5);\n\n    function dispose(router: UIRouter) {\n      router.dispose(service);\n      router.dispose(configuration);\n    }\n\n    return { name, service, configuration, dispose };\n  };\n}\n\n","/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { BrowserLocationConfig } from \"./browserLocationConfig\";\nimport { HashLocationService } from \"./hashLocationService\";\nimport { locationPluginFactory } from \"./utils\";\nimport { LocationPlugin, ServicesPlugin } from \"./interface\";\nimport { UIRouter } from \"../router\";\nimport { PushStateLocationService } from \"./pushStateLocationService\";\nimport { MemoryLocationService } from \"./memoryLocationService\";\nimport { MemoryLocationConfig } from \"./memoryLocationConfig\";\nimport { $injector } from \"./injector\";\nimport { $q } from \"./q\";\nimport { services } from \"../common/coreservices\";\n\nexport function servicesPlugin(router: UIRouter): ServicesPlugin {\n  services.$injector = $injector;\n  services.$q = $q;\n\n  return { name: \"vanilla.services\", $q, $injector, dispose: () => null };\n}\n\n/** A `UIRouterPlugin` uses the browser hash to get/set the current location */\nexport const hashLocationPlugin: (router: UIRouter) => LocationPlugin =\n    locationPluginFactory('vanilla.hashBangLocation', false, HashLocationService, BrowserLocationConfig);\n\n/** A `UIRouterPlugin` that gets/sets the current location using the browser's `location` and `history` apis */\nexport const pushStateLocationPlugin: (router: UIRouter) => LocationPlugin =\n    locationPluginFactory(\"vanilla.pushStateLocation\", true, PushStateLocationService, BrowserLocationConfig);\n\n/** A `UIRouterPlugin` that gets/sets the current location from an in-memory object */\nexport const memoryLocationPlugin: (router: UIRouter) => LocationPlugin =\n    locationPluginFactory(\"vanilla.memoryLocation\", false, MemoryLocationService, MemoryLocationConfig);\n","/**\n * @coreapi\n * @module core\n */\n/** \n * Matches state names using glob-like pattern strings.\n *\n * Globs can be used in specific APIs including:\n *\n * - [[StateService.is]]\n * - [[StateService.includes]]\n * - The first argument to Hook Registration functions like [[TransitionService.onStart]]\n *    - [[HookMatchCriteria]] and [[HookMatchCriterion]]\n *\n * A `Glob` string is a pattern which matches state names.\n * Nested state names are split into segments (separated by a dot) when processing.\n * The state named `foo.bar.baz` is split into three segments ['foo', 'bar', 'baz']\n *\n * Globs work according to the following rules:\n *\n * ### Exact match:\n *\n * The glob `'A.B'` matches the state named exactly `'A.B'`.\n *\n * | Glob        |Matches states named|Does not match state named|\n * |:------------|:--------------------|:---------------------|\n * | `'A'`       | `'A'`               | `'B'` , `'A.C'`      |\n * | `'A.B'`     | `'A.B'`             | `'A'` , `'A.B.C'`    |\n * | `'foo'`     | `'foo'`             | `'FOO'` , `'foo.bar'`|\n *\n * ### Single star (`*`)\n *\n * A single star (`*`) is a wildcard that matches exactly one segment.\n *\n * | Glob        |Matches states named  |Does not match state named |\n * |:------------|:---------------------|:--------------------------|\n * | `'*'`       | `'A'` , `'Z'`        | `'A.B'` , `'Z.Y.X'`       |\n * | `'A.*'`     | `'A.B'` , `'A.C'`    | `'A'` , `'A.B.C'`         |\n * | `'A.*.*'`   | `'A.B.C'` , `'A.X.Y'`| `'A'`, `'A.B'` , `'Z.Y.X'`|\n *\n * ### Double star (`**`)\n *\n * A double star (`'**'`) is a wildcard that matches *zero or more segments*\n *\n * | Glob        |Matches states named                           |Does not match state named         |\n * |:------------|:----------------------------------------------|:----------------------------------|\n * | `'**'`      | `'A'` , `'A.B'`, `'Z.Y.X'`                    | (matches all states)              |\n * | `'A.**'`    | `'A'` , `'A.B'` , `'A.C.X'`                   | `'Z.Y.X'`                         |\n * | `'**.X'`    | `'X'` , `'A.X'` , `'Z.Y.X'`                   | `'A'` , `'A.login.Z'`             |\n * | `'A.**.X'`  | `'A.X'` , `'A.B.X'` , `'A.B.C.X'`             | `'A'` , `'A.B.C'`                 |\n *\n */\nexport class Glob {\n  text: string;\n  glob: Array<string>;\n  regexp: RegExp;\n\n  constructor(text: string) {\n    this.text = text;\n    this.glob = text.split('.');\n\n    let regexpString = this.text.split('.')\n        .map(seg => {\n          if (seg === '**') return '(?:|(?:\\\\.[^.]*)*)';\n          if (seg === '*')  return '\\\\.[^.]*';\n          return                   '\\\\.' + seg;\n        }).join('');\n\n    this.regexp = new RegExp(\"^\" + regexpString + \"$\");\n  }\n\n  matches(name: string) {\n    return this.regexp.test('.' + name);\n  }\n\n  /** Returns true if the string has glob-like characters in it */\n  static is(text: string) {\n    return !!/[!,*]+/.exec(text);\n  }\n\n  /** Returns a glob from the string, or null if the string isn't Glob-like */\n  static fromString(text: string) {\n    return Glob.is(text) ? new Glob(text) : null;\n  }\n}\n","/**\n * @coreapi\n * @module state\n */\n/** for typedoc */\nimport { StateDeclaration, _ViewDeclaration, _StateDeclaration, LazyLoadResult } from \"./interface\";\nimport { defaults, values, find, inherit } from \"../common/common\";\nimport { propEq } from \"../common/hof\";\nimport { Param } from \"../params/param\";\nimport { UrlMatcher } from \"../url/urlMatcher\";\nimport { Resolvable } from \"../resolve/resolvable\";\nimport { TransitionStateHookFn } from \"../transition/interface\";\nimport { TargetState } from \"./targetState\";\nimport { Transition } from \"../transition/transition\";\nimport { Glob } from \"../common/glob\";\nimport { isObject, isFunction } from \"../common/predicates\";\n\n/**\n * Internal representation of a UI-Router state.\n *\n * Instances of this class are created when a [[StateDeclaration]] is registered with the [[StateRegistry]].\n *\n * A registered [[StateDeclaration]] is augmented with a getter ([[StateDeclaration.$$state]]) which returns the corresponding [[StateObject]] object.\n *\n * This class prototypally inherits from the corresponding [[StateDeclaration]].\n * Each of its own properties (i.e., `hasOwnProperty`) are built using builders from the [[StateBuilder]].\n */\nexport class StateObject {\n  /** The parent [[StateObject]] */\n  public parent: StateObject;\n\n  /** The name used to register the state */\n  public name: string;\n\n  /** Prototypally inherits from [[StateDeclaration.abstract]] */\n  public abstract: boolean;\n\n  /** Prototypally inherits from [[StateDeclaration.resolve]] */\n  public resolve: ({ [key: string]: (string|any[]|Function) }|any[]);\n\n  /** A list of [[Resolvable]] objects.  The internal representation of [[resolve]]. */\n  public resolvables: Resolvable[];\n\n  /** Prototypally inherits from [[StateDeclaration.resolvePolicy]] */\n  public resolvePolicy: any;\n\n  /** A compiled URLMatcher which detects when the state's URL is matched */\n  public url: UrlMatcher;\n\n  /** The parameters for the state, built from the URL and [[StateDeclaration.params]] */\n  public params: { [key: string]: Param };\n\n  /**\n   * The views for the state.\n   * Note: `@uirouter/core` does not register a builder for views.\n   * The framework specific code should register a `views` builder.\n   */\n  public views: { [key: string]: _ViewDeclaration; };\n\n  /**\n   * The original [[StateDeclaration]] used to build this [[StateObject]].\n   * Note: `this` object also prototypally inherits from the `self` declaration object.\n   */\n  public self: StateDeclaration;\n\n  /** The nearest parent [[StateObject]] which has a URL */\n  public navigable: StateObject;\n\n  /** The parent [[StateObject]] objects from this state up to the root */\n  public path: StateObject[];\n\n  /**\n   * Prototypally inherits from [[StateDeclaration.data]]\n   * Note: This is the only field on the [[StateDeclaration]] which is mutated.\n   * The definition object's `data` field is replaced with a new object\n   * which prototypally inherits from the parent state definition's `data` field.\n   */\n  public data: any;\n\n  /** \n   * An object containing the parent States' names as keys and \n   * true as their values.\n   */\n  public includes: { [name: string]: boolean };\n\n  /** Prototypally inherits from [[StateDeclaration.onExit]] */\n  public onExit: TransitionStateHookFn;\n  /** Prototypally inherits from [[StateDeclaration.onRetain]] */\n  public onRetain: TransitionStateHookFn;\n  /** Prototypally inherits from [[StateDeclaration.onEnter]] */\n  public onEnter: TransitionStateHookFn;\n\n  /** Prototypally inherits from [[StateDeclaration.lazyLoad]] */\n  public lazyLoad: (transition: Transition, state: StateDeclaration) => Promise<LazyLoadResult>;\n\n  /** Prototypally inherits from [[StateDeclaration.redirectTo]] */\n  redirectTo: (\n      string |\n      (($transition$: Transition) => TargetState) |\n      { state: (string|StateDeclaration), params: { [key: string]: any }}\n  );\n\n  /** @hidden */\n  __stateObjectCache: {\n    /** Might be null */\n    nameGlob?: Glob\n  };\n\n\n  /** @deprecated use State.create() */\n  constructor(config?: StateDeclaration) {\n    return StateObject.create(config || {});\n  }\n\n  /**\n   * Create a state object to put the private/internal implementation details onto.\n   * The object's prototype chain looks like:\n   * (Internal State Object) -> (Copy of State.prototype) -> (State Declaration object) -> (State Declaration's prototype...)\n   *\n   * @param stateDecl the user-supplied State Declaration\n   * @returns {StateObject} an internal State object\n   */\n  static create(stateDecl: _StateDeclaration): StateObject {\n    stateDecl = StateObject.isStateClass(stateDecl) ? new stateDecl() : stateDecl;\n\n    let state = inherit(inherit(stateDecl, StateObject.prototype)) as StateObject;\n    stateDecl.$$state = () => state;\n    state.self = stateDecl;\n    state.__stateObjectCache = {\n      nameGlob: Glob.fromString(state.name) // might return null\n    };\n    return state;\n  }\n\n  /** Predicate which returns true if the object is an class with @State() decorator */\n  static isStateClass = (stateDecl: _StateDeclaration): stateDecl is ({ new (): StateDeclaration }) =>\n      isFunction(stateDecl) && stateDecl['__uiRouterState'] === true;\n\n  /** Predicate which returns true if the object is an internal [[StateObject]] object */\n  static isState = (obj: any): obj is StateObject =>\n      isObject(obj['__stateObjectCache']);\n\n  /**\n   * Returns true if the provided parameter is the same state.\n   *\n   * Compares the identity of the state against the passed value, which is either an object\n   * reference to the actual `State` instance, the original definition object passed to\n   * `$stateProvider.state()`, or the fully-qualified name.\n   *\n   * @param ref Can be one of (a) a `State` instance, (b) an object that was passed\n   *        into `$stateProvider.state()`, (c) the fully-qualified name of a state as a string.\n   * @returns Returns `true` if `ref` matches the current `State` instance.\n   */\n  is(ref: StateObject|StateDeclaration|string): boolean {\n    return this === ref || this.self === ref || this.fqn() === ref;\n  }\n\n  /**\n   * @deprecated this does not properly handle dot notation\n   * @returns Returns a dot-separated name of the state.\n   */\n  fqn(): string {\n    if (!this.parent || !(this.parent instanceof this.constructor)) return this.name;\n    let name = this.parent.fqn();\n    return name ? name + \".\" + this.name : this.name;\n  }\n\n  /**\n   * Returns the root node of this state's tree.\n   *\n   * @returns The root of this state's tree.\n   */\n  root(): StateObject {\n    return this.parent && this.parent.root() || this;\n  }\n\n  /**\n   * Gets the state's `Param` objects\n   *\n   * Gets the list of [[Param]] objects owned by the state.\n   * If `opts.inherit` is true, it also includes the ancestor states' [[Param]] objects.\n   * If `opts.matchingKeys` exists, returns only `Param`s whose `id` is a key on the `matchingKeys` object\n   *\n   * @param opts options\n   */\n  parameters(opts?: { inherit?: boolean, matchingKeys?: any }): Param[] {\n    opts = defaults(opts, { inherit: true, matchingKeys: null });\n    let inherited = opts.inherit && this.parent && this.parent.parameters() || [];\n    return inherited.concat(values(this.params))\n        .filter(param => !opts.matchingKeys || opts.matchingKeys.hasOwnProperty(param.id));\n  }\n\n  /**\n   * Returns a single [[Param]] that is owned by the state\n   *\n   * If `opts.inherit` is true, it also searches the ancestor states` [[Param]]s.\n   * @param id the name of the [[Param]] to return\n   * @param opts options\n   */\n  parameter(id: string, opts: { inherit?: boolean } = {}): Param {\n    return (\n        this.url && this.url.parameter(id, opts) ||\n        find(values(this.params), propEq('id', id)) ||\n        opts.inherit && this.parent && this.parent.parameter(id)\n    );\n  }\n\n  toString() {\n    return this.fqn();\n  }\n}\n","/**\n * This module is a stub for core services such as Dependency Injection or Browser Location.\n * Core services may be implemented by a specific framework, such as ng1 or ng2, or be pure javascript.\n *\n * @module common\n */\n/** for typedoc */\nimport {IInjectable, Obj} from \"./common\";\nimport { Disposable } from \"../interface\";\nimport { UrlParts } from \"../url/interface\";\n\nexport let notImplemented = (fnname: string) => () => {\n  throw new Error(`${fnname}(): No coreservices implementation for UI-Router is loaded.`);\n};\n\nlet services: CoreServices = {\n  $q: undefined,\n  $injector: undefined,\n};\n\nexport interface $QLikeDeferred {\n  resolve: (val?: any) => void;\n  reject: (reason?: any) => void;\n  promise: Promise<any>;\n}\n\nexport interface $QLike {\n  when<T>(value?: T | PromiseLike<T>): Promise<T>;\n  reject<T>(reason: any): Promise<T>;\n  defer(): $QLikeDeferred;\n  all(promises: { [key: string]: Promise<any> }): Promise<any>;\n  all(promises: Promise<any>[]): Promise<any[]>;\n}\n\nexport interface $InjectorLike {\n  get(token: any): any;\n  get<T>(token: any): T;\n  has(token: any): boolean;\n  invoke(fn: IInjectable, context?: any, locals?: Obj): any;\n  annotate(fn: IInjectable, strictDi?: boolean): any[];\n  strictDi?: boolean;\n}\n\nexport interface CoreServices {\n  $q: $QLike;\n  $injector: $InjectorLike;\n}\n\nexport interface LocationServices extends Disposable {\n  /**\n   * Gets the current url string\n   *\n   * The URL is normalized using the internal [[path]]/[[search]]/[[hash]] values.\n   *\n   * For example, the URL may be stored in the hash ([[HashLocationServices]]) or\n   * have a base HREF prepended ([[PushStateLocationServices]]).\n   *\n   * The raw URL in the browser might be:\n   *\n   * ```\n   * http://mysite.com/somepath/index.html#/internal/path/123?param1=foo#anchor\n   * ```\n   *\n   * or\n   *\n   * ```\n   * http://mysite.com/basepath/internal/path/123?param1=foo#anchor\n   * ```\n   *\n   * then this method returns:\n   *\n   * ```\n   * /internal/path/123?param1=foo#anchor\n   * ```\n   *\n   *\n   * #### Example:\n   * ```js\n   * locationServices.url(); // \"/some/path?query=value#anchor\"\n   * ```\n   *\n   * @returns the current value of the url, as a string.\n   */\n  url(): string;\n\n  /**\n   * Updates the url, or gets the current url\n   *\n   * Updates the url, changing it to the value in `newurl`\n   *\n   * #### Example:\n   * ```js\n   * locationServices.url(\"/some/path?query=value#anchor\", true);\n   * ```\n   *\n   * @param newurl The new value for the URL.\n   *               This url should reflect only the new internal [[path]], [[search]], and [[hash]] values.\n   *               It should not include the protocol, site, port, or base path of an absolute HREF.\n   * @param replace When true, replaces the current history entry (instead of appending it) with this new url\n   * @param state The history's state object, i.e., pushState (if the LocationServices implementation supports it)\n   * @return the url (after potentially being processed)\n   */\n  url(newurl: string, replace?: boolean, state?: any): string;\n\n  /**\n   * Gets the path part of the current url\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `/some/path`\n   *\n   * @return the path portion of the url\n   */\n  path(): string;\n\n  /**\n   * Gets the search part of the current url as an object\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `{ query: 'value' }`\n   *\n   * @return the search (querystring) portion of the url, as an object\n   */\n  search(): { [key: string]: any };\n\n  /**\n   * Gets the hash part of the current url\n   *\n   * If the current URL is `/some/path?query=value#anchor`, this returns `anchor`\n   *\n   * @return the hash (anchor) portion of the url\n   */\n  hash(): string;\n\n  /**\n   * Registers a url change handler\n   *\n   * #### Example:\n   * ```js\n   * let deregisterFn = locationServices.onChange((evt) => console.log(\"url change\", evt));\n   * ```\n   *\n   * @param callback a function that will be called when the url is changing\n   * @return a function that de-registers the callback\n   */\n  onChange(callback: Function): Function;\n}\n\n/**\n * This service returns the location configuration\n *\n * This service returns information about the location configuration.\n * This service is primarily used when building URLs (e.g., for `hrefs`)\n */\nexport interface LocationConfig extends Disposable {\n  /**\n   * Gets the port, e.g., `80`\n   *\n   * @return the port number\n   */\n  port(): number;\n  /**\n   * Gets the protocol, e.g., `http`\n   *\n   * @return the protocol\n   */\n  protocol(): string;\n  /**\n   * Gets the host, e.g., `localhost`\n   *\n   * @return the protocol\n   */\n  host(): string;\n  /**\n   * Gets the base Href, e.g., `http://localhost/approot/`\n   *\n   * @return the application's base href\n   */\n  baseHref(): string;\n  /**\n   * Returns true when running in pushstate mode\n   *\n   * @return true when running in pushstate mode\n   */\n  html5Mode(): boolean;\n  /**\n   * Gets the hashPrefix (when not running in pushstate mode)\n   *\n   * If the current url is `http://localhost/app#!/uirouter/path/#anchor`, it returns `!` which is the prefix for the \"hashbang\" portion.\n   *\n   * @return the hash prefix\n   */\n  hashPrefix(): string;\n  /**\n   * Sets the hashPrefix (when not running in pushstate mode)\n   *\n   * @return the new hash prefix\n   */\n  hashPrefix(newprefix: string): string;\n}\n\nexport {services};\n","/**\n * @module common\n */ /** for typedoc */\n\nexport class Queue<T> {\n  constructor(private _items: T[] = [], private _limit: number = null) { }\n\n  enqueue(item: T) {\n    let items = this._items;\n    items.push(item);\n    if (this._limit && items.length > this._limit) items.shift();\n    return item;\n  }\n\n  dequeue(): T {\n    if (this.size())\n      return this._items.splice(0, 1)[0];\n  }\n\n  clear(): Array<T> {\n    let current = this._items;\n    this._items = [];\n    return current;\n  }\n\n  size(): number {\n    return this._items.length;\n  }\n\n  remove(item: T) {\n    let idx = this._items.indexOf(item);\n    return idx > -1 && this._items.splice(idx, 1)[0];\n  }\n\n  peekTail(): T {\n    return this._items[this._items.length - 1];\n  }\n\n  peekHead(): T {\n    if (this.size())\n      return this._items[0];\n  }\n}\n","/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\n\"use strict\";\nimport {extend, silentRejection} from \"../common/common\";\nimport {stringify} from \"../common/strings\";\nimport { is } from '../common/hof';\n\nexport enum RejectType {\n  SUPERSEDED = 2, ABORTED = 3, INVALID = 4, IGNORED = 5, ERROR = 6\n}\n\n/** @hidden */ let id = 0;\n\nexport class Rejection {\n  $id = id++;\n  type: number;\n  message: string;\n  detail: any;\n  redirected: boolean;\n\n  constructor(type: number, message?: string, detail?: any) {\n    this.type = type;\n    this.message = message;\n    this.detail = detail;\n  }\n\n  toString() {\n    const detailString = (d: any) => \n        d && d.toString !== Object.prototype.toString ? d.toString() : stringify(d);\n    let detail = detailString(this.detail);\n    let { $id, type, message } = this;\n    return `Transition Rejection($id: ${$id} type: ${type}, message: ${message}, detail: ${detail})`;\n  }\n\n  toPromise(): Promise<any> {\n    return extend(silentRejection(this), { _transitionRejection: this });\n  }\n\n  /** Returns true if the obj is a rejected promise created from the `asPromise` factory */\n  static isRejectionPromise(obj: any): boolean {\n    return obj && (typeof obj.then === 'function') && is(Rejection)(obj._transitionRejection);\n  }\n\n  /** Returns a Rejection due to transition superseded */\n  static superseded(detail?: any, options?: any): Rejection {\n    let message = \"The transition has been superseded by a different transition\";\n    let rejection = new Rejection(RejectType.SUPERSEDED, message, detail);\n    if (options && options.redirected) {\n      rejection.redirected = true;\n    }\n    return rejection;\n  }\n\n  /** Returns a Rejection due to redirected transition */\n  static redirected(detail?: any): Rejection {\n    return Rejection.superseded(detail, { redirected: true });\n  }\n\n  /** Returns a Rejection due to invalid transition */\n  static invalid(detail?: any): Rejection {\n    let message = \"This transition is invalid\";\n    return new Rejection(RejectType.INVALID, message, detail);\n  }\n\n  /** Returns a Rejection due to ignored transition */\n  static ignored(detail?: any): Rejection {\n    let message = \"The transition was ignored\";\n    return new Rejection(RejectType.IGNORED, message, detail);\n  }\n\n  /** Returns a Rejection due to aborted transition */\n  static aborted(detail?: any): Rejection {\n    let message = \"The transition has been aborted\";\n    return new Rejection(RejectType.ABORTED, message, detail);\n  }\n\n  /** Returns a Rejection due to aborted transition */\n  static errored(detail?: any): Rejection {\n    let message = \"The transition errored\";\n    return new Rejection(RejectType.ERROR, message, detail);\n  }\n  \n  /**\n   * Returns a Rejection\n   *\n   * Normalizes a value as a Rejection.\n   * If the value is already a Rejection, returns it.\n   * Otherwise, wraps and returns the value as a Rejection (Rejection type: ERROR).\n   *\n   * @returns `detail` if it is already a `Rejection`, else returns an ERROR Rejection.\n   */\n  static normalize(detail?: Rejection | Error | any): Rejection {\n    return is(Rejection)(detail) ? detail : Rejection.errored(detail);\n  }\n}\n","/**\n * @coreapi\n * @module transition\n */ /** for typedoc */\nimport {StateDeclaration} from \"../state/interface\";\nimport {Predicate} from \"../common/common\";\n\nimport {Transition} from \"./transition\";\nimport {StateObject} from \"../state/stateObject\";\nimport {PathNode} from \"../path/pathNode\";\nimport {TargetState} from \"../state/targetState\";\nimport {RegisteredHook} from \"./hookRegistry\";\n\n/**\n * The TransitionOptions object can be used to change the behavior of a transition.\n *\n * It is passed as the third argument to [[StateService.go]], [[StateService.transitionTo]].\n * It can also be used with a `uiSref`.\n */\nexport interface TransitionOptions {\n  /**\n   * This option changes how the Transition interacts with the browser's location bar (URL).\n   *\n   * - If `true`, it will update the url in the location bar.\n   * - If `false`, it will not update the url in the location bar.\n   * - If it is the string `\"replace\"`, it will update the url and also replace the last history record.\n   *\n   * @default `true`\n   */\n  location    ?: (boolean|string);\n\n  /**\n   * When transitioning to relative path (e.g '`^`'), this option defines which state to be relative from.\n   * @default `$state.current`\n   */\n  relative    ?: (string|StateDeclaration|StateObject);\n\n  /**\n   * This option sets whether or not the transition's parameter values should be inherited from\n   * the current parameter values.\n   *\n   * - If `true`, it will inherit parameter values from the current parameter values.\n   * - If `false`, only the parameters which are provided to `transitionTo` will be used.\n   *\n   * @default `false`\n   */\n  inherit     ?: boolean;\n\n  /**\n   * @deprecated\n   */\n  notify      ?: boolean;\n\n  /**\n   * This option may be used to force states which are currently active to reload.\n   *\n   * During a normal transition, a state is \"retained\" if:\n   * - It was previously active\n   * - The state's parameter values have not changed\n   * - All the parent states' parameter values have not changed\n   *\n   * Forcing a reload of a state will cause it to be exited and entered, which will:\n   * - Refetch that state's resolve data\n   * - Exit the state (onExit hook)\n   * - Re-enter the state (onEnter hook)\n   * - Re-render the views (controllers and templates)\n   *\n   * - When `true`, the destination state (and all parent states) will be reloaded.\n   * - When it is a string and is the name of a state, or when it is a State object,\n   *   that state and any children states will be reloaded.\n   *\n   * @default `false`\n   */\n  reload      ?: (boolean|string|StateDeclaration|StateObject);\n  /**\n   * You can define your own Transition Options inside this property and use them, e.g., from a Transition Hook\n   */\n  custom      ?: any;\n  /** @internalapi */\n  reloadState ?: (StateObject);\n  /** @internalapi\n   * If this transition is a redirect, this property should be the original Transition (which was redirected to this one)\n   */\n  redirectedFrom?: Transition;\n  /** @internalapi */\n  current     ?: () => Transition;\n  /** @internalapi */\n  source      ?: \"sref\" | \"url\" | \"redirect\" | \"otherwise\" | \"unknown\";\n}\n\n/** @internalapi */\nexport interface TransitionHookOptions {\n  current             ?: () => Transition;  //path?\n  transition          ?: Transition;\n  hookType            ?: string;\n  target              ?: any;\n  traceData           ?: any;\n  bind                ?: any;\n  stateHook           ?: boolean;\n}\n\n/**\n * TreeChanges encapsulates the various Paths that are involved in a Transition.\n *\n * Get a TreeChanges object using [[Transition.treeChanges]]\n *\n * A UI-Router Transition is from one Path in a State Tree to another Path.  For a given Transition,\n * this object stores the \"to\" and \"from\" paths, as well as subsets of those: the \"retained\",\n * \"exiting\" and \"entering\" paths.\n *\n * Each path in TreeChanges is an array of [[PathNode]] objects. Each PathNode in the array corresponds to a portion\n * of a nested state.\n *\n * For example, if you had a nested state named `foo.bar.baz`, it would have three\n * portions, `foo, bar, baz`.  If you transitioned **to** `foo.bar.baz` and inspected the [[TreeChanges.to]]\n * Path, you would find a node in the array for each portion: `foo`, `bar`, and `baz`.\n *\n * ---\n *\n * @todo show visual state tree\n */\nexport interface TreeChanges {\n  /** @nodoc */\n  [key: string]: PathNode[];\n\n  /** The path of nodes in the state tree that the transition is coming *from* */\n  from: PathNode[];\n\n  /** The path of nodes in the state tree that the transition is going *to* */\n  to: PathNode[];\n\n  /**\n   * The path of active nodes that the transition is retaining.\n   *\n   * These nodes are neither exited, nor entered.\n   * Before and after the transition is successful, these nodes are active.\n   */\n  retained: PathNode[];\n\n  /**\n   * The path of previously active nodes that the transition is exiting.\n   *\n   * After the Transition is successful, these nodes are no longer active.\n   *\n   * Note that a state that is being reloaded (due to parameter values changing, or `reload: true`) may be in both the\n   * `exiting` and `entering` paths.\n   */\n  exiting: PathNode[];\n\n  /**\n   * The path of nodes that the transition is entering.\n   *\n   * After the Transition is successful, these nodes will be active.\n   * Because they are entering, they have their resolves fetched, `onEnter` hooks run, and their views\n   * (component(s) or controller(s)+template(s)) refreshed.\n   *\n   * Note that a state that is reloaded (due to parameter values changing, or `reload: true`) may be in both the\n   * `exiting` and `entering` paths.\n   */\n  entering: PathNode[];\n}\n\nexport type IHookRegistration = (matchCriteria: HookMatchCriteria, callback: HookFn, options?: HookRegOptions) => Function;\n\n/**\n * The signature for Transition Hooks.\n *\n * Transition hooks are callback functions that hook into the lifecycle of transitions.\n * As a transition runs, it reaches certain lifecycle events.\n * As each event occurs, the hooks which are registered for the event are called (in priority order).\n *\n * A transition hook may alter a Transition by returning a [[HookResult]].\n *\n * #### See:\n *\n * - [[IHookRegistry.onBefore]]\n * - [[IHookRegistry.onStart]]\n * - [[IHookRegistry.onFinish]]\n * - [[IHookRegistry.onSuccess]]\n * - [[IHookRegistry.onError]]\n *\n * @param transition the current [[Transition]]\n * @param injector (for ng1 or ng2 only) the injector service\n *\n * @returns a [[HookResult]] which may alter the transition\n *\n */\nexport interface TransitionHookFn {\n  (transition: Transition) : HookResult;\n}\n\n/**\n * The signature for Transition State Hooks.\n *\n * A function which hooks into a lifecycle event for a specific state.\n *\n * Transition State Hooks are callback functions that hook into the lifecycle events of specific states during a transition.\n * As a transition runs, it may exit some states, retain (keep) states, and enter states.\n * As each lifecycle event occurs, the hooks which are registered for the event and that state are called (in priority order).\n *\n * #### See:\n *\n * - [[IHookRegistry.onExit]]\n * - [[IHookRegistry.onRetain]]\n * - [[IHookRegistry.onEnter]]\n *\n * @param transition the current [[Transition]]\n * @param state the [[StateObject]] that the hook is bound to\n * @param injector (for ng1 or ng2 only) the injector service\n *\n * @returns a [[HookResult]] which may alter the transition\n */\nexport interface TransitionStateHookFn {\n  (transition: Transition, state: StateDeclaration) : HookResult;\n}\n\n/**\n * The signature for Transition onCreate Hooks.\n *\n * Transition onCreate Hooks are callbacks that allow customization or preprocessing of\n * a Transition before it is returned from [[TransitionService.create]]\n *\n * @param transition the [[Transition]] that was just created\n * @return a [[Transition]] which will then be returned from [[TransitionService.create]]\n */\nexport interface TransitionCreateHookFn {\n  (transition: Transition): void;\n}\n\nexport type HookFn = (TransitionHookFn|TransitionStateHookFn|TransitionCreateHookFn);\n\n/**\n * The return value of a [[TransitionHookFn]] or [[TransitionStateHookFn]]\n *\n * When returned from a [[TransitionHookFn]] or [[TransitionStateHookFn]], these values alter the running [[Transition]]:\n *\n * - `false`: the transition will be cancelled.\n * - [[TargetState]]: the transition will be redirected to the new target state (see: [[StateService.target]])\n * - `Promise`: the transition will wait for the promise to resolve or reject\n *    - If the promise is rejected (or resolves to `false`), the transition will be cancelled\n *    - If the promise resolves to a [[TargetState]], the transition will be redirected\n *    - If the promise resolves to anything else, the transition will resume\n * - Anything else: the transition will resume\n */\nexport type HookResult = (boolean | TargetState | void | Promise<boolean|TargetState|void>);\n\n/**\n * These options may be provided when registering a Transition Hook (such as `onStart`)\n */\nexport interface HookRegOptions {\n  /**\n   * Sets the priority of the registered hook\n   *\n   * Hooks of the same type (onBefore, onStart, etc) are invoked in priority order.  A hook with a higher priority\n   * is invoked before a hook with a lower priority.\n   *\n   * The default hook priority is 0\n   */\n  priority?: number;\n\n  /**\n   * Specifies what `this` is bound to during hook invocation.\n   */\n  bind?: any;\n}\n\n/**\n * This interface specifies the api for registering Transition Hooks.  Both the\n * [[TransitionService]] and also the [[Transition]] object itself implement this interface.\n * Note: the Transition object only allows hooks to be registered before the Transition is started.\n */\nexport interface IHookRegistry {\n  /**\n   * Registers a [[TransitionHookFn]], called *before a transition starts*.\n   *\n   * Registers a transition lifecycle hook, which is invoked before a transition even begins.\n   * This hook can be useful to implement logic which prevents a transition from even starting, such\n   * as authentication, redirection\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onBefore` hooks are invoked *before a Transition starts*.\n   * No resolves have been fetched yet.\n   * Each `onBefore` hook is invoked synchronously, in the same call stack as [[StateService.transitionTo]].\n   * The registered `onBefore` hooks are invoked in priority order.\n   *\n   * Note: during the `onBefore` phase, additional hooks can be added to the specific [[Transition]] instance.\n   * These \"on-the-fly\" hooks only affect the currently running transition..\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * If any hook modifies the transition *synchronously* (by throwing, returning `false`, or returning\n   * a [[TargetState]]), the remainder of the hooks are skipped.\n   * If a hook returns a promise, the remainder of the `onBefore` hooks are still invoked synchronously.\n   * All promises are resolved, and processed asynchronously before the `onStart` phase of the Transition.\n   *\n   * ### Examples\n   *\n   * #### Default Substate\n   *\n   * This example redirects any transition from 'home' to 'home.dashboard'.  This is commonly referred to as a\n   * \"default substate\".\n   *\n   * @example\n   * ```js\n   * // ng2\n   * transitionService.onBefore({ to: 'home' }, (trans: Transition) =>\n   *     trans.router.stateService.target(\"home.dashboard\"));\n   * ```\n   *\n   * #### Data Driven Default Substate\n   *\n   * This example provides data-driven default substate functionality. It matches on a transition to any state\n   * which has `defaultSubstate: \"some.sub.state\"` defined.  See: [[Transition.to]] which returns the \"to state\"\n   * definition.\n   *\n   * @example\n   * ```js\n   * // ng1\n   * // state declaration\n   * {\n   *   name: 'home',\n   *   template: '<div ui-view/>',\n   *   defaultSubstate: 'home.dashboard'\n   * }\n   *\n   * var criteria = {\n   *   to: function(state) {\n   *     return state.defaultSubstate != null;\n   *   }\n   * }\n   *\n   * $transitions.onBefore(criteria, function(trans: Transition) {\n   *   var substate = trans.to().defaultSubstate;\n   *   return trans.router.stateService.target(substate);\n   * });\n   * ```\n   *\n   *\n   * #### Require authentication\n   *\n   * This example cancels a transition to a state which requires authentication, if the user is not currently authenticated.\n   *\n   * This example assumes a state tree where all states which require authentication are children of a parent `'requireauth'` state.\n   * This example assumes `MyAuthService` synchronously returns a boolean from `isAuthenticated()`.\n   *\n   * #### Example:\n   * ```js\n   * // ng1\n   * $transitions.onBefore( { to: 'requireauth.**' }, function(trans) {\n   *   var myAuthService = trans.injector().get('MyAuthService');\n   *   // If isAuthenticated returns false, the transition is cancelled.\n   *   return myAuthService.isAuthenticated();\n   * });\n   * ```\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onBefore(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called when a transition starts.\n   *\n   * Registers a transition lifecycle hook, which is invoked as a transition starts running.\n   * This hook can be useful to perform some asynchronous action before completing a transition.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onStart` hooks are invoked asynchronously when the Transition starts running.\n   * This happens after the `onBefore` phase is complete.\n   * At this point, the Transition has not yet exited nor entered any states.\n   * The registered `onStart` hooks are invoked in priority order.\n   *\n   * Note: A built-in `onStart` hook with high priority is used to fetch any eager resolve data.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Example\n   *\n   * #### Login during transition\n   *\n   * This example intercepts any transition to a state which requires authentication, when the user is\n   * not currently authenticated.  It allows the user to authenticate asynchronously, then resumes the\n   * transition.  If the user did not authenticate successfully, it redirects to the \"guest\" state, which\n   * does not require authentication.\n   *\n   * This example assumes:\n   * - a state tree where all states which require authentication are children of a parent `'auth'` state.\n   * - `MyAuthService.isAuthenticated()` synchronously returns a boolean.\n   * - `MyAuthService.authenticate()` presents a login dialog, and returns a promise which is resolved\n   *   or rejected, whether or not the login attempt was successful.\n   *\n   * #### Example:\n   * ```js\n   * // ng1\n   * $transitions.onStart( { to: 'auth.**' }, function(trans) {\n   *   var $state = trans.router.stateService;\n   *   var MyAuthService = trans.injector().get('MyAuthService');\n   *\n   *   // If the user is not authenticated\n   *   if (!MyAuthService.isAuthenticated()) {\n   *\n   *     // Then return a promise for a successful login.\n   *     // The transition will wait for this promise to settle\n   *\n   *     return MyAuthService.authenticate().catch(function() {\n   *\n   *       // If the authenticate() method failed for whatever reason,\n   *       // redirect to a 'guest' state which doesn't require auth.\n   *       return $state.target(\"guest\");\n   *     });\n   *   }\n   * });\n   * ```\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onStart(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is entered.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) when a specific state is being entered.\n   *\n   * Since this hook is run only when the specific state is being *entered*, it can be useful for\n   * performing tasks when entering a submodule/feature area such as initializing a stateful service, \n   * or for guarding access to a submodule/feature area.\n   *\n   * See [[TransitionStateHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onEnter` hooks generally specify `{ entering: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onEnter` hooks are invoked when the Transition is entering a state.\n   * States are entered after the `onRetain` phase is complete.\n   * If more than one state is being entered, the parent state is entered first.\n   * The registered `onEnter` hooks for a state are invoked in priority order.\n   *\n   * Note: A built-in `onEnter` hook with high priority is used to fetch lazy resolve data for states being entered.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onEnter` hooks using the [[TransitionService]], you may define an `onEnter` hook\n   * directly on a state declaration (see: [[StateDeclaration.onEnter]]).\n   * \n   *\n   * ### Examples\n   *\n   * #### Audit Log\n   *\n   * This example uses a service to log that a user has entered the admin section of an app.\n   * This assumes that there are substates of the \"admin\" state, such as \"admin.users\", \"admin.pages\", etc.\n   * @example\n   * ```\n   *\n   * $transitions.onEnter({ entering: 'admin' }, function(transition, state) {\n   *   var AuditService = trans.injector().get('AuditService');\n   *   AuditService.log(\"Entered \" + state.name + \" module while transitioning to \" + transition.to().name);\n   * }\n   * ```\n   *\n   * #### Audit Log (inside a state declaration)\n   *\n   * The `onEnter` inside this state declaration is syntactic sugar for the previous Audit Log example.\n   * ```\n   * {\n   *   name: 'admin',\n   *   component: 'admin',\n   *   onEnter: function($transition$, $state$) {\n   *     var AuditService = $transition$.injector().get('AuditService');\n   *     AuditService.log(\"Entered \" + state.name + \" module while transitioning to \" + transition.to().name);\n   *   }\n   * }\n   * ```\n   *\n   * Note: A state declaration's `onEnter` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onEnter(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is retained/kept.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) for\n   * a specific state that was previously active will remain active (is not being entered nor exited).\n   * \n   * This hook is invoked when a state is \"retained\" or \"kept\".\n   * It means the transition is coming *from* a substate of the retained state *to* a substate of the retained state.\n   * This hook can be used to perform actions when the user moves from one substate to another, such as between steps in a wizard.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onRetain` hooks generally specify `{ retained: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onRetain` hooks are invoked after any `onExit` hooks have been fired.\n   * If more than one state is retained, the child states' `onRetain` hooks are invoked first.\n   * The registered `onRetain` hooks for a state are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onRetain` hooks using the [[TransitionService]], you may define an `onRetain` hook\n   * directly on a state declaration (see: [[StateDeclaration.onRetain]]).\n   *\n   * Note: A state declaration's `onRetain` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onRetain(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionStateHookFn]], called when a specific state is exited.\n   *\n   * Registers a lifecycle hook, which is invoked (during a transition) when a specific state is being exited.\n   *\n   * Since this hook is run only when the specific state is being *exited*, it can be useful for\n   * performing tasks when leaving a submodule/feature area such as cleaning up a stateful service, \n   * or for preventing the user from leaving a state or submodule until some criteria is satisfied.\n   *\n   * See [[TransitionStateHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * `onExit` hooks generally specify `{ exiting: 'somestate' }`.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onExit` hooks are invoked when the Transition is exiting a state.\n   * States are exited after any `onStart` phase is complete.\n   * If more than one state is being exited, the child states are exited first.\n   * The registered `onExit` hooks for a state are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * ### Inside a state declaration\n   *\n   * Instead of registering `onExit` hooks using the [[TransitionService]], you may define an `onExit` hook\n   * directly on a state declaration (see: [[StateDeclaration.onExit]]).\n   *\n   * Note: A state declaration's `onExit` function is injected for Angular 1 only.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onExit(matchCriteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called *just before a transition finishes*.\n   *\n   * Registers a transition lifecycle hook, which is invoked just before a transition finishes.\n   * This hook is a last chance to cancel or redirect a transition.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onFinish` hooks are invoked after the `onEnter` phase is complete.\n   * These hooks are invoked just before the transition is \"committed\".\n   * Each hook is invoked in priority order.\n   *\n   * ### Return value\n   *\n   * The hook's return value can be used to pause, cancel, or redirect the current Transition.\n   * See [[HookResult]] for more information.\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onFinish(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called after a successful transition completed.\n   *\n   * Registers a transition lifecycle hook, which is invoked after a transition successfully completes.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * `onSuccess` hooks are chained off the Transition's promise (see [[Transition.promise]]).\n   * If the Transition is successful and its promise is resolved, then the `onSuccess` hooks are invoked.\n   * Since these hooks are run after the transition is over, their return value is ignored.\n   * The `onSuccess` hooks are invoked in priority order.\n   *\n   * ### Return value\n   *\n   * Since the Transition is already completed, the hook's return value is ignored\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onSuccess(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Registers a [[TransitionHookFn]], called after a transition has errored.\n   *\n   * Registers a transition lifecycle hook, which is invoked after a transition has been rejected for any reason.\n   *\n   * See [[TransitionHookFn]] for the signature of the function.\n   *\n   * The [[HookMatchCriteria]] is used to determine which Transitions the hook should be invoked for.\n   * To match all Transitions, use an empty criteria object `{}`.\n   *\n   * ### Lifecycle\n   *\n   * The `onError` hooks are chained off the Transition's promise (see [[Transition.promise]]).\n   * If a Transition fails, its promise is rejected and the `onError` hooks are invoked.\n   * The `onError` hooks are invoked in priority order.\n   *\n   * Since these hooks are run after the transition is over, their return value is ignored.\n   *\n   * A transition \"errors\" if it was started, but failed to complete (for any reason).\n   * A *non-exhaustive list* of reasons a transition can error:\n   *\n   * - A transition was cancelled because a new transition started while it was still running (`Transition superseded`)\n   * - A transition was cancelled by a Transition Hook returning false\n   * - A transition was redirected by a Transition Hook returning a [[TargetState]]\n   * - A Transition Hook or resolve function threw an error\n   * - A Transition Hook returned a rejected promise\n   * - A resolve function returned a rejected promise\n   *\n   * To check the failure reason, inspect the return value of [[Transition.error]].\n   * \n   * Note: `onError` should be used for targeted error handling, or error recovery.\n   * For simple catch-all error reporting, use [[StateService.defaultErrorHandler]].\n   *\n   * ### Return value\n   *\n   * Since the Transition is already completed, the hook's return value is ignored\n   *\n   * @param matchCriteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be injected and invoked.\n   * @returns a function which deregisters the hook.\n   */\n  onError(matchCriteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function;\n\n  /**\n   * Returns all the registered hooks of a given `hookName` type\n   *\n   * #### Example:\n   * ```\n   * $transitions.getHooks(\"onEnter\")\n   * ```\n   */\n  getHooks(hookName: string): RegisteredHook[];\n\n  /** @hidden place to store the hooks */\n  _registeredHooks: { [key: string]: RegisteredHook[] };\n}\n\n/** A predicate type which tests if a [[StateDeclaration]] passes some test. Returns a boolean. */\nexport type IStateMatch = Predicate<StateDeclaration>\n\n/**\n * This object is used to configure whether or not a Transition Hook is invoked for a particular transition,\n * based on the Transition's \"to state\" and \"from state\".\n *\n * Each property (`to`, `from`, `exiting`, `retained`, and `entering`) can be a state [[Glob]] string,\n * a boolean, or a function that takes a state and returns a boolean (see [[HookMatchCriterion]])\n *\n * All properties are optional.  If any property is omitted, it is replaced with the value `true`, and always matches.\n * To match any transition, use an empty criteria object `{}`.\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from the `parent` state and going to the `parent.child` state.\n * var match = {\n *   to: 'parent',\n *   from: 'parent.child'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any substate of `parent` and going directly to the `parent` state.\n * var match = {\n *   to: 'parent',\n *   from: 'parent.**'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any state and going to any substate of `mymodule`\n * var match = {\n *   to: 'mymodule.**'\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition coming from any state and going to any state that has `data.authRequired`\n * // set to a truthy value.\n * var match = {\n *   to: function(state) {\n *     return state.data != null && state.data.authRequired === true;\n *   }\n * }\n * ```\n *\n * #### Example:\n * ```js\n * // This matches a transition that is exiting `parent.child`\n * var match = {\n *   exiting: 'parent.child'\n * }\n * ```\n */\nexport interface HookMatchCriteria {\n  [key: string]: HookMatchCriterion;\n\n  /** A [[HookMatchCriterion]] to match the destination state */\n  to?: HookMatchCriterion | undefined;\n  /** A [[HookMatchCriterion]] to match the original (from) state */\n  from?: HookMatchCriterion | undefined;\n  /** A [[HookMatchCriterion]] to match any state that would be exiting */\n  exiting?: HookMatchCriterion | undefined;\n  /** A [[HookMatchCriterion]] to match any state that would be retained */\n  retained?: HookMatchCriterion | undefined;\n  /** A [[HookMatchCriterion]] to match any state that would be entering */\n  entering?: HookMatchCriterion | undefined;\n}\n\nexport interface IMatchingNodes {\n  [key: string]: PathNode[];\n\n  to: PathNode[];\n  from: PathNode[];\n  exiting: PathNode[];\n  retained: PathNode[];\n  entering: PathNode[];\n}\n\n/** @hidden */\nexport interface RegisteredHooks {\n  [key: string]: RegisteredHook[];\n}\n\n/** @hidden */\nexport interface PathTypes {\n  [key: string]: PathType;\n\n  to: PathType;\n  from: PathType;\n  exiting: PathType;\n  retained: PathType;\n  entering: PathType;\n}\n\n/** @hidden */\nexport interface PathType {\n  name: string;\n  scope: TransitionHookScope;\n}\n\n/**\n * Hook Criterion used to match a transition.\n *\n * A [[Glob]] string that matches the name of a state.\n *\n * Or, a function with the signature `function(state) { return matches; }`\n * which should return a boolean to indicate if a state matches.\n *\n * Or, `true` to always match\n */\nexport type HookMatchCriterion = (string|IStateMatch|boolean)\n\nexport enum TransitionHookPhase { CREATE, BEFORE, RUN, SUCCESS, ERROR }\nexport enum TransitionHookScope { TRANSITION, STATE }\n","/**\n * @coreapi\n * @module state\n */ /** for typedoc */\n\nimport { StateDeclaration, StateOrName, TargetStateDef } from \"./interface\";\nimport { ParamsOrArray } from \"../params/interface\";\nimport { TransitionOptions } from \"../transition/interface\";\nimport { StateObject } from \"./stateObject\";\nimport { toJson } from \"../common/common\";\nimport { isString } from \"../common/predicates\";\n\n/**\n * Encapsulate the target (destination) state/params/options of a [[Transition]].\n *\n * This class is frequently used to redirect a transition to a new destination.\n *\n * See:\n *\n * - [[HookResult]]\n * - [[TransitionHookFn]]\n * - [[TransitionService.onStart]]\n *\n * To create a `TargetState`, use [[StateService.target]].\n *\n * ---\n *\n * This class wraps:\n *\n * 1) an identifier for a state\n * 2) a set of parameters\n * 3) and transition options\n * 4) the registered state object (the [[StateDeclaration]])\n *\n * Many UI-Router APIs such as [[StateService.go]] take a [[StateOrName]] argument which can\n * either be a *state object* (a [[StateDeclaration]] or [[StateObject]]) or a *state name* (a string).\n * The `TargetState` class normalizes those options.\n *\n * A `TargetState` may be valid (the state being targeted exists in the registry)\n * or invalid (the state being targeted is not registered).\n */\nexport class TargetState {\n  private _params: ParamsOrArray;\n\n  /**\n   * The TargetState constructor\n   *\n   * Note: Do not construct a `TargetState` manually.\n   * To create a `TargetState`, use the [[StateService.target]] factory method.\n   *\n   * @param _identifier An identifier for a state.\n   *    Either a fully-qualified state name, or the object used to define the state.\n   * @param _definition The internal state representation, if exists.\n   * @param _params Parameters for the target state\n   * @param _options Transition options.\n   *\n   * @internalapi\n   */\n  constructor(\n    private _identifier: StateOrName,\n    private _definition?: StateObject,\n    _params?: ParamsOrArray,\n    private _options: TransitionOptions = {}\n  ) {\n    this._params = _params || {};\n  }\n\n  /** The name of the state this object targets */\n  name(): String {\n    return this._definition && this._definition.name || <String> this._identifier;\n  }\n\n  /** The identifier used when creating this TargetState */\n  identifier(): StateOrName {\n    return this._identifier;\n  }\n\n  /** The target parameter values */\n  params(): ParamsOrArray {\n    return this._params;\n  }\n\n  /** The internal state object (if it was found) */\n  $state(): StateObject {\n    return this._definition;\n  }\n\n  /** The internal state declaration (if it was found) */\n  state(): StateDeclaration {\n    return this._definition && this._definition.self;\n  }\n\n  /** The target options */\n  options() {\n    return this._options;\n  }\n\n  /** True if the target state was found */\n  exists(): boolean {\n    return !!(this._definition && this._definition.self);\n  }\n\n  /** True if the object is valid */\n  valid(): boolean {\n    return !this.error();\n  }\n\n  /** If the object is invalid, returns the reason why */\n  error(): string {\n    let base = <any> this.options().relative;\n    if (!this._definition && !!base) {\n      let stateName = base.name ? base.name : base;\n      return `Could not resolve '${this.name()}' from state '${stateName}'`;\n    }\n    if (!this._definition)\n      return `No such state '${this.name()}'`;\n    if (!this._definition.self)\n      return `State '${this.name()}' has an invalid definition`;\n  }\n\n  toString() {\n    return `'${this.name()}'${toJson(this.params())}`;\n  }\n\n  /** Returns true if the object has a state property that might be a state or state name */\n  static isDef = (obj): obj is TargetStateDef =>\n      obj && obj.state && (isString(obj.state) || isString(obj.state.name));\n\n  // /** Returns a new TargetState based on this one, but using the specified options */\n  // withOptions(_options: TransitionOptions): TargetState {\n  //   return extend(this._clone(), { _options });\n  // }\n  //\n  // /** Returns a new TargetState based on this one, but using the specified params */\n  // withParams(_params: ParamsOrArray): TargetState {\n  //   return extend(this._clone(), { _params });\n  // }\n\n  // private _clone = () =>\n  //     new TargetState(this._identifier, this._definition, this._params, this._options);\n}\n","/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nimport { TransitionHookOptions, HookResult, TransitionHookPhase } from './interface';\nimport { defaults, noop, silentRejection } from '../common/common';\nimport { fnToString, maxLength } from '../common/strings';\nimport { isPromise } from '../common/predicates';\nimport { is, parse } from '../common/hof';\nimport { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport { Rejection } from './rejectFactory';\nimport { TargetState } from '../state/targetState';\nimport { Transition } from './transition';\nimport { TransitionEventType } from './transitionEventType';\nimport { RegisteredHook } from './hookRegistry';\nimport { StateDeclaration } from '../state/interface';\n\nlet defaultOptions: TransitionHookOptions = {\n  current: noop,\n  transition: null,\n  traceData: {},\n  bind: null,\n};\n\nexport type GetResultHandler = (hook: TransitionHook) => ResultHandler;\nexport type GetErrorHandler  = (hook: TransitionHook) => ErrorHandler;\n\nexport type ResultHandler = (result: HookResult)      => Promise<HookResult>;\nexport type ErrorHandler  = (error: any)              => Promise<any>;\n\n/** @hidden */\nexport class TransitionHook {\n  type: TransitionEventType;\n  constructor(private transition: Transition,\n              private stateContext: StateDeclaration,\n              private registeredHook: RegisteredHook,\n              private options: TransitionHookOptions) {\n    this.options = defaults(options, defaultOptions);\n    this.type = registeredHook.eventType;\n  }\n\n  /**\n   * These GetResultHandler(s) are used by [[invokeHook]] below\n   * Each HookType chooses a GetResultHandler (See: [[TransitionService._defineCoreEvents]])\n   */\n  static HANDLE_RESULT: GetResultHandler = (hook: TransitionHook) => (result: HookResult) =>\n      hook.handleHookResult(result);\n\n  /**\n   * If the result is a promise rejection, log it.\n   * Otherwise, ignore the result.\n   */\n  static LOG_REJECTED_RESULT: GetResultHandler = (hook: TransitionHook) => (result: HookResult) => {\n    isPromise(result) && result.catch(err =>\n        hook.logError(Rejection.normalize(err)));\n    return undefined;\n  }\n\n  /**\n   * These GetErrorHandler(s) are used by [[invokeHook]] below\n   * Each HookType chooses a GetErrorHandler (See: [[TransitionService._defineCoreEvents]])\n   */\n  static LOG_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) =>\n      hook.logError(error);\n\n  static REJECT_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) =>\n      silentRejection(error);\n\n  static THROW_ERROR: GetErrorHandler = (hook: TransitionHook) => (error: any) => {\n    throw error;\n  }\n\n  private isSuperseded = () =>\n    this.type.hookPhase === TransitionHookPhase.RUN && !this.options.transition.isActive();\n\n  logError(err): any {\n    this.transition.router.stateService.defaultErrorHandler()(err);\n  }\n\n  invokeHook(): Promise<HookResult> | void {\n    let hook = this.registeredHook;\n    if (hook._deregistered) return;\n\n    let notCurrent = this.getNotCurrentRejection();\n    if (notCurrent) return notCurrent;\n\n    let options = this.options;\n    trace.traceHookInvocation(this, this.transition, options);\n\n    const invokeCallback = () =>\n        hook.callback.call(options.bind, this.transition, this.stateContext);\n\n    const normalizeErr = err =>\n        Rejection.normalize(err).toPromise();\n\n    const handleError = err =>\n        hook.eventType.getErrorHandler(this)(err);\n\n    const handleResult = result =>\n        hook.eventType.getResultHandler(this)(result);\n\n    try {\n      let result = invokeCallback();\n\n      if (!this.type.synchronous && isPromise(result)) {\n        return result.catch(normalizeErr)\n            .then(handleResult, handleError);\n      } else {\n        return handleResult(result);\n      }\n    } catch (err) {\n      // If callback throws (synchronously)\n      return handleError(Rejection.normalize(err));\n    }\n  }\n\n  /**\n   * This method handles the return value of a Transition Hook.\n   *\n   * A hook can return false (cancel), a TargetState (redirect),\n   * or a promise (which may later resolve to false or a redirect)\n   *\n   * This also handles \"transition superseded\" -- when a new transition\n   * was started while the hook was still running\n   */\n  handleHookResult(result: HookResult): Promise<HookResult> {\n    let notCurrent = this.getNotCurrentRejection();\n    if (notCurrent) return notCurrent;\n\n    // Hook returned a promise\n    if (isPromise(result)) {\n      // Wait for the promise, then reprocess with the resulting value\n      return result.then(val => this.handleHookResult(val));\n    }\n\n    trace.traceHookResult(result, this.transition, this.options);\n\n    // Hook returned false\n    if (result === false) {\n      // Abort this Transition\n      return Rejection.aborted(\"Hook aborted transition\").toPromise();\n    }\n\n    const isTargetState = is(TargetState);\n    // hook returned a TargetState\n    if (isTargetState(result)) {\n      // Halt the current Transition and redirect (a new Transition) to the TargetState.\n      return Rejection.redirected(result).toPromise();\n    }\n  }\n\n\n  /**\n   * Return a Rejection promise if the transition is no longer current due\n   * to a stopped router (disposed), or a new transition has started and superseded this one.\n   */\n  private getNotCurrentRejection() {\n    let router = this.transition.router;\n\n    // The router is stopped\n    if (router._disposed) {\n      return Rejection.aborted(`UIRouter instance #${router.$id} has been stopped (disposed)`).toPromise();\n    }\n\n    if (this.transition._aborted) {\n      return Rejection.aborted().toPromise();\n    }\n\n    // This transition is no longer current.\n    // Another transition started while this hook was still running.\n    if (this.isSuperseded()) {\n      // Abort this transition\n      return Rejection.superseded(this.options.current()).toPromise();\n    }\n  }\n\n  toString() {\n    let { options, registeredHook } = this;\n    let event = parse(\"traceData.hookType\")(options) || \"internal\",\n        context = parse(\"traceData.context.state.name\")(options) || parse(\"traceData.context\")(options) || \"unknown\",\n        name = fnToString(registeredHook.callback);\n    return `${event} context: ${context}, ${maxLength(200, name)}`;\n  }\n\n  /**\n   * Chains together an array of TransitionHooks.\n   *\n   * Given a list of [[TransitionHook]] objects, chains them together.\n   * Each hook is invoked after the previous one completes.\n   *\n   * #### Example:\n   * ```js\n   * var hooks: TransitionHook[] = getHooks();\n   * let promise: Promise<any> = TransitionHook.chain(hooks);\n   *\n   * promise.then(handleSuccess, handleError);\n   * ```\n   *\n   * @param hooks the list of hooks to chain together\n   * @param waitFor if provided, the chain is `.then()`'ed off this promise\n   * @returns a `Promise` for sequentially invoking the hooks (in order)\n   */\n  static chain(hooks: TransitionHook[], waitFor?: Promise<any>): Promise<any> {\n    // Chain the next hook off the previous\n    const createHookChainR = (prev: Promise<any>, nextHook: TransitionHook) =>\n        prev.then(() => nextHook.invokeHook());\n    return hooks.reduce(createHookChainR, waitFor || services.$q.when());\n  }\n\n\n  /**\n   * Invokes all the provided TransitionHooks, in order.\n   * Each hook's return value is checked.\n   * If any hook returns a promise, then the rest of the hooks are chained off that promise, and the promise is returned.\n   * If no hook returns a promise, then all hooks are processed synchronously.\n   *\n   * @param hooks the list of TransitionHooks to invoke\n   * @param doneCallback a callback that is invoked after all the hooks have successfully completed\n   *\n   * @returns a promise for the async result, or the result of the callback\n   */\n  static invokeHooks<T>(hooks: TransitionHook[], doneCallback: (result?: HookResult) => T): Promise<any> | T {\n    for (let idx = 0; idx < hooks.length; idx++) {\n      let hookResult = hooks[idx].invokeHook();\n\n      if (isPromise(hookResult)) {\n        let remainingHooks = hooks.slice(idx + 1);\n\n        return TransitionHook.chain(remainingHooks, hookResult)\n            .then(doneCallback);\n      }\n    }\n\n    return doneCallback();\n  }\n\n  /**\n   * Run all TransitionHooks, ignoring their return value.\n   */\n  static runAllHooks(hooks: TransitionHook[]): void {\n    hooks.forEach(hook => hook.invokeHook());\n  }\n\n}","/** @module path */ /** for typedoc */\nimport {extend, applyPairs, find, allTrueR, pairs, arrayTuples} from \"../common/common\";\nimport {propEq} from \"../common/hof\";\nimport {StateObject} from \"../state/stateObject\";\nimport {RawParams} from \"../params/interface\";\nimport {Param} from \"../params/param\";\nimport {Resolvable} from \"../resolve/resolvable\";\nimport {ViewConfig} from \"../view/interface\";\n\n/**\n * @internalapi\n *\n * A node in a [[TreeChanges]] path\n *\n * For a [[TreeChanges]] path, this class holds the stateful information for a single node in the path.\n * Each PathNode corresponds to a state being entered, exited, or retained.\n * The stateful information includes parameter values and resolve data.\n */\nexport class PathNode {\n  /** The state being entered, exited, or retained */\n  public state: StateObject;\n  /** The parameters declared on the state */\n  public paramSchema: Param[];\n  /** The parameter values that belong to the state */\n  public paramValues: { [key: string]: any };\n  /** The individual (stateful) resolvable objects that belong to the state */\n  public resolvables: Resolvable[];\n  /** The state's declared view configuration objects */\n  public views: ViewConfig[];\n\n  /** Creates a copy of a PathNode */\n  constructor(node: PathNode);\n  /** Creates a new (empty) PathNode for a State */\n  constructor(state: StateObject);\n  constructor(stateOrNode: any) {\n    if (stateOrNode instanceof PathNode) {\n      let node: PathNode = stateOrNode;\n      this.state = node.state;\n      this.paramSchema = node.paramSchema.slice();\n      this.paramValues = extend({}, node.paramValues);\n      this.resolvables = node.resolvables.slice();\n      this.views = node.views && node.views.slice();\n    } else {\n      let state: StateObject = stateOrNode;\n      this.state = state;\n      this.paramSchema = state.parameters({ inherit: false });\n      this.paramValues = {};\n      this.resolvables = state.resolvables.map(res => res.clone());\n    }\n  }\n\n  /** Sets [[paramValues]] for the node, from the values of an object hash */\n  applyRawParams(params: RawParams): PathNode {\n    const getParamVal = (paramDef: Param) => [ paramDef.id, paramDef.value(params[paramDef.id]) ];\n    this.paramValues = this.paramSchema.reduce((memo, pDef) => applyPairs(memo, getParamVal(pDef)), {});\n    return this;\n  }\n\n  /** Gets a specific [[Param]] metadata that belongs to the node */\n  parameter(name: string): Param {\n    return find(this.paramSchema, propEq(\"id\", name));\n  }\n\n  /**\n   * @returns true if the state and parameter values for another PathNode are\n   * equal to the state and param values for this PathNode\n   */\n  equals(node: PathNode, paramsFn?: GetParamsFn): boolean {\n    const diff = this.diff(node, paramsFn);\n    return diff && diff.length === 0;\n  }\n\n  /**\n   * Finds Params with different parameter values on another PathNode.\n   *\n   * Given another node (of the same state), finds the parameter values which differ.\n   * Returns the [[Param]] (schema objects) whose parameter values differ.\n   *\n   * Given another node for a different state, returns `false`\n   *\n   * @param node The node to compare to\n   * @param paramsFn A function that returns which parameters should be compared.\n   * @returns The [[Param]]s which differ, or null if the two nodes are for different states\n   */\n  diff(node: PathNode, paramsFn?: GetParamsFn): Param[] | false {\n    if (this.state !== node.state) return false;\n\n    const params: Param[] = paramsFn ? paramsFn(this) : this.paramSchema;\n    return Param.changed(params, this.paramValues, node.paramValues);\n  }\n\n  /** Returns a clone of the PathNode */\n  static clone(node: PathNode) {\n    return new PathNode(node);\n  }\n}\n\n/** @hidden */\nexport type GetParamsFn = (pathNode: PathNode) => Param[];","/** @module path */ /** for typedoc */\n\nimport {\n  extend, find, pick, omit, tail, mergeR, values, unnestR, Predicate, inArray, arrayTuples,\n} from \"../common/common\";\nimport {prop, propEq, not} from \"../common/hof\";\n\nimport {RawParams} from \"../params/interface\";\nimport {TreeChanges} from \"../transition/interface\";\nimport {ViewConfig} from \"../view/interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nimport {StateObject} from \"../state/stateObject\";\nimport {TargetState} from \"../state/targetState\";\nimport {GetParamsFn, PathNode} from \"./pathNode\";\nimport {ViewService} from \"../view/view\";\nimport { Param } from '../params/param';\n\n/**\n * This class contains functions which convert TargetStates, Nodes and paths from one type to another.\n */\nexport class PathUtils {\n\n  constructor() { }\n\n  /** Given a PathNode[], create an TargetState */\n  static makeTargetState(path: PathNode[]): TargetState {\n    let state = tail(path).state;\n    return new TargetState(state, state, path.map(prop(\"paramValues\")).reduce(mergeR, {}));\n  }\n\n  static buildPath(targetState: TargetState) {\n    let toParams = targetState.params();\n    return targetState.$state().path.map(state => new PathNode(state).applyRawParams(toParams));\n  }\n\n  /** Given a fromPath: PathNode[] and a TargetState, builds a toPath: PathNode[] */\n  static buildToPath(fromPath: PathNode[], targetState: TargetState): PathNode[] {\n    let toPath: PathNode[] = PathUtils.buildPath(targetState);\n    if (targetState.options().inherit) {\n      return PathUtils.inheritParams(fromPath, toPath, Object.keys(targetState.params()));\n    }\n    return toPath;\n  }\n\n  /**\n   * Creates ViewConfig objects and adds to nodes.\n   *\n   * On each [[PathNode]], creates ViewConfig objects from the views: property of the node's state\n   */\n  static applyViewConfigs($view: ViewService, path: PathNode[], states: StateObject[]) {\n    // Only apply the viewConfigs to the nodes for the given states\n    path.filter(node => inArray(states, node.state)).forEach(node => {\n      let viewDecls: _ViewDeclaration[] = values(node.state.views || {});\n      let subPath = PathUtils.subPath(path, n => n === node);\n      let viewConfigs: ViewConfig[][] = viewDecls.map(view => $view.createViewConfig(subPath, view));\n      node.views = viewConfigs.reduce(unnestR, []);\n    });\n  }\n\n  /**\n   * Given a fromPath and a toPath, returns a new to path which inherits parameters from the fromPath\n   *\n   * For a parameter in a node to be inherited from the from path:\n   * - The toPath's node must have a matching node in the fromPath (by state).\n   * - The parameter name must not be found in the toKeys parameter array.\n   *\n   * Note: the keys provided in toKeys are intended to be those param keys explicitly specified by some\n   * caller, for instance, $state.transitionTo(..., toParams).  If a key was found in toParams,\n   * it is not inherited from the fromPath.\n   */\n  static inheritParams(fromPath: PathNode[], toPath: PathNode[], toKeys: string[] = []): PathNode[] {\n    function nodeParamVals(path: PathNode[], state: StateObject): RawParams {\n      let node: PathNode = find(path, propEq('state', state));\n      return extend({}, node && node.paramValues);\n    }\n\n    let noInherit = fromPath.map(node => node.paramSchema)\n        .reduce(unnestR, [])\n        .filter(param => !param.inherit)\n        .map(prop('id'));\n\n    /**\n     * Given an [[PathNode]] \"toNode\", return a new [[PathNode]] with param values inherited from the\n     * matching node in fromPath.  Only inherit keys that aren't found in \"toKeys\" from the node in \"fromPath\"\"\n     */\n    function makeInheritedParamsNode(toNode: PathNode): PathNode {\n      // All param values for the node (may include default key/vals, when key was not found in toParams)\n      let toParamVals = extend({}, toNode && toNode.paramValues);\n      // limited to only those keys found in toParams\n      let incomingParamVals = pick(toParamVals, toKeys);\n      toParamVals = omit(toParamVals, toKeys);\n      let fromParamVals = omit(nodeParamVals(fromPath, toNode.state) || {}, noInherit);\n      // extend toParamVals with any fromParamVals, then override any of those those with incomingParamVals\n      let ownParamVals: RawParams = extend(toParamVals, fromParamVals, incomingParamVals);\n      return new PathNode(toNode.state).applyRawParams(ownParamVals);\n    }\n\n    // The param keys specified by the incoming toParams\n    return <PathNode[]> toPath.map(makeInheritedParamsNode);\n  }\n\n  static nonDynamicParams = (node: PathNode): Param[] =>\n      node.state.parameters({ inherit: false })\n          .filter(param => !param.dynamic);\n\n  /**\n   * Computes the tree changes (entering, exiting) between a fromPath and toPath.\n   */\n  static treeChanges(fromPath: PathNode[], toPath: PathNode[], reloadState: StateObject): TreeChanges {\n    let keep = 0, max = Math.min(fromPath.length, toPath.length);\n\n    const nodesMatch = (node1: PathNode, node2: PathNode) =>\n        node1.equals(node2, PathUtils.nonDynamicParams);\n\n    while (keep < max && fromPath[keep].state !== reloadState && nodesMatch(fromPath[keep], toPath[keep])) {\n      keep++;\n    }\n\n    /** Given a retained node, return a new node which uses the to node's param values */\n    function applyToParams(retainedNode: PathNode, idx: number): PathNode {\n      let cloned = PathNode.clone(retainedNode);\n      cloned.paramValues = toPath[idx].paramValues;\n      return cloned;\n    }\n\n    let from: PathNode[], retained: PathNode[], exiting: PathNode[], entering: PathNode[], to: PathNode[];\n\n    from                  = fromPath;\n    retained              = from.slice(0, keep);\n    exiting               = from.slice(keep);\n\n    // Create a new retained path (with shallow copies of nodes) which have the params of the toPath mapped\n    let retainedWithToParams  = retained.map(applyToParams);\n    entering              = toPath.slice(keep);\n    to                    = (retainedWithToParams).concat(entering);\n\n    return { from, to, retained, exiting, entering };\n  }\n\n  /**\n   * Returns a new path which is: the subpath of the first path which matches the second path.\n   *\n   * The new path starts from root and contains any nodes that match the nodes in the second path.\n   * It stops before the first non-matching node.\n   *\n   * Nodes are compared using their state property and their parameter values.\n   * If a `paramsFn` is provided, only the [[Param]] returned by the function will be considered when comparing nodes.\n   *\n   * @param pathA the first path\n   * @param pathB the second path\n   * @param paramsFn a function which returns the parameters to consider when comparing\n   *\n   * @returns an array of PathNodes from the first path which match the nodes in the second path\n   */\n  static matching(pathA: PathNode[], pathB: PathNode[], paramsFn?: GetParamsFn): PathNode[] {\n    let done = false;\n    let tuples: PathNode[][] = arrayTuples(pathA, pathB);\n    return tuples.reduce((matching, [nodeA, nodeB]) => {\n      done = done || !nodeA.equals(nodeB, paramsFn);\n      return done ? matching : matching.concat(nodeA);\n    }, []);\n  }\n\n  /**\n   * Returns true if two paths are identical.\n   *\n   * @param pathA\n   * @param pathB\n   * @param paramsFn a function which returns the parameters to consider when comparing\n   * @returns true if the the states and parameter values for both paths are identical\n   */\n  static equals(pathA: PathNode[], pathB: PathNode[], paramsFn?: GetParamsFn): boolean {\n    return pathA.length === pathB.length &&\n        PathUtils.matching(pathA, pathB, paramsFn).length === pathA.length;\n  }\n\n  /**\n   * Return a subpath of a path, which stops at the first matching node\n   *\n   * Given an array of nodes, returns a subset of the array starting from the first node,\n   * stopping when the first node matches the predicate.\n   *\n   * @param path a path of [[PathNode]]s\n   * @param predicate a [[Predicate]] fn that matches [[PathNode]]s\n   * @returns a subpath up to the matching node, or undefined if no match is found\n   */\n  static subPath(path: PathNode[], predicate: Predicate<PathNode>): PathNode[] {\n    let node = find(path, predicate);\n    let elementIdx = path.indexOf(node);\n    return elementIdx === -1 ? undefined : path.slice(0, elementIdx + 1);\n  }\n\n  /** Gets the raw parameter values from a path */\n  static paramValues = (path: PathNode[]) =>\n      path.reduce((acc, node) => extend(acc, node.paramValues), {});\n}\n","/**\n * @coreapi\n * @module resolve\n */ /** for typedoc */\nimport {extend, equals, inArray, identity} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {trace} from \"../common/trace\";\nimport {ResolvePolicy, ResolvableLiteral, resolvePolicies} from \"./interface\";\n\nimport {ResolveContext} from \"./resolveContext\";\nimport {stringify} from \"../common/strings\";\nimport {isFunction, isObject} from \"../common/predicates\";\nimport {Transition} from \"../transition/transition\";\nimport {StateObject} from \"../state/stateObject\";\nimport {PathNode} from \"../path/pathNode\";\nimport { isNullOrUndefined } from '../common';\n\n\n// TODO: explicitly make this user configurable\nexport let defaultResolvePolicy: ResolvePolicy = {\n  when: \"LAZY\",\n  async: \"WAIT\"\n};\n\n/**\n * The basic building block for the resolve system.\n *\n * Resolvables encapsulate a state's resolve's resolveFn, the resolveFn's declared dependencies, the wrapped (.promise),\n * and the unwrapped-when-complete (.data) result of the resolveFn.\n *\n * Resolvable.get() either retrieves the Resolvable's existing promise, or else invokes resolve() (which invokes the\n * resolveFn) and returns the resulting promise.\n *\n * Resolvable.get() and Resolvable.resolve() both execute within a context path, which is passed as the first\n * parameter to those fns.\n */\nexport class Resolvable implements ResolvableLiteral {\n  token: any;\n  policy: ResolvePolicy;\n  resolveFn: Function;\n  deps: any[];\n\n  data: any;\n  resolved: boolean = false;\n  promise: Promise<any> = undefined;\n\n  /** This constructor creates a Resolvable copy */\n  constructor(resolvable: Resolvable)\n\n  /** This constructor creates a new Resolvable from the plain old [[ResolvableLiteral]] javascript object */\n  constructor(resolvable: ResolvableLiteral)\n\n  /**\n   * This constructor creates a new `Resolvable`\n   *\n   * #### Example:\n   * ```js\n   * var resolvable1 = new Resolvable('mytoken', http => http.get('foo.json').toPromise(), [Http]);\n   *\n   * var resolvable2 = new Resolvable(UserService, dep => new UserService(dep.data), [SomeDependency]);\n   *\n   * var resolvable1Clone = new Resolvable(resolvable1);\n   * ```\n   *\n   * @param token The new resolvable's injection token, such as `\"userList\"` (a string) or `UserService` (a class).\n   *              When this token is used during injection, the resolved value will be injected.\n   * @param resolveFn The function that returns the resolved value, or a promise for the resolved value\n   * @param deps An array of dependencies, which will be injected into the `resolveFn`\n   * @param policy the [[ResolvePolicy]] defines when and how the Resolvable is processed\n   * @param data Pre-resolved data. If the resolve value is already known, it may be provided here.\n   */\n  constructor(token: any, resolveFn: Function, deps?: any[], policy?: ResolvePolicy, data?: any)\n  constructor(arg1: any, resolveFn?: Function, deps?: any[], policy?: ResolvePolicy, data?: any) {\n    if (arg1 instanceof Resolvable) {\n      extend(this, arg1);\n    } else if (isFunction(resolveFn)) {\n      if (isNullOrUndefined(arg1)) throw new Error(\"new Resolvable(): token argument is required\");\n      if (!isFunction(resolveFn)) throw new Error(\"new Resolvable(): resolveFn argument must be a function\");\n\n      this.token = arg1;\n      this.policy = policy;\n      this.resolveFn = resolveFn;\n      this.deps = deps || [];\n\n      this.data = data;\n      this.resolved = data !== undefined;\n      this.promise = this.resolved ? services.$q.when(this.data) : undefined;\n    } else if (isObject(arg1) && arg1.token && isFunction(arg1.resolveFn)) {\n      let literal = <ResolvableLiteral> arg1;\n      return new Resolvable(literal.token, literal.resolveFn, literal.deps, literal.policy, literal.data);\n    }\n  }\n\n  getPolicy(state: StateObject): ResolvePolicy {\n    let thisPolicy = this.policy || {};\n    let statePolicy = state && state.resolvePolicy || {};\n    return {\n      when: thisPolicy.when || statePolicy.when || defaultResolvePolicy.when,\n      async: thisPolicy.async || statePolicy.async || defaultResolvePolicy.async,\n    };\n  }\n\n  /**\n   * Asynchronously resolve this Resolvable's data\n   *\n   * Given a ResolveContext that this Resolvable is found in:\n   * Wait for this Resolvable's dependencies, then invoke this Resolvable's function\n   * and update the Resolvable's state\n   */\n  resolve(resolveContext: ResolveContext, trans?: Transition) {\n    let $q = services.$q;\n\n    // Gets all dependencies from ResolveContext and wait for them to be resolved\n    const getResolvableDependencies = () =>\n        $q.all(resolveContext.getDependencies(this).map(resolvable =>\n            resolvable.get(resolveContext, trans))) as Promise<any[]>;\n\n    // Invokes the resolve function passing the resolved dependencies as arguments\n    const invokeResolveFn = (resolvedDeps: any[]) =>\n        this.resolveFn.apply(null, resolvedDeps);\n\n    /**\n     * For RXWAIT policy:\n     *\n     * Given an observable returned from a resolve function:\n     * - enables .cache() mode (this allows multicast subscribers)\n     * - then calls toPromise() (this triggers subscribe() and thus fetches)\n     * - Waits for the promise, then return the cached observable (not the first emitted value).\n     */\n    const waitForRx = (observable$: any) => {\n      let cached = observable$.cache(1);\n      return cached.take(1).toPromise().then(() => cached);\n    };\n\n    // If the resolve policy is RXWAIT, wait for the observable to emit something. otherwise pass through.\n    let node: PathNode = resolveContext.findNode(this);\n    let state: StateObject = node && node.state;\n    let maybeWaitForRx = this.getPolicy(state).async === \"RXWAIT\" ? waitForRx : identity;\n\n    // After the final value has been resolved, update the state of the Resolvable\n    const applyResolvedValue = (resolvedValue: any) => {\n      this.data = resolvedValue;\n      this.resolved = true;\n      trace.traceResolvableResolved(this, trans);\n      return this.data;\n    };\n\n    // Sets the promise property first, then getsResolvableDependencies in the context of the promise chain. Always waits one tick.\n    return this.promise = $q.when()\n        .then(getResolvableDependencies)\n        .then(invokeResolveFn)\n        .then(maybeWaitForRx)\n        .then(applyResolvedValue);\n  }\n\n  /**\n   * Gets a promise for this Resolvable's data.\n   *\n   * Fetches the data and returns a promise.\n   * Returns the existing promise if it has already been fetched once.\n   */\n  get(resolveContext: ResolveContext, trans?: Transition): Promise<any> {\n    return this.promise || this.resolve(resolveContext, trans);\n  }\n\n  toString() {\n    return `Resolvable(token: ${stringify(this.token)}, requires: [${this.deps.map(stringify)}])`;\n  }\n\n  clone(): Resolvable {\n    return new Resolvable(this);\n  }\n  \n  static fromData = (token: any, data: any) =>  \n      new Resolvable(token, () => data, null, null, data);\n}\n","/**\n * # The Resolve subsystem\n *\n * This subsystem is an asynchronous, hierarchical Dependency Injection system.\n *\n * Typically, resolve is configured on a state using a [[StateDeclaration.resolve]] declaration.\n *\n * @coreapi\n * @module resolve\n */ /** for typedoc */\nimport {Resolvable} from \"./resolvable\";\n\n/**\n * An interface which is similar to an Angular 2 `Provider`\n */\nexport interface ProviderLike {\n  provide: any,\n  useClass?: any,\n  useFactory?: Function,\n  useValue?: any,\n  useExisting?: any,\n  deps?: any[]\n}\n\n/**\n * A plain object used to describe a [[Resolvable]]\n *\n * These objects may be used in the [[StateDeclaration.resolve]] array to declare\n * async data that the state or substates require.\n *\n * #### Example:\n * ```js\n *\n * var state = {\n *   name: 'main',\n *   resolve: [\n *     { token: 'myData', deps: [MyDataApi], resolveFn: (myDataApi) => myDataApi.getData() },\n *   ],\n * }\n * ```\n */\nexport interface ResolvableLiteral {\n  /**\n   * A Dependency Injection token\n   *\n   * This Resolvable's DI token.\n   * The Resolvable will be injectable elsewhere using the token.\n   */\n  token: any;\n\n  /**\n   * A function which fetches the Resolvable's data\n   *\n   * A function which returns one of:\n   *\n   * - The resolved value (synchronously)\n   * - A promise for the resolved value\n   * - An Observable of the resolved value(s)\n   *\n   * This function will be provided the dependencies listed in [[deps]] as its arguments.\n   * The resolve system will asynchronously fetch the dependencies before invoking this function.\n   */\n  resolveFn: Function;\n\n  /**\n   * Defines the Resolve Policy\n   *\n   * A policy that defines when to invoke the resolve,\n   * and whether to wait for async and unwrap the data\n   */\n  policy?: ResolvePolicy;\n\n  /**\n   * The Dependency Injection tokens\n   *\n   * This is an array of Dependency Injection tokens for the dependencies of the [[resolveFn]].\n   *\n   * The DI tokens are references to other `Resolvables`, or to other\n   * services from the native DI system.\n   */\n  deps?: any[];\n\n  /** Pre-resolved data. */\n  data?: any\n}\n\n/**\n * Defines how a resolve is processed during a transition\n *\n * This object is the [[StateDeclaration.resolvePolicy]] property.\n *\n * #### Example:\n * ```js\n * // Fetched when the resolve's state is being entered.\n * // Wait for the promise to resolve.\n * var policy1 = { when: \"LAZY\", async: \"WAIT\" }\n *\n * // Fetched when the Transition is starting.\n * // Do not wait for the returned promise to resolve.\n * // Inject the raw promise/value\n * var policy2 = { when: \"EAGER\", async: \"NOWAIT\" }\n * ```\n *\n * The policy for a given Resolvable is merged from three sources (highest priority first):\n *\n * - 1) Individual resolve definition\n * - 2) State definition\n * - 3) Global default\n *\n * #### Example:\n * ```js\n * // Wait for an Observable to emit one item.\n * // Since `wait` is not specified, it uses the `wait`\n * // policy defined on the state, or the global default\n * // if no `wait` policy is defined on the state\n * var myResolvablePolicy = { async: \"RXWAIT\" }\n * ```\n */\nexport interface ResolvePolicy {\n  /**\n   * Defines when a Resolvable is resolved (fetched) during a transition\n   *\n   * - `LAZY` (default)\n   *   - Resolved as the resolve's state is being entered\n   * - `EAGER`\n   *   - Resolved as the transition is starting\n   *\n   * #### Example:\n   * Resolves for `main` and `main.home` are fetched when each state is entered.\n   * All of `main` resolves are processed before fetching `main.home` resolves.\n   * ```js\n   * var state = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'LAZY' }, // default\n   * }\n   *\n   * var state = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'LAZY' }, // default\n   * }\n   * ```\n   *\n   * #### Example:\n   * Resolves for `main` and `main.home` are fetched at the same time when the transition starts.\n   * This happens earlier in the lifecycle than when states are entered.\n   * All of the `main` and `main.home` resolves are fetched as soon as possible.\n   * ```js\n   * var mainState = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'EAGER' },\n   * }\n   *\n   * var homeState = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { when: 'EAGER' },\n   * }\n   * ```\n   */\n  when?: PolicyWhen;\n\n  /**\n   * Determines the unwrapping behavior of asynchronous resolve values.\n   *\n   * - `WAIT` (default)\n   *   - If a promise is returned from the resolveFn, wait for the promise before proceeding\n   *   - The unwrapped value from the promise\n   * - `NOWAIT`\n   *   - If a promise is returned from the resolve, do not wait for the promise.\n   *   - Any other value returned is wrapped in a promise.\n   *   - The promise will not be unwrapped.\n   *   - The promise itself will be provided when the resolve is injected or bound elsewhere.\n   * - `RXWAIT`\n   *   - When an Observable is returned from the resolveFn, wait until the Observable emits at least one item.\n   *   - The Observable item will not be unwrapped.\n   *   - The Observable stream itself will be provided when the resolve is injected or bound elsewhere.\n   *\n   * #### Example:\n   * The `Transition` will not wait for the resolve promise(s) from `main` to settle before continuing.\n   * Resolves for `main` will be provided to components wrapped in a `Promise`.\n   *\n   * The `Transition` will wait for the `main.home` resolve promises.\n   * Resolved values will be unwrapped before being provided to components.\n   * ```js\n   * var mainState = {\n   *   name: 'main',\n   *   resolve: mainResolves, // defined elsewhere\n   *   resolvePolicy: { async: 'NOWAIT' },\n   * }\n   * var homeState = {\n   *   name: 'main.home',\n   *   resolve: homeResolves, // defined elsewhere\n   *   resolvePolicy: { async: 'WAIT' }, // default\n   * }\n   * ```\n   */\n  async?: PolicyAsync;\n}\n\nexport type PolicyWhen = \"LAZY\" | \"EAGER\" ;\nexport type PolicyAsync = \"WAIT\" | \"NOWAIT\" | \"RXWAIT\" ;\n\n/** @internalapi */\nexport let resolvePolicies = {\n  when: {\n    LAZY: \"LAZY\",\n    EAGER: \"EAGER\"\n  },\n  async: {\n    WAIT: \"WAIT\",\n    NOWAIT: \"NOWAIT\",\n    RXWAIT: \"RXWAIT\"\n  }\n};\n","/** @module resolve */\n/** for typedoc */\nimport { find, tail, uniqR, unnestR, inArray } from \"../common/common\";\nimport { propEq, not } from \"../common/hof\";\nimport { trace } from \"../common/trace\";\nimport { services, $InjectorLike } from \"../common/coreservices\";\nimport { resolvePolicies, PolicyWhen, ResolvePolicy } from \"./interface\";\nimport { PathNode } from \"../path/pathNode\";\nimport { Resolvable } from \"./resolvable\";\nimport { StateObject } from \"../state/stateObject\";\nimport { PathUtils } from \"../path/pathFactory\";\nimport { stringify } from \"../common/strings\";\nimport { Transition } from \"../transition/transition\";\nimport { UIInjector } from \"../interface\";\n\nconst when = resolvePolicies.when;\nconst ALL_WHENS = [when.EAGER, when.LAZY];\nconst EAGER_WHENS = [when.EAGER];\n\nexport const NATIVE_INJECTOR_TOKEN: string = \"Native Injector\";\n\n/**\n * Encapsulates Dependency Injection for a path of nodes\n *\n * UI-Router states are organized as a tree.\n * A nested state has a path of ancestors to the root of the tree.\n * When a state is being activated, each element in the path is wrapped as a [[PathNode]].\n * A `PathNode` is a stateful object that holds things like parameters and resolvables for the state being activated.\n *\n * The ResolveContext closes over the [[PathNode]]s, and provides DI for the last node in the path.\n */\nexport class ResolveContext {\n  _injector: UIInjector;\n\n  constructor(private _path: PathNode[]) { }\n\n  /** Gets all the tokens found in the resolve context, de-duplicated */\n  getTokens(): any[] {\n    return this._path.reduce((acc, node) => acc.concat(node.resolvables.map(r => r.token)), []).reduce(uniqR, []);\n  }\n\n  /**\n   * Gets the Resolvable that matches the token\n   *\n   * Gets the last Resolvable that matches the token in this context, or undefined.\n   * Throws an error if it doesn't exist in the ResolveContext\n   */\n  getResolvable(token: any): Resolvable {\n    let matching = this._path.map(node => node.resolvables)\n        .reduce(unnestR, [])\n        .filter((r: Resolvable) => r.token === token);\n    return tail(matching);\n  }\n\n  /** Returns the [[ResolvePolicy]] for the given [[Resolvable]] */\n  getPolicy(resolvable: Resolvable): ResolvePolicy {\n    let node = this.findNode(resolvable);\n    return resolvable.getPolicy(node.state);\n  }\n\n  /**\n   * Returns a ResolveContext that includes a portion of this one\n   *\n   * Given a state, this method creates a new ResolveContext from this one.\n   * The new context starts at the first node (root) and stops at the node for the `state` parameter.\n   *\n   * #### Why\n   *\n   * When a transition is created, the nodes in the \"To Path\" are injected from a ResolveContext.\n   * A ResolveContext closes over a path of [[PathNode]]s and processes the resolvables.\n   * The \"To State\" can inject values from its own resolvables, as well as those from all its ancestor state's (node's).\n   * This method is used to create a narrower context when injecting ancestor nodes.\n   *\n   * @example\n   * `let ABCD = new ResolveContext([A, B, C, D]);`\n   *\n   * Given a path `[A, B, C, D]`, where `A`, `B`, `C` and `D` are nodes for states `a`, `b`, `c`, `d`:\n   * When injecting `D`, `D` should have access to all resolvables from `A`, `B`, `C`, `D`.\n   * However, `B` should only be able to access resolvables from `A`, `B`.\n   *\n   * When resolving for the `B` node, first take the full \"To Path\" Context `[A,B,C,D]` and limit to the subpath `[A,B]`.\n   * `let AB = ABCD.subcontext(a)`\n   */\n  subContext(state: StateObject): ResolveContext {\n    return new ResolveContext(PathUtils.subPath(this._path, node => node.state === state));\n  }\n\n  /**\n   * Adds Resolvables to the node that matches the state\n   *\n   * This adds a [[Resolvable]] (generally one created on the fly; not declared on a [[StateDeclaration.resolve]] block).\n   * The resolvable is added to the node matching the `state` parameter.\n   *\n   * These new resolvables are not automatically fetched.\n   * The calling code should either fetch them, fetch something that depends on them,\n   * or rely on [[resolvePath]] being called when some state is being entered.\n   *\n   * Note: each resolvable's [[ResolvePolicy]] is merged with the state's policy, and the global default.\n   *\n   * @param newResolvables the new Resolvables\n   * @param state Used to find the node to put the resolvable on\n   */\n  addResolvables(newResolvables: Resolvable[], state: StateObject) {\n    let node = <PathNode> find(this._path, propEq('state', state));\n    let keys = newResolvables.map(r => r.token);\n    node.resolvables = node.resolvables.filter(r => keys.indexOf(r.token) === -1).concat(newResolvables);\n  }\n  \n  /**\n   * Returns a promise for an array of resolved path Element promises\n   *\n   * @param when\n   * @param trans\n   * @returns {Promise<any>|any}\n   */\n  resolvePath(when: PolicyWhen = \"LAZY\", trans?: Transition): Promise<{ token: any, value: any }[]> {\n    // This option determines which 'when' policy Resolvables we are about to fetch.\n    let whenOption: string = inArray(ALL_WHENS, when) ? when : \"LAZY\";\n    // If the caller specified EAGER, only the EAGER Resolvables are fetched.\n    // if the caller specified LAZY, both EAGER and LAZY Resolvables are fetched.`\n    let matchedWhens = whenOption === resolvePolicies.when.EAGER ? EAGER_WHENS : ALL_WHENS;\n    \n    // get the subpath to the state argument, if provided\n    trace.traceResolvePath(this._path, when, trans);\n\n    const matchesPolicy = (acceptedVals: string[], whenOrAsync: \"when\"|\"async\") =>\n        (resolvable: Resolvable) =>\n            inArray(acceptedVals, this.getPolicy(resolvable)[whenOrAsync]);\n\n    // Trigger all the (matching) Resolvables in the path\n    // Reduce all the \"WAIT\" Resolvables into an array\n    let promises: Promise<any>[] = this._path.reduce((acc, node) => {\n      let nodeResolvables = node.resolvables.filter(matchesPolicy(matchedWhens, 'when'));\n      let nowait = nodeResolvables.filter(matchesPolicy(['NOWAIT'], 'async'));\n      let wait = nodeResolvables.filter(not(matchesPolicy(['NOWAIT'], 'async')));\n\n      // For the matching Resolvables, start their async fetch process.\n      let subContext = this.subContext(node.state);\n      let getResult = (r: Resolvable) => r.get(subContext, trans)\n          // Return a tuple that includes the Resolvable's token\n          .then(value => ({ token: r.token, value: value }));\n      nowait.forEach(getResult);\n      return acc.concat(wait.map(getResult));\n    }, []);\n\n    // Wait for all the \"WAIT\" resolvables\n    return services.$q.all(promises);\n  }\n\n  injector(): UIInjector {\n    return this._injector || (this._injector = new UIInjectorImpl(this));\n  }\n\n  findNode(resolvable: Resolvable): PathNode {\n    return find(this._path, (node: PathNode) => inArray(node.resolvables, resolvable));\n  }\n\n  /**\n   * Gets the async dependencies of a Resolvable\n   *\n   * Given a Resolvable, returns its dependencies as a Resolvable[]\n   */\n  getDependencies(resolvable: Resolvable): Resolvable[] {\n    let node = this.findNode(resolvable);\n    // Find which other resolvables are \"visible\" to the `resolvable` argument\n    // subpath stopping at resolvable's node, or the whole path (if the resolvable isn't in the path)\n    let subPath: PathNode[] = PathUtils.subPath(this._path, x => x === node) || this._path;\n    let availableResolvables: Resolvable[] = subPath\n        .reduce((acc, node) => acc.concat(node.resolvables), []) //all of subpath's resolvables\n        .filter(res => res !== resolvable); // filter out the `resolvable` argument\n\n    const getDependency = (token: any) => {\n      let matching = availableResolvables.filter(r => r.token === token);\n      if (matching.length) return tail(matching);\n\n      let fromInjector = this.injector().getNative(token);\n      if (!fromInjector) {\n        throw new Error(\"Could not find Dependency Injection token: \" + stringify(token));\n      }\n\n      return new Resolvable(token, () => fromInjector, [], fromInjector);\n    };\n\n    return resolvable.deps.map(getDependency);\n  }\n}\n\nclass UIInjectorImpl implements UIInjector {\n  native: $InjectorLike;\n\n  constructor(public context: ResolveContext) {\n    this.native = this.get(NATIVE_INJECTOR_TOKEN) || services.$injector;\n  }\n\n  get(token: any) {\n    let resolvable = this.context.getResolvable(token);\n    if (resolvable) {\n      if (this.context.getPolicy(resolvable).async === 'NOWAIT') {\n        return resolvable.get(this.context);\n      }\n\n      if (!resolvable.resolved) {\n        throw new Error(\"Resolvable async .get() not complete:\" + stringify(resolvable.token))\n      }\n      return resolvable.data;\n    }\n    return this.native && this.native.get(token);\n  }\n\n  getAsync(token: any) {\n    let resolvable = this.context.getResolvable(token);\n    if (resolvable) return resolvable.get(this.context);\n    return services.$q.when(this.native.get(token));\n  }\n\n  getNative(token: any) {\n    return this.native && this.native.get(token);\n  }\n}","/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nimport { trace } from '../common/trace';\nimport { services } from '../common/coreservices';\nimport {\n  map, find, extend, mergeR, tail, omit, toJson, arrayTuples, unnestR, identity, anyTrueR,\n} from '../common/common';\nimport {isObject, isUndefined} from '../common/predicates';\nimport { prop, propEq, val, not, is } from '../common/hof';\nimport { StateDeclaration, StateOrName } from '../state/interface';\nimport {\n  TransitionOptions, TreeChanges, IHookRegistry, TransitionHookPhase, RegisteredHooks, HookRegOptions,\n  HookMatchCriteria, TransitionStateHookFn, TransitionHookFn,\n} from './interface'; // has or is using\nimport { TransitionHook } from './transitionHook';\nimport { matchState, makeEvent, RegisteredHook } from './hookRegistry';\nimport { HookBuilder } from './hookBuilder';\nimport { PathNode } from '../path/pathNode';\nimport { PathUtils } from '../path/pathFactory';\nimport { StateObject } from '../state/stateObject';\nimport { TargetState } from '../state/targetState';\nimport { Param } from '../params/param';\nimport { Resolvable } from '../resolve/resolvable';\nimport { ViewConfig } from '../view/interface';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { UIRouter } from '../router';\nimport { UIInjector } from '../interface';\nimport { RawParams } from '../params/interface';\nimport { ResolvableLiteral } from '../resolve/interface';\n\n/** @hidden */\nconst stateSelf: (_state: StateObject) => StateDeclaration = prop(\"self\");\n\n/**\n * Represents a transition between two states.\n *\n * When navigating to a state, we are transitioning **from** the current state **to** the new state.\n *\n * This object contains all contextual information about the to/from states, parameters, resolves.\n * It has information about all states being entered and exited as a result of the transition.\n */\nexport class Transition implements IHookRegistry {\n\n  /** @hidden */\n  static diToken = Transition;\n\n  /**\n   * A unique identifier for the transition.\n   *\n   * This is an auto incrementing integer, starting from `0`.\n   */\n  $id: number;\n\n  /**\n   * A reference to the [[UIRouter]] instance\n   *\n   * This reference can be used to access the router services, such as the [[StateService]]\n   */\n  router: UIRouter;\n\n  /** @hidden */\n  private _deferred = services.$q.defer();\n  /**\n   * This promise is resolved or rejected based on the outcome of the Transition.\n   *\n   * When the transition is successful, the promise is resolved\n   * When the transition is unsuccessful, the promise is rejected with the [[Rejection]] or javascript error\n   */\n  promise: Promise<any> = this._deferred.promise;\n  /**\n   * A boolean which indicates if the transition was successful\n   *\n   * After a successful transition, this value is set to true.\n   * After an unsuccessful transition, this value is set to false.\n   *\n   * The value will be undefined if the transition is not complete\n   */\n  success: boolean;\n  /** @hidden */\n  _aborted: boolean;\n  /** @hidden */\n  private _error: any;\n\n  /** @hidden Holds the hook registration functions such as those passed to Transition.onStart() */\n  _registeredHooks: RegisteredHooks = { };\n\n  /** @hidden */\n  private _options: TransitionOptions;\n  /** @hidden */\n  private _treeChanges: TreeChanges;\n  /** @hidden */\n  private _targetState: TargetState;\n  /** @hidden */\n  private _hookBuilder = new HookBuilder(this);\n\n\n  /** @hidden */\n  onBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n  /** @inheritdoc */\n  onError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return; }\n\n  /** @hidden\n   * Creates the transition-level hook registration functions\n   * (which can then be used to register hooks)\n   */\n  private createTransitionHookRegFns() {\n    this.router.transitionService._pluginapi._getEvents()\n        .filter(type => type.hookPhase !== TransitionHookPhase.CREATE)\n        .forEach(type => makeEvent(this, this.router.transitionService, type));\n  }\n\n  /** @internalapi */\n  getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n\n  /**\n   * Creates a new Transition object.\n   *\n   * If the target state is not valid, an error is thrown.\n   *\n   * @internalapi\n   *\n   * @param fromPath The path of [[PathNode]]s from which the transition is leaving.  The last node in the `fromPath`\n   *        encapsulates the \"from state\".\n   * @param targetState The target state and parameters being transitioned to (also, the transition options)\n   * @param router The [[UIRouter]] instance\n   */\n  constructor(fromPath: PathNode[], targetState: TargetState, router: UIRouter) {\n    this.router = router;\n    this._targetState = targetState;\n\n    if (!targetState.valid()) {\n      throw new Error(targetState.error());\n    }\n\n    // current() is assumed to come from targetState.options, but provide a naive implementation otherwise.\n    this._options = extend({ current: val(this) }, targetState.options());\n    this.$id = router.transitionService._transitionCount++;\n    let toPath = PathUtils.buildToPath(fromPath, targetState);\n    this._treeChanges = PathUtils.treeChanges(fromPath, toPath, this._options.reloadState);\n    this.createTransitionHookRegFns();\n\n    let onCreateHooks = this._hookBuilder.buildHooksForPhase(TransitionHookPhase.CREATE);\n    TransitionHook.invokeHooks(onCreateHooks, () => null);\n\n    this.applyViewConfigs(router);\n  }\n\n  private applyViewConfigs(router: UIRouter) {\n    let enteringStates = this._treeChanges.entering.map(node => node.state);\n    PathUtils.applyViewConfigs(router.transitionService.$view, this._treeChanges.to, enteringStates);\n  }\n\n  /**\n   * @internalapi\n   *\n   * @returns the internal from [State] object\n   */\n  $from() {\n    return tail(this._treeChanges.from).state;\n  }\n\n  /**\n   * @internalapi\n   *\n   * @returns the internal to [State] object\n   */\n  $to() {\n    return tail(this._treeChanges.to).state;\n  }\n\n  /**\n   * Returns the \"from state\"\n   *\n   * Returns the state that the transition is coming *from*.\n   *\n   * @returns The state declaration object for the Transition's (\"from state\").\n   */\n  from(): StateDeclaration {\n    return this.$from().self;\n  }\n\n  /**\n   * Returns the \"to state\"\n   *\n   * Returns the state that the transition is going *to*.\n   *\n   * @returns The state declaration object for the Transition's target state (\"to state\").\n   */\n  to(): StateDeclaration {\n    return this.$to().self;\n  }\n\n  /**\n   * Gets the Target State\n   *\n   * A transition's [[TargetState]] encapsulates the [[to]] state, the [[params]], and the [[options]] as a single object.\n   *\n   * @returns the [[TargetState]] of this Transition\n   */\n  targetState() {\n    return this._targetState;\n  }\n\n  /**\n   * Determines whether two transitions are equivalent.\n   * @deprecated\n   */\n  is(compare: (Transition|{to?: any, from?: any})): boolean {\n    if (compare instanceof Transition) {\n      // TODO: Also compare parameters\n      return this.is({ to: compare.$to().name, from: compare.$from().name });\n    }\n    return !(\n      (compare.to && !matchState(this.$to(), compare.to)) ||\n      (compare.from && !matchState(this.$from(), compare.from))\n    );\n  }\n\n  /**\n   * Gets transition parameter values\n   *\n   * Returns the parameter values for a transition as key/value pairs.\n   * This object is immutable.\n   *\n   * By default, returns the new parameter values (for the \"to state\").\n   * To return the previous parameter values,  supply `'from'` as the `pathname` argument.\n   *\n   * @param pathname the name of the treeChanges path to get parameter values for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   *\n   * @returns transition parameter values for the desired path.\n   */\n  params(pathname?: string): any;\n  params<T>(pathname?: string): T;\n  params(pathname: string = \"to\") {\n    return Object.freeze(this._treeChanges[pathname].map(prop(\"paramValues\")).reduce(mergeR, {}));\n  }\n\n\n  /**\n   * Creates a [[UIInjector]] Dependency Injector\n   *\n   * Returns a Dependency Injector for the Transition's target state (to state).\n   * The injector provides resolve values which the target state has access to.\n   *\n   * The `UIInjector` can also provide values from the native root/global injector (ng1/ng2).\n   *\n   * #### Example:\n   * ```js\n   * .onEnter({ entering: 'myState' }, trans => {\n   *   var myResolveValue = trans.injector().get('myResolve');\n   *   // Inject a global service from the global/native injector (if it exists)\n   *   var MyService = trans.injector().get('MyService');\n   * })\n   * ```\n   *\n   * In some cases (such as `onBefore`), you may need access to some resolve data but it has not yet been fetched.\n   * You can use [[UIInjector.getAsync]] to get a promise for the data.\n   * #### Example:\n   * ```js\n   * .onBefore({}, trans => {\n   *   return trans.injector().getAsync('myResolve').then(myResolveValue =>\n   *     return myResolveValue !== 'ABORT';\n   *   });\n   * });\n   * ```\n   *\n   * If a `state` is provided, the injector that is returned will be limited to resolve values that the provided state has access to.\n   * This can be useful if both a parent state `foo` and a child state `foo.bar` have both defined a resolve such as `data`.\n   * #### Example:\n   * ```js\n   * .onEnter({ to: 'foo.bar' }, trans => {\n   *   // returns result of `foo` state's `data` resolve\n   *   // even though `foo.bar` also has a `data` resolve\n   *   var fooData = trans.injector('foo').get('data');\n   * });\n   * ```\n   *\n   * If you need resolve data from the exiting states, pass `'from'` as `pathName`.\n   * The resolve data from the `from` path will be returned.\n   * #### Example:\n   * ```js\n   * .onExit({ exiting: 'foo.bar' }, trans => {\n   *   // Gets the resolve value of `data` from the exiting state.\n   *   var fooData = trans.injector(null, 'foo.bar').get('data');\n   * });\n   * ```\n   *\n   *\n   * @param state Limits the resolves provided to only the resolves the provided state has access to.\n   * @param pathName Default: `'to'`: Chooses the path for which to create the injector. Use this to access resolves for `exiting` states.\n   *\n   * @returns a [[UIInjector]]\n   */\n  injector(state?: StateOrName, pathName = \"to\"): UIInjector {\n    let path: PathNode[] = this._treeChanges[pathName];\n    if (state) path = PathUtils.subPath(path, node => node.state === state || node.state.name === state);\n    return new ResolveContext(path).injector();\n  }\n\n  /**\n   * Gets all available resolve tokens (keys)\n   *\n   * This method can be used in conjunction with [[injector]] to inspect the resolve values\n   * available to the Transition.\n   *\n   * This returns all the tokens defined on [[StateDeclaration.resolve]] blocks, for the states\n   * in the Transition's [[TreeChanges.to]] path.\n   *\n   * #### Example:\n   * This example logs all resolve values\n   * ```js\n   * let tokens = trans.getResolveTokens();\n   * tokens.forEach(token => console.log(token + \" = \" + trans.injector().get(token)));\n   * ```\n   *\n   * #### Example:\n   * This example creates promises for each resolve value.\n   * This triggers fetches of resolves (if any have not yet been fetched).\n   * When all promises have all settled, it logs the resolve values.\n   * ```js\n   * let tokens = trans.getResolveTokens();\n   * let promise = tokens.map(token => trans.injector().getAsync(token));\n   * Promise.all(promises).then(values => console.log(\"Resolved values: \" + values));\n   * ```\n   *\n   * Note: Angular 1 users whould use `$q.all()`\n   *\n   * @param pathname resolve context's path name (e.g., `to` or `from`)\n   *\n   * @returns an array of resolve tokens (keys)\n   */\n  getResolveTokens(pathname: string = \"to\"): any[] {\n    return new ResolveContext(this._treeChanges[pathname]).getTokens();\n  }\n\n  /**\n   * Dynamically adds a new [[Resolvable]] (i.e., [[StateDeclaration.resolve]]) to this transition.\n   *\n   * #### Example:\n   * ```js\n   * transitionService.onBefore({}, transition => {\n   *   transition.addResolvable({\n   *     token: 'myResolve',\n   *     deps: ['MyService'],\n   *     resolveFn: myService => myService.getData()\n   *   });\n   * });\n   * ```\n   *\n   * @param resolvable a [[ResolvableLiteral]] object (or a [[Resolvable]])\n   * @param state the state in the \"to path\" which should receive the new resolve (otherwise, the root state)\n   */\n  addResolvable(resolvable: Resolvable|ResolvableLiteral, state: StateOrName = \"\"): void {\n    resolvable = is(Resolvable)(resolvable) ? resolvable : new Resolvable(resolvable);\n\n    let stateName: string = (typeof state === \"string\") ? state : state.name;\n    let topath = this._treeChanges.to;\n    let targetNode = find(topath, node => node.state.name === stateName);\n    let resolveContext: ResolveContext = new ResolveContext(topath);\n    resolveContext.addResolvables([resolvable as Resolvable], targetNode.state);\n  }\n\n  /**\n   * Gets the transition from which this transition was redirected.\n   *\n   * If the current transition is a redirect, this method returns the transition that was redirected.\n   *\n   * #### Example:\n   * ```js\n   * let transitionA = $state.go('A').transition\n   * transitionA.onStart({}, () => $state.target('B'));\n   * $transitions.onSuccess({ to: 'B' }, (trans) => {\n   *   trans.to().name === 'B'; // true\n   *   trans.redirectedFrom() === transitionA; // true\n   * });\n   * ```\n   *\n   * @returns The previous Transition, or null if this Transition is not the result of a redirection\n   */\n  redirectedFrom(): Transition {\n    return this._options.redirectedFrom || null;\n  }\n\n  /**\n   * Gets the original transition in a redirect chain\n   *\n   * A transition might belong to a long chain of multiple redirects.\n   * This method walks the [[redirectedFrom]] chain back to the original (first) transition in the chain.\n   *\n   * #### Example:\n   * ```js\n   * // states\n   * registry.register({ name: 'A', redirectTo: 'B' });\n   * registry.register({ name: 'B', redirectTo: 'C' });\n   * registry.register({ name: 'C', redirectTo: 'D' });\n   * registry.register({ name: 'D' });\n   *\n   * let transitionA = $state.go('A').transition\n   *\n   * $transitions.onSuccess({ to: 'D' }, (trans) => {\n   *   trans.to().name === 'D'; // true\n   *   trans.redirectedFrom().to().name === 'C'; // true\n   *   trans.originalTransition() === transitionA; // true\n   *   trans.originalTransition().to().name === 'A'; // true\n   * });\n   * ```\n   *\n   * @returns The original Transition that started a redirect chain\n   */\n  originalTransition(): Transition {\n    let rf = this.redirectedFrom();\n    return (rf && rf.originalTransition()) || this;\n  }\n\n  /**\n   * Get the transition options\n   *\n   * @returns the options for this Transition.\n   */\n  options(): TransitionOptions {\n    return this._options;\n  }\n\n  /**\n   * Gets the states being entered.\n   *\n   * @returns an array of states that will be entered during this transition.\n   */\n  entering(): StateDeclaration[] {\n    return map(this._treeChanges.entering, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Gets the states being exited.\n   *\n   * @returns an array of states that will be exited during this transition.\n   */\n  exiting(): StateDeclaration[] {\n    return map(this._treeChanges.exiting, prop('state')).map(stateSelf).reverse();\n  }\n\n  /**\n   * Gets the states being retained.\n   *\n   * @returns an array of states that are already entered from a previous Transition, that will not be\n   *    exited during this Transition\n   */\n  retained(): StateDeclaration[] {\n    return map(this._treeChanges.retained, prop('state')).map(stateSelf);\n  }\n\n  /**\n   * Get the [[ViewConfig]]s associated with this Transition\n   *\n   * Each state can define one or more views (template/controller), which are encapsulated as `ViewConfig` objects.\n   * This method fetches the `ViewConfigs` for a given path in the Transition (e.g., \"to\" or \"entering\").\n   *\n   * @param pathname the name of the path to fetch views for:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   * @param state If provided, only returns the `ViewConfig`s for a single state in the path\n   *\n   * @returns a list of ViewConfig objects for the given path.\n   */\n  views(pathname: string = \"entering\", state?: StateObject): ViewConfig[] {\n    let path = this._treeChanges[pathname];\n    path = !state ? path : path.filter(propEq('state', state));\n    return path.map(prop(\"views\")).filter(identity).reduce(unnestR, []);\n  }\n\n  /**\n   * Return the transition's tree changes\n   *\n   * A transition goes from one state/parameters to another state/parameters.\n   * During a transition, states are entered and/or exited.\n   *\n   * This function returns various branches (paths) which represent the changes to the\n   * active state tree that are caused by the transition.\n   *\n   * @param pathname The name of the tree changes path to get:\n   *   (`'to'`, `'from'`, `'entering'`, `'exiting'`, `'retained'`)\n   */\n  treeChanges(pathname: string): PathNode[];\n  treeChanges(): TreeChanges;\n  treeChanges(pathname?: string) {\n    return pathname ? this._treeChanges[pathname] : this._treeChanges;\n  }\n\n  /**\n   * Creates a new transition that is a redirection of the current one.\n   *\n   * This transition can be returned from a [[TransitionService]] hook to\n   * redirect a transition to a new state and/or set of parameters.\n   *\n   * @internalapi\n   *\n   * @returns Returns a new [[Transition]] instance.\n   */\n  redirect(targetState: TargetState): Transition {\n    let redirects = 1, trans: Transition = this;\n    while ((trans = trans.redirectedFrom()) != null) {\n      if (++redirects > 20) throw new Error(`Too many consecutive Transition redirects (20+)`);\n    }\n\n    let redirectOpts: TransitionOptions = { redirectedFrom: this, source: \"redirect\" };\n    // If the original transition was caused by URL sync, then use { location: 'replace' }\n    // on the new transition (unless the target state explicitly specifies location: false).\n    // This causes the original url to be replaced with the url for the redirect target\n    // so the original url disappears from the browser history.\n    if (this.options().source === 'url' && targetState.options().location !== false) {\n      redirectOpts.location = 'replace';\n    }\n\n    let newOptions = extend({}, this.options(), targetState.options(), redirectOpts);\n\n    targetState = new TargetState(targetState.identifier(), targetState.$state(), targetState.params(), newOptions);\n\n    let newTransition = this.router.transitionService.create(this._treeChanges.from, targetState);\n    let originalEnteringNodes = this._treeChanges.entering;\n    let redirectEnteringNodes = newTransition._treeChanges.entering;\n\n    // --- Re-use resolve data from original transition ---\n    // When redirecting from a parent state to a child state where the parent parameter values haven't changed\n    // (because of the redirect), the resolves fetched by the original transition are still valid in the\n    // redirected transition.\n    //\n    // This allows you to define a redirect on a parent state which depends on an async resolve value.\n    // You can wait for the resolve, then redirect to a child state based on the result.\n    // The redirected transition does not have to re-fetch the resolve.\n    // ---------------------------------------------------------\n\n    const nodeIsReloading = (reloadState: StateObject) => (node: PathNode) => {\n      return reloadState && node.state.includes[reloadState.name];\n    };\n\n    // Find any \"entering\" nodes in the redirect path that match the original path and aren't being reloaded\n    let matchingEnteringNodes: PathNode[] = PathUtils.matching(redirectEnteringNodes, originalEnteringNodes, PathUtils.nonDynamicParams)\n        .filter(not(nodeIsReloading(targetState.options().reloadState)));\n\n    // Use the existing (possibly pre-resolved) resolvables for the matching entering nodes.\n    matchingEnteringNodes.forEach((node, idx) => {\n      node.resolvables = originalEnteringNodes[idx].resolvables;\n    });\n\n    return newTransition;\n  }\n\n  /** @hidden If a transition doesn't exit/enter any states, returns any [[Param]] whose value changed */\n  private _changedParams(): Param[] {\n    let tc = this._treeChanges;\n\n    /** Return undefined if it's not a \"dynamic\" transition, for the following reasons */\n    // If user explicitly wants a reload\n    if (this._options.reload) return undefined;\n    // If any states are exiting or entering\n    if (tc.exiting.length || tc.entering.length) return undefined;\n    // If to/from path lengths differ\n    if (tc.to.length !== tc.from.length) return undefined;\n    // If the to/from paths are different\n    let pathsDiffer: boolean = arrayTuples(tc.to, tc.from)\n        .map(tuple => tuple[0].state !== tuple[1].state)\n        .reduce(anyTrueR, false);\n    if (pathsDiffer) return undefined;\n\n    // Find any parameter values that differ\n    let nodeSchemas: Param[][] = tc.to.map((node: PathNode) => node.paramSchema);\n    let [toValues, fromValues] = [tc.to, tc.from].map(path => path.map(x => x.paramValues));\n    let tuples = arrayTuples(nodeSchemas, toValues, fromValues);\n\n    return tuples.map(([schema, toVals, fromVals]) => Param.changed(schema, toVals, fromVals)).reduce(unnestR, []);\n  }\n\n  /**\n   * Returns true if the transition is dynamic.\n   *\n   * A transition is dynamic if no states are entered nor exited, but at least one dynamic parameter has changed.\n   *\n   * @returns true if the Transition is dynamic\n   */\n  dynamic(): boolean {\n    let changes = this._changedParams();\n    return !changes ? false : changes.map(x => x.dynamic).reduce(anyTrueR, false);\n  }\n\n  /**\n   * Returns true if the transition is ignored.\n   *\n   * A transition is ignored if no states are entered nor exited, and no parameter values have changed.\n   *\n   * @returns true if the Transition is ignored.\n   */\n  ignored(): boolean {\n    return !!this._ignoredReason();\n  }\n\n  /** @hidden */\n  _ignoredReason(): \"SameAsCurrent\"|\"SameAsPending\"|undefined {\n    const pending = this.router.globals.transition;\n    const reloadState = this._options.reloadState;\n\n    const same = (pathA, pathB) => {\n      if (pathA.length !== pathB.length) return false;\n      const matching = PathUtils.matching(pathA, pathB);\n      return pathA.length === matching.filter(node => !reloadState || !node.state.includes[reloadState.name]).length;\n    };\n\n    let newTC = this.treeChanges();\n    let pendTC = pending && pending.treeChanges();\n\n    if (pendTC && same(pendTC.to, newTC.to) && same(pendTC.exiting, newTC.exiting)) return \"SameAsPending\";\n    if (newTC.exiting.length === 0 && newTC.entering.length === 0 && same(newTC.from, newTC.to)) return \"SameAsCurrent\";\n  }\n\n  /**\n   * Runs the transition\n   *\n   * This method is generally called from the [[StateService.transitionTo]]\n   *\n   * @internalapi\n   *\n   * @returns a promise for a successful transition.\n   */\n  run(): Promise<any> {\n    let runAllHooks = TransitionHook.runAllHooks;\n\n    // Gets transition hooks array for the given phase\n    const getHooksFor = (phase: TransitionHookPhase) =>\n        this._hookBuilder.buildHooksForPhase(phase);\n\n    // When the chain is complete, then resolve or reject the deferred\n    const transitionSuccess = () => {\n      trace.traceSuccess(this.$to(), this);\n      this.success = true;\n      this._deferred.resolve(this.to());\n      runAllHooks(getHooksFor(TransitionHookPhase.SUCCESS));\n    };\n\n    const transitionError = (reason: any) => {\n      trace.traceError(reason, this);\n      this.success = false;\n      this._deferred.reject(reason);\n      this._error = reason;\n      runAllHooks(getHooksFor(TransitionHookPhase.ERROR));\n    };\n\n    const runTransition = () => {\n      // Wait to build the RUN hook chain until the BEFORE hooks are done\n      // This allows a BEFORE hook to dynamically add additional RUN hooks via the Transition object.\n      let allRunHooks = getHooksFor(TransitionHookPhase.RUN);\n      let done = () => services.$q.when(undefined);\n      return TransitionHook.invokeHooks(allRunHooks, done);\n    };\n\n    const startTransition = () => {\n      let globals = this.router.globals;\n\n      globals.lastStartedTransitionId = this.$id;\n      globals.transition = this;\n      globals.transitionHistory.enqueue(this);\n\n      trace.traceTransitionStart(this);\n\n      return services.$q.when(undefined);\n    };\n\n    let allBeforeHooks = getHooksFor(TransitionHookPhase.BEFORE);\n    TransitionHook.invokeHooks(allBeforeHooks, startTransition)\n        .then(runTransition)\n        .then(transitionSuccess, transitionError);\n\n    return this.promise;\n  }\n\n  /** Checks if this transition is currently active/running. */\n  isActive = () =>\n      this.router.globals.transition === this;\n\n  /**\n   * Checks if the Transition is valid\n   *\n   * @returns true if the Transition is valid\n   */\n  valid() {\n    return !this.error() || this.success !== undefined;\n  }\n\n  /**\n   * Aborts this transition\n   *\n   * Imperative API to abort a Transition.\n   * This only applies to Transitions that are not yet complete.\n   */\n  abort() {\n    // Do not set flag if the transition is already complete\n    if (isUndefined(this.success))  {\n      this._aborted = true;\n    }\n  }\n\n  /**\n   * The Transition error reason.\n   *\n   * If the transition is invalid (and could not be run), returns the reason the transition is invalid.\n   * If the transition was valid and ran, but was not successful, returns the reason the transition failed.\n   *\n   * @returns an error message explaining why the transition is invalid, or the reason the transition failed.\n   */\n  error() {\n    let state: StateObject = this.$to();\n\n    if (state.self.abstract)\n      return `Cannot transition to abstract state '${state.name}'`;\n\n    const paramDefs = state.parameters(), values = this.params();\n    const invalidParams = paramDefs.filter(param => !param.validates(values[param.id]));\n    if (invalidParams.length) {\n      return `Param values not valid for state '${state.name}'. Invalid params: [ ${invalidParams.map(param => param.id).join(', ')} ]`;\n    }\n\n    if (this.success === false)\n      return this._error;\n  }\n\n  /**\n   * A string representation of the Transition\n   *\n   * @returns A string representation of the Transition\n   */\n  toString () {\n    let fromStateOrName = this.from();\n    let toStateOrName = this.to();\n\n    const avoidEmptyHash = (params: RawParams) =>\n      (params[\"#\"] !== null && params[\"#\"] !== undefined) ? params : omit(params, [\"#\"]);\n\n    // (X) means the to state is invalid.\n    let id = this.$id,\n        from = isObject(fromStateOrName) ? fromStateOrName.name : fromStateOrName,\n        fromParams = toJson(avoidEmptyHash(this._treeChanges.from.map(prop('paramValues')).reduce(mergeR, {}))),\n        toValid = this.valid() ? \"\" : \"(X) \",\n        to = isObject(toStateOrName) ? toStateOrName.name : toStateOrName,\n        toParams = toJson(avoidEmptyHash(this.params()));\n\n    return `Transition#${id}( '${from}'${fromParams} -> ${toValid}'${to}'${toParams} )`;\n  }\n}\n","/**\n * @coreapi\n * @module params\n */\n/** */\nimport { fromJson, toJson, identity, equals, inherit, map, extend, pick } from \"../common/common\";\nimport { isDefined, isNullOrUndefined } from \"../common/predicates\";\nimport { is } from \"../common/hof\";\nimport { services } from \"../common/coreservices\";\nimport { ParamType } from \"./paramType\";\nimport { ParamTypeDefinition } from \"./interface\";\n\n/**\n * A registry for parameter types.\n *\n * This registry manages the built-in (and custom) parameter types.\n *\n * The built-in parameter types are:\n *\n * - [[string]]\n * - [[path]]\n * - [[query]]\n * - [[hash]]\n * - [[int]]\n * - [[bool]]\n * - [[date]]\n * - [[json]]\n * - [[any]]\n */\nexport class ParamTypes {\n  /** @hidden */\n  types: any;\n  /** @hidden */\n  enqueue: boolean = true;\n  /** @hidden */\n  typeQueue: any[] = [];\n\n  /**\n   * Built-in parameter type: `string`\n   *\n   * This parameter type coerces values to strings.\n   * It matches anything (`new RegExp(\".*\")`) in the URL\n   */\n  static string: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `path`\n   *\n   * This parameter type is the default type for path parameters.\n   * A path parameter is any parameter declared in the path portion of a url\n   *\n   * - `/foo/:param1/:param2`: two path parameters\n   *\n   * This parameter type behaves exactly like the [[string]] type with one exception.\n   * When matching parameter values in the URL, the `path` type does not match forward slashes `/`.\n   *\n   * #### Angular 1 note:\n   * In ng1, this type is overridden with one that pre-encodes slashes as `~2F` instead of `%2F`.\n   * For more details about this angular 1 behavior, see: https://github.com/angular-ui/ui-router/issues/2598\n   */\n  static path: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `query`\n   *\n   * This parameter type is the default type for query/search parameters.\n   * It behaves the same as the [[string]] parameter type.\n   *\n   * A query parameter is any parameter declared in the query/search portion of a url\n   *\n   * - `/bar?param2`: a query parameter\n   */\n  static query: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `hash`\n   *\n   * This parameter type is used for the `#` parameter (the hash)\n   * It behaves the same as the [[string]] parameter type.\n   * @coreapi\n   */\n  static hash: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `int`\n   *\n   * This parameter type serializes javascript integers (`number`s which represent an integer) to the URL.\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'user',\n   *   url: '/user/{id:int}'\n   * });\n   * ```\n   * ```js\n   * $state.go('user', { id: 1298547 });\n   * ```\n   *\n   * The URL will serialize to: `/user/1298547`.\n   *\n   * When the parameter value is read, it will be the `number` `1298547`, not the string `\"1298547\"`.\n   */\n  static int: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `bool`\n   *\n   * This parameter type serializes `true`/`false` as `1`/`0`\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'inbox',\n   *   url: '/inbox?{unread:bool}'\n   * });\n   * ```\n   * ```js\n   * $state.go('inbox', { unread: true });\n   * ```\n   *\n   * The URL will serialize to: `/inbox?unread=1`.\n   *\n   * Conversely, if the url is `/inbox?unread=0`, the value of the `unread` parameter will be a `false`.\n   */\n  static bool: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `date`\n   *\n   * This parameter type can be used to serialize Javascript dates as parameter values.\n   *\n   * #### Example:\n   * ```js\n   * .state({\n   *   name: 'search',\n   *   url: '/search?{start:date}'\n   * });\n   * ```\n   * ```js\n   * $state.go('search', { start: new Date(2000, 0, 1) });\n   * ```\n   *\n   * The URL will serialize to: `/search?start=2000-01-01`.\n   *\n   * Conversely, if the url is `/search?start=2016-12-25`, the value of the `start` parameter will be a `Date` object where:\n   *\n   * - `date.getFullYear() === 2016`\n   * - `date.getMonth() === 11` (month is 0-based)\n   * - `date.getDate() === 25`\n   */\n  static date: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `json`\n   *\n   * This parameter type can be used to serialize javascript objects into the URL using JSON serialization.\n   *\n   * #### Example:\n   * This example serializes an plain javascript object to the URL\n   * ```js\n   * .state({\n   *   name: 'map',\n   *   url: '/map/{coords:json}'\n   * });\n   * ```\n   * ```js\n   * $state.go('map', { coords: { x: 10399.2, y: 49071 });\n   * ```\n   *\n   * The URL will serialize to: `/map/%7B%22x%22%3A10399.2%2C%22y%22%3A49071%7D`\n   */\n  static json: ParamTypeDefinition;\n\n  /**\n   * Built-in parameter type: `any`\n   *\n   * This parameter type is used by default for url-less parameters (parameters that do not appear in the URL).\n   * This type does not encode or decode.\n   * It is compared using a deep `equals` comparison.\n   *\n   * #### Example:\n   * This example defines a non-url parameter on a [[StateDeclaration]].\n   * ```js\n   * .state({\n   *   name: 'new',\n   *   url: '/new',\n   *   params: {\n   *     inrepyto: null\n   *   }\n   * });\n   * ```\n   * ```js\n   * $state.go('new', { inreplyto: currentMessage });\n   * ```\n   */\n  static any: ParamTypeDefinition;\n\n\n  /** @internalapi */\n  private defaultTypes: any = pick(ParamTypes.prototype, [\"hash\", \"string\", \"query\", \"path\", \"int\", \"bool\", \"date\", \"json\", \"any\"]);\n\n  /** @internalapi */\n  constructor() {\n    // Register default types. Store them in the prototype of this.types.\n    const makeType = (definition: ParamTypeDefinition, name: string) =>\n        new ParamType(extend({ name }, definition));\n    this.types = inherit(map(this.defaultTypes, makeType), {});\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.types = {};\n  }\n\n  /**\n   * Registers a parameter type\n   *\n   * End users should call [[UrlMatcherFactory.type]], which delegates to this method.\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    if (!isDefined(definition)) return this.types[name];\n    if (this.types.hasOwnProperty(name)) throw new Error(`A type named '${name}' has already been defined.`);\n\n    this.types[name] = new ParamType(extend({ name }, definition));\n\n    if (definitionFn) {\n      this.typeQueue.push({ name, def: definitionFn });\n      if (!this.enqueue) this._flushTypeQueue();\n    }\n\n    return this;\n  }\n\n  /** @internalapi */\n  _flushTypeQueue() {\n    while (this.typeQueue.length) {\n      let type = this.typeQueue.shift();\n      if (type.pattern) throw new Error(\"You cannot override a type's .pattern at runtime.\");\n      extend(this.types[type.name], services.$injector.invoke(type.def));\n    }\n  }\n}\n\n/** @hidden */\nfunction initDefaultTypes() {\n\n  const makeDefaultType = (def) => {\n    const valToString = (val: any) =>\n        val != null ? val.toString() : val;\n\n    const defaultTypeBase = {\n      encode: valToString,\n      decode: valToString,\n      is: is(String),\n      pattern: /.*/,\n      equals: (a: any, b: any) => a == b, // allow coersion for null/undefined/\"\"\n    };\n\n    return extend({}, defaultTypeBase, def) as ParamTypeDefinition;\n  };\n\n  // Default Parameter Type Definitions\n  extend(ParamTypes.prototype, {\n    string: makeDefaultType({}),\n\n    path: makeDefaultType({\n      pattern: /[^/]*/,\n    }),\n\n    query: makeDefaultType({}),\n\n    hash: makeDefaultType({\n      inherit: false,\n    }),\n\n    int: makeDefaultType({\n      decode: (val: string) => parseInt(val, 10),\n      is: function(val: any) {\n        return !isNullOrUndefined(val) && this.decode(val.toString()) === val;\n      },\n      pattern: /-?\\d+/,\n    }),\n\n    bool: makeDefaultType({\n      encode: (val: any) => val && 1 || 0,\n      decode: (val: string) => parseInt(val, 10) !== 0,\n      is: is(Boolean),\n      pattern: /0|1/\n    }),\n\n    date: makeDefaultType({\n      encode: function(val: any) {\n        return !this.is(val) ? undefined : [\n          val.getFullYear(),\n          ('0' + (val.getMonth() + 1)).slice(-2),\n          ('0' + val.getDate()).slice(-2)\n        ].join(\"-\");\n      },\n      decode: function(val: string) {\n        if (this.is(val)) return <any> val as Date;\n        let match = this.capture.exec(val);\n        return match ? new Date(match[1], match[2] - 1, match[3]) : undefined;\n      },\n      is: (val: any) => val instanceof Date && !isNaN(val.valueOf()),\n      equals(l: any, r: any) {\n        return ['getFullYear', 'getMonth', 'getDate']\n            .reduce((acc, fn) => acc && l[fn]() === r[fn](), true)\n      },\n      pattern: /[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,\n      capture: /([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/\n    }),\n\n    json: makeDefaultType({\n      encode: toJson,\n      decode: fromJson,\n      is: is(Object),\n      equals: equals,\n      pattern: /[^/]*/\n    }),\n\n    // does not encode/decode\n    any: makeDefaultType({\n      encode: identity,\n      decode: identity,\n      is: () => true,\n      equals: equals,\n    }),\n  })\n\n}\n\ninitDefaultTypes();\n\n","/**\n * @coreapi\n * @module params\n */\n/** */\nimport {extend, ancestors, Obj} from \"../common/common\";\nimport {StateObject} from \"../state/stateObject\";\n\n/** @internalapi */\nexport class StateParams {\n  [key: string]: any;\n\n  constructor(params: Obj = {}) {\n    extend(this, params);\n  }\n\n  /**\n   * Merges a set of parameters with all parameters inherited between the common parents of the\n   * current state and a given destination state.\n   *\n   * @param {Object} newParams The set of parameters which will be composited with inherited params.\n   * @param {Object} $current Internal definition of object representing the current state.\n   * @param {Object} $to Internal definition of object representing state to transition to.\n   */\n  $inherit(newParams: Obj, $current: StateObject, $to: StateObject) {\n    let parents = ancestors($current, $to),\n        parentParams: string[],\n        inherited: Obj = {},\n        inheritList: string[] = [];\n\n    for (let i in parents) {\n      if (!parents[i] || !parents[i].params) continue;\n      parentParams = Object.keys(parents[i].params);\n      if (!parentParams.length) continue;\n\n      for (let j in parentParams) {\n        if (inheritList.indexOf(parentParams[j]) >= 0) continue;\n        inheritList.push(parentParams[j]);\n        inherited[parentParams[j]] = this[parentParams[j]];\n      }\n    }\n    return extend({}, inherited, newParams);\n  };\n}\n\n","/** @module state */ /** for typedoc */\nimport {isString} from \"../common/predicates\";\nimport {StateOrName} from \"./interface\";\nimport {StateObject} from \"./stateObject\";\nimport {values} from \"../common/common\";\n\nexport class StateMatcher {\n  constructor (private _states: { [key: string]: StateObject }) { }\n  \n  isRelative(stateName: string) {\n    stateName = stateName || \"\";\n    return stateName.indexOf(\".\") === 0 || stateName.indexOf(\"^\") === 0;\n  }\n\n\n  find(stateOrName: StateOrName, base?: StateOrName, matchGlob = true): StateObject {\n    if (!stateOrName && stateOrName !== \"\") return undefined;\n    let isStr = isString(stateOrName);\n    let name: string = isStr ? stateOrName : (<any>stateOrName).name;\n\n    if (this.isRelative(name)) name = this.resolvePath(name, base);\n    let state = this._states[name];\n\n    if (state && (isStr || (!isStr && (state === stateOrName || state.self === stateOrName)))) {\n      return state;\n    } else if (isStr && matchGlob) {\n      let _states = values(this._states);\n      let matches = _states.filter(state =>\n          state.__stateObjectCache.nameGlob &&\n          state.__stateObjectCache.nameGlob.matches(name)\n      );\n\n      if (matches.length > 1) {\n        console.log(`stateMatcher.find: Found multiple matches for ${name} using glob: `, matches.map(match => match.name));\n      }\n      return matches[0];\n    }\n    return undefined;\n  }\n\n  resolvePath(name: string, base: StateOrName) {\n    if (!base) throw new Error(`No reference point given for path '${name}'`);\n    \n    let baseState: StateObject = this.find(base);\n\n    let splitName = name.split(\".\"), i = 0, pathLength = splitName.length, current = baseState;\n\n    for (; i < pathLength; i++) {\n      if (splitName[i] === \"\" && i === 0) {\n        current = baseState;\n        continue;\n      }\n      if (splitName[i] === \"^\") {\n        if (!current.parent) throw new Error(`Path '${name}' not valid for state '${baseState.name}'`);\n        current = current.parent;\n        continue;\n      }\n      break;\n    }\n    let relName = splitName.slice(i).join(\".\");\n    return current.name + (current.name && relName ? \".\" : \"\") + relName;\n  }\n}\n","/** @module state */ /** for typedoc */\nimport { inArray } from \"../common/common\";\nimport { isString } from \"../common/predicates\";\nimport { StateDeclaration, _StateDeclaration } from \"./interface\";\nimport { StateObject } from \"./stateObject\";\nimport { StateBuilder } from \"./stateBuilder\";\nimport { StateRegistryListener, StateRegistry } from \"./stateRegistry\";\nimport { Disposable } from \"../interface\";\nimport { UrlRouter } from \"../url/urlRouter\";\nimport { prop } from \"../common/hof\";\nimport { StateMatcher } from \"./stateMatcher\";\n\n/** @internalapi */\nexport class StateQueueManager implements Disposable {\n  queue: StateObject[];\n  matcher: StateMatcher;\n\n  constructor(\n      private $registry: StateRegistry,\n      private $urlRouter: UrlRouter,\n      public states: { [key: string]: StateObject; },\n      public builder: StateBuilder,\n      public listeners: StateRegistryListener[]) {\n    this.queue = [];\n    this.matcher = $registry.matcher;\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.queue = [];\n  }\n\n  register(stateDecl: _StateDeclaration) {\n    let queue = this.queue;\n    let state = StateObject.create(stateDecl);\n    let name = state.name;\n\n    if (!isString(name)) throw new Error(\"State must have a valid name\");\n    if (this.states.hasOwnProperty(name) || inArray(queue.map(prop('name')), name))\n      throw new Error(`State '${name}' is already defined`);\n\n    queue.push(state);\n    this.flush();\n\n    return state;\n  }\n\n  flush() {\n    let {queue, states, builder} = this;\n    let registered: StateObject[] = [], // states that got registered\n        orphans: StateObject[] = [], // states that don't yet have a parent registered\n        previousQueueLength = {}; // keep track of how long the queue when an orphan was first encountered\n    const getState = (name) =>\n        this.states.hasOwnProperty(name) && this.states[name];\n\n    while (queue.length > 0) {\n      let state: StateObject = queue.shift();\n      let name = state.name;\n      let result: StateObject = builder.build(state);\n      let orphanIdx: number = orphans.indexOf(state);\n\n      if (result) {\n        let existingState = getState(name);\n        if (existingState && existingState.name === name) {\n          throw new Error(`State '${name}' is already defined`);\n        }\n\n        let existingFutureState = getState(name + \".**\");\n        if (existingFutureState) {\n          // Remove future state of the same name\n          this.$registry.deregister(existingFutureState);\n        }\n\n        states[name] = state;\n        this.attachRoute(state);\n        if (orphanIdx >= 0) orphans.splice(orphanIdx, 1);\n        registered.push(state);\n        continue;\n      }\n\n      let prev = previousQueueLength[name];\n      previousQueueLength[name] = queue.length;\n      if (orphanIdx >= 0 && prev === queue.length) {\n        // Wait until two consecutive iterations where no additional states were dequeued successfully.\n        // throw new Error(`Cannot register orphaned state '${name}'`);\n        queue.push(state);\n        return states;\n      } else if (orphanIdx < 0) {\n        orphans.push(state);\n      }\n\n      queue.push(state);\n    }\n\n    if (registered.length) {\n      this.listeners.forEach(listener => listener(\"registered\", registered.map(s => s.self)));\n    }\n\n    return states;\n  }\n\n  attachRoute(state: StateObject) {\n    if (state.abstract || !state.url) return;\n\n    this.$urlRouter.rule(this.$urlRouter.urlRuleFactory.create(state));\n  }\n}\n","/**\n * @coreapi\n * @module state\n */ /** for typedoc */\n\nimport { StateObject } from \"./stateObject\";\nimport { StateMatcher } from \"./stateMatcher\";\nimport { StateBuilder } from \"./stateBuilder\";\nimport { StateQueueManager } from \"./stateQueueManager\";\nimport { StateDeclaration, _StateDeclaration } from \"./interface\";\nimport { BuilderFunction } from \"./stateBuilder\";\nimport { StateOrName } from \"./interface\";\nimport { removeFrom } from \"../common/common\";\nimport { UIRouter } from \"../router\";\nimport { propEq } from \"../common/hof\";\n\n/**\n * The signature for the callback function provided to [[StateRegistry.onStatesChanged]].\n *\n * This callback receives two parameters:\n *\n * @param event a string; either \"registered\" or \"deregistered\"\n * @param states the list of [[StateDeclaration]]s that were registered (or deregistered).\n */\nexport type StateRegistryListener = (event: \"registered\"|\"deregistered\", states: StateDeclaration[]) => void;\n\nexport class StateRegistry {\n  private _root: StateObject;\n  private states: { [key: string]: StateObject } = {};\n\n  matcher: StateMatcher;\n  private builder: StateBuilder;\n  stateQueue: StateQueueManager;\n\n  listeners: StateRegistryListener[] = [];\n\n  /** @internalapi */\n  constructor(private _router: UIRouter) {\n    this.matcher = new StateMatcher(this.states);\n    this.builder = new StateBuilder(this.matcher, _router.urlMatcherFactory);\n    this.stateQueue = new StateQueueManager(this, _router.urlRouter, this.states, this.builder, this.listeners);\n    this._registerRoot();\n  }\n\n  /** @internalapi */\n  private _registerRoot() {\n    let rootStateDef: StateDeclaration = {\n      name: '',\n      url: '^',\n      views: null,\n      params: {\n        '#': { value: null, type: 'hash', dynamic: true }\n      },\n      abstract: true\n    };\n\n    let _root = this._root = this.stateQueue.register(rootStateDef);\n    _root.navigable = null;\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.stateQueue.dispose();\n    this.listeners = [];\n    this.get().forEach(state => this.get(state) && this.deregister(state));\n  }\n\n  /**\n   * Listen for a State Registry events\n   *\n   * Adds a callback that is invoked when states are registered or deregistered with the StateRegistry.\n   *\n   * #### Example:\n   * ```js\n   * let allStates = registry.get();\n   *\n   * // Later, invoke deregisterFn() to remove the listener\n   * let deregisterFn = registry.onStatesChanged((event, states) => {\n   *   switch(event) {\n   *     case: 'registered':\n   *       states.forEach(state => allStates.push(state));\n   *       break;\n   *     case: 'deregistered':\n   *       states.forEach(state => {\n   *         let idx = allStates.indexOf(state);\n   *         if (idx !== -1) allStates.splice(idx, 1);\n   *       });\n   *       break;\n   *   }\n   * });\n   * ```\n   *\n   * @param listener a callback function invoked when the registered states changes.\n   *        The function receives two parameters, `event` and `state`.\n   *        See [[StateRegistryListener]]\n   * @return a function that deregisters the listener\n   */\n  onStatesChanged(listener: StateRegistryListener): () => void {\n    this.listeners.push(listener);\n    return function deregisterListener() {\n      removeFrom(this.listeners)(listener);\n    }.bind(this);\n  }\n\n  /**\n   * Gets the implicit root state\n   *\n   * Gets the root of the state tree.\n   * The root state is implicitly created by UI-Router.\n   * Note: this returns the internal [[StateObject]] representation, not a [[StateDeclaration]]\n   *\n   * @return the root [[StateObject]]\n   */\n  root() {\n    return this._root;\n  }\n\n  /**\n   * Adds a state to the registry\n   *\n   * Registers a [[StateDeclaration]] or queues it for registration.\n   *\n   * Note: a state will be queued if the state's parent isn't yet registered.\n   *\n   * @param stateDefinition the definition of the state to register.\n   * @returns the internal [[StateObject]] object.\n   *          If the state was successfully registered, then the object is fully built (See: [[StateBuilder]]).\n   *          If the state was only queued, then the object is not fully built.\n   */\n  register(stateDefinition: _StateDeclaration): StateObject {\n    return this.stateQueue.register(stateDefinition);\n  }\n\n  /** @hidden */\n  private _deregisterTree(state: StateObject) {\n    let all = this.get().map(s => s.$$state());\n    const getChildren = (states: StateObject[]) => {\n      let children = all.filter(s => states.indexOf(s.parent) !== -1);\n      return children.length === 0 ? children : children.concat(getChildren(children));\n    };\n\n    let children = getChildren([state]);\n    let deregistered: StateObject[] = [state].concat(children).reverse();\n\n    deregistered.forEach(state => {\n      let $ur = this._router.urlRouter;\n      // Remove URL rule\n      $ur.rules().filter(propEq(\"state\", state)).forEach($ur.removeRule.bind($ur));\n      // Remove state from registry\n      delete this.states[state.name];\n    });\n\n    return deregistered;\n  }\n\n  /**\n   * Removes a state from the registry\n   *\n   * This removes a state from the registry.\n   * If the state has children, they are are also removed from the registry.\n   *\n   * @param stateOrName the state's name or object representation\n   * @returns {StateObject[]} a list of removed states\n   */\n  deregister(stateOrName: StateOrName) {\n    let _state = this.get(stateOrName);\n    if (!_state) throw new Error(\"Can't deregister state; not found: \" + stateOrName);\n    let deregisteredStates = this._deregisterTree(_state.$$state());\n\n    this.listeners.forEach(listener => listener(\"deregistered\", deregisteredStates.map(s => s.self)));\n    return deregisteredStates;\n  }\n\n  /**\n   * Gets all registered states\n   *\n   * Calling this method with no arguments will return a list of all the states that are currently registered.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @return a list of [[StateDeclaration]]s\n   */\n  get(): StateDeclaration[];\n\n  /**\n   * Gets a registered state\n   *\n   * Given a state or a name, finds and returns the [[StateDeclaration]] from the registry.\n   * Note: this does not return states that are *queued* but not yet registered.\n   *\n   * @param stateOrName either the name of a state, or a state object.\n   * @return a registered [[StateDeclaration]] that matched the `stateOrName`, or null if the state isn't registered.\n   */\n  get(stateOrName: StateOrName, base?: StateOrName): StateDeclaration;\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    if (arguments.length === 0) \n      return <StateDeclaration[]> Object.keys(this.states).map(name => this.states[name].self);\n    let found = this.matcher.find(stateOrName, base);\n    return found && found.self || null;\n  }\n\n  decorator(name: string, func: BuilderFunction) {\n    return this.builder.builder(name, func);\n  }\n}","/**\n * @internalapi\n * @module url\n */ /** for typedoc */\nimport { forEach, extend } from \"../common/common\";\nimport { isObject, isDefined, isFunction, isString } from \"../common/predicates\";\nimport { UrlMatcher } from \"./urlMatcher\";\nimport { Param, DefType } from \"../params/param\";\nimport { ParamTypes } from \"../params/paramTypes\";\nimport { ParamTypeDefinition } from \"../params/interface\";\nimport { Disposable } from \"../interface\";\nimport { ParamType } from \"../params/paramType\";\nimport { ParamFactory, UrlMatcherConfig } from \"./interface\";\n\n/**\n * Factory for [[UrlMatcher]] instances.\n *\n * The factory is available to ng1 services as\n * `$urlMatcherFactor` or ng1 providers as `$urlMatcherFactoryProvider`.\n */\nexport class UrlMatcherFactory implements Disposable, UrlMatcherConfig {\n  /** @hidden */ paramTypes = new ParamTypes();\n  /** @hidden */ _isCaseInsensitive: boolean = false;\n  /** @hidden */ _isStrictMode: boolean = true;\n  /** @hidden */ _defaultSquashPolicy: (boolean|string) = false;\n\n  constructor() {\n    extend(this, { UrlMatcher, Param });\n  }\n\n  /** @inheritdoc */\n  caseInsensitive(value?: boolean): boolean {\n    return this._isCaseInsensitive = isDefined(value) ? value : this._isCaseInsensitive;\n  }\n\n  /** @inheritdoc */\n  strictMode(value?: boolean): boolean {\n    return this._isStrictMode = isDefined(value) ? value : this._isStrictMode;\n  }\n\n  /** @inheritdoc */\n  defaultSquashPolicy(value?: (boolean|string)) {\n    if (isDefined(value) && value !== true && value !== false && !isString(value))\n      throw new Error(`Invalid squash policy: ${value}. Valid policies: false, true, arbitrary-string`);\n    return this._defaultSquashPolicy = isDefined(value) ? value : this._defaultSquashPolicy;\n  }\n\n  /** @hidden */\n  private _getConfig = (config) =>\n      extend({ strict: this._isStrictMode, caseInsensitive: this._isCaseInsensitive }, config);\n\n  /**\n   * Creates a [[UrlMatcher]] for the specified pattern.\n   *\n   * @param pattern  The URL pattern.\n   * @param config  The config object hash.\n   * @returns The UrlMatcher.\n   */\n  compile(pattern: string, config?: { [key: string]: any }) {\n    return new UrlMatcher(pattern, this.paramTypes, this.paramFactory, this._getConfig(config));\n  }\n\n  /**\n   * Returns true if the specified object is a [[UrlMatcher]], or false otherwise.\n   *\n   * @param object  The object to perform the type check against.\n   * @returns `true` if the object matches the `UrlMatcher` interface, by\n   *          implementing all the same methods.\n   */\n  isMatcher(object: any): boolean {\n    // TODO: typeof?\n    if (!isObject(object)) return false;\n    let result = true;\n\n    forEach(UrlMatcher.prototype, (val, name) => {\n      if (isFunction(val)) result = result && (isDefined(object[name]) && isFunction(object[name]));\n    });\n    return result;\n  };\n\n  /**\n   * Creates and registers a custom [[ParamType]] object\n   *\n   * A [[ParamType]] can be used to generate URLs with typed parameters.\n   *\n   * @param name  The type name.\n   * @param definition The type definition. See [[ParamTypeDefinition]] for information on the values accepted.\n   * @param definitionFn A function that is injected before the app runtime starts.\n   *        The result of this function should be a [[ParamTypeDefinition]].\n   *        The result is merged into the existing `definition`.\n   *        See [[ParamType]] for information on the values accepted.\n   *\n   * @returns - if a type was registered: the [[UrlMatcherFactory]]\n   *   - if only the `name` parameter was specified: the currently registered [[ParamType]] object, or undefined\n   *\n   * Note: Register custom types *before using them* in a state definition.\n   *\n   * See [[ParamTypeDefinition]] for examples\n   */\n  type(name: string, definition?: ParamTypeDefinition, definitionFn?: () => ParamTypeDefinition) {\n    let type = this.paramTypes.type(name, definition, definitionFn);\n    return !isDefined(definition) ? type : this;\n  };\n\n  /** @hidden */\n  $get() {\n    this.paramTypes.enqueue = false;\n    this.paramTypes._flushTypeQueue();\n    return this;\n  };\n\n  /** @internalapi Creates a new [[Param]] for a given location (DefType) */\n  paramFactory: ParamFactory = {\n    /** Creates a new [[Param]] from a CONFIG block */\n    fromConfig: (id: string, type: ParamType, config: any) =>\n        new Param(id, type, config, DefType.CONFIG, this),\n\n    /** Creates a new [[Param]] from a url PATH */\n    fromPath: (id: string, type: ParamType, config: any) =>\n        new Param(id, type, config, DefType.PATH, this),\n\n    /** Creates a new [[Param]] from a url SEARCH */\n    fromSearch: (id: string, type: ParamType, config: any) =>\n        new Param(id, type, config, DefType.SEARCH, this),\n  };\n\n  /** @internalapi */\n  dispose() {\n    this.paramTypes.dispose();\n  }\n}\n","/**\n * @coreapi\n * @module url\n */ /** */\nimport { UrlMatcher } from \"./urlMatcher\";\nimport { isString, isDefined, isFunction, isState } from \"../common/predicates\";\nimport { UIRouter } from \"../router\";\nimport { identity, extend } from \"../common/common\";\nimport { is, pattern } from \"../common/hof\";\nimport { StateObject } from \"../state/stateObject\";\nimport { RawParams } from \"../params/interface\";\nimport {\n    UrlRule, UrlRuleMatchFn, UrlRuleHandlerFn, UrlRuleType, UrlParts, MatcherUrlRule, StateRule, RegExpRule\n} from \"./interface\";\n\n/**\n * Creates a [[UrlRule]]\n *\n * Creates a [[UrlRule]] from a:\n *\n * - `string`\n * - [[UrlMatcher]]\n * - `RegExp`\n * - [[StateObject]]\n * @internalapi\n */\nexport class UrlRuleFactory {\n  constructor(public router: UIRouter) { }\n\n  compile(str: string) {\n    return this.router.urlMatcherFactory.compile(str);\n  }\n\n  static isUrlRule = obj =>\n      obj && ['type', 'match', 'handler'].every(key => isDefined(obj[key]));\n\n  create(what: string|UrlMatcher|StateObject|RegExp|UrlRuleMatchFn, handler?: string|UrlRuleHandlerFn): UrlRule {\n    const makeRule = pattern([\n      [isString,       (_what: string)         => makeRule(this.compile(_what))],\n      [is(UrlMatcher), (_what: UrlMatcher)     => this.fromUrlMatcher(_what, handler)],\n      [isState,        (_what: StateObject)          => this.fromState(_what, this.router)],\n      [is(RegExp),     (_what: RegExp)         => this.fromRegExp(_what, handler)],\n      [isFunction,     (_what: UrlRuleMatchFn) => new BaseUrlRule(_what, handler as UrlRuleHandlerFn)],\n    ]);\n\n    let rule = makeRule(what);\n    if (!rule) throw new Error(\"invalid 'what' in when()\");\n    return rule;\n  }\n\n  /**\n   * A UrlRule which matches based on a UrlMatcher\n   *\n   * The `handler` may be either a `string`, a [[UrlRuleHandlerFn]] or another [[UrlMatcher]]\n   *\n   * ## Handler as a function\n   *\n   * If `handler` is a function, the function is invoked with:\n   *\n   * - matched parameter values ([[RawParams]] from [[UrlMatcher.exec]])\n   * - url: the current Url ([[UrlParts]])\n   * - router: the router object ([[UIRouter]])\n   *\n   * #### Example:\n   * ```js\n   * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n   * var rule = factory.fromUrlMatcher(urlMatcher, match => \"/home/\" + match.fooId + \"/\" + match.barId);\n   * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n   * var result = rule.handler(match); // '/home/123/456'\n   * ```\n   *\n   * ## Handler as UrlMatcher\n   *\n   * If `handler` is a UrlMatcher, the handler matcher is used to create the new url.\n   * The `handler` UrlMatcher is formatted using the matched param from the first matcher.\n   * The url is replaced with the result.\n   *\n   * #### Example:\n   * ```js\n   * var urlMatcher = $umf.compile(\"/foo/:fooId/:barId\");\n   * var handler = $umf.compile(\"/home/:fooId/:barId\");\n   * var rule = factory.fromUrlMatcher(urlMatcher, handler);\n   * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n   * var result = rule.handler(match); // '/home/123/456'\n   * ```\n   */\n  fromUrlMatcher(urlMatcher: UrlMatcher, handler: string|UrlMatcher|UrlRuleHandlerFn): MatcherUrlRule {\n    let _handler: UrlRuleHandlerFn = handler as any;\n    if (isString(handler)) handler = this.router.urlMatcherFactory.compile(handler);\n    if (is(UrlMatcher)(handler)) _handler = (match: RawParams) => (handler as UrlMatcher).format(match);\n\n    function match(url: UrlParts) {\n      let match = urlMatcher.exec(url.path, url.search, url.hash);\n      return urlMatcher.validates(match) && match;\n    }\n\n    // Prioritize URLs, lowest to highest:\n    // - Some optional URL parameters, but none matched\n    // - No optional parameters in URL\n    // - Some optional parameters, some matched\n    // - Some optional parameters, all matched\n    function matchPriority(params: RawParams): number {\n      let optional = urlMatcher.parameters().filter(param => param.isOptional);\n      if (!optional.length) return 0.000001;\n      let matched = optional.filter(param => params[param.id]);\n      return matched.length / optional.length;\n    }\n\n    let details = { urlMatcher, matchPriority, type: \"URLMATCHER\" };\n    return extend(new BaseUrlRule(match, _handler), details) as MatcherUrlRule;\n  }\n\n\n  /**\n   * A UrlRule which matches a state by its url\n   *\n   * #### Example:\n   * ```js\n   * var rule = factory.fromState($state.get('foo'), router);\n   * var match = rule.match('/foo/123/456'); // results in { fooId: '123', barId: '456' }\n   * var result = rule.handler(match);\n   * // Starts a transition to 'foo' with params: { fooId: '123', barId: '456' }\n   * ```\n   */\n  fromState(state: StateObject, router: UIRouter): StateRule {\n    /**\n     * Handles match by transitioning to matched state\n     *\n     * First checks if the router should start a new transition.\n     * A new transition is not required if the current state's URL\n     * and the new URL are already identical\n     */\n    const handler = (match: RawParams) => {\n      let $state = router.stateService;\n      let globals = router.globals;\n      if ($state.href(state, match) !== $state.href(globals.current, globals.params)) {\n        $state.transitionTo(state, match, { inherit: true, source: \"url\" });\n      }\n    };\n\n    let details = { state, type: \"STATE\" };\n    return extend(this.fromUrlMatcher(state.url, handler), details) as StateRule;\n  }\n\n  /**\n   * A UrlRule which matches based on a regular expression\n   *\n   * The `handler` may be either a [[UrlRuleHandlerFn]] or a string.\n   *\n   * ## Handler as a function\n   *\n   * If `handler` is a function, the function is invoked with:\n   *\n   * - regexp match array (from `regexp`)\n   * - url: the current Url ([[UrlParts]])\n   * - router: the router object ([[UIRouter]])\n   *\n   * #### Example:\n   * ```js\n   * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, match => \"/home/\" + match[1])\n   * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n   * var result = rule.handler(match); // '/home/bar'\n   * ```\n   *\n   * ## Handler as string\n   *\n   * If `handler` is a string, the url is *replaced by the string* when the Rule is invoked.\n   * The string is first interpolated using `string.replace()` style pattern.\n   *\n   * #### Example:\n   * ```js\n   * var rule = factory.fromRegExp(/^\\/foo\\/(bar|baz)$/, \"/home/$1\")\n   * var match = rule.match('/foo/bar'); // results in [ '/foo/bar', 'bar' ]\n   * var result = rule.handler(match); // '/home/bar'\n   * ```\n   */\n  fromRegExp(regexp: RegExp, handler: string|UrlRuleHandlerFn): RegExpRule {\n    if (regexp.global || regexp.sticky) throw new Error(\"Rule RegExp must not be global or sticky\");\n\n    /**\n     * If handler is a string, the url will be replaced by the string.\n     * If the string has any String.replace() style variables in it (like `$2`),\n     * they will be replaced by the captures from [[match]]\n     */\n    const redirectUrlTo = (match: RegExpExecArray) =>\n        // Interpolates matched values into $1 $2, etc using a String.replace()-style pattern\n        (handler as string).replace(/\\$(\\$|\\d{1,2})/, (m, what) =>\n            match[what === '$' ? 0 : Number(what)]);\n\n    const _handler = isString(handler) ? redirectUrlTo : handler;\n\n    const match = (url: UrlParts): RegExpExecArray =>\n        regexp.exec(url.path);\n\n    let details = { regexp, type: \"REGEXP\" };\n    return extend(new BaseUrlRule(match, _handler), details) as RegExpRule\n  }\n}\n\n/**\n * A base rule which calls `match`\n *\n * The value from the `match` function is passed through to the `handler`.\n * @internalapi\n */\nexport class BaseUrlRule implements UrlRule {\n  $id: number;\n  priority: number;\n  type: UrlRuleType = \"RAW\";\n  handler: UrlRuleHandlerFn;\n  matchPriority = (match) => 0 - this.$id;\n\n  constructor(public match: UrlRuleMatchFn, handler?: UrlRuleHandlerFn) {\n    this.handler = handler || identity;\n  }\n}","/**\n * @coreapi\n * @module view\n */ /** for typedoc */\nimport {equals, applyPairs, removeFrom, TypedMap} from \"../common/common\";\nimport {curry, prop} from \"../common/hof\";\nimport {isString, isArray} from \"../common/predicates\";\nimport {trace} from \"../common/trace\";\nimport {PathNode} from \"../path/pathNode\";\n\nimport {ActiveUIView, ViewContext, ViewConfig} from \"./interface\";\nimport {_ViewDeclaration} from \"../state/interface\";\n\nexport type ViewConfigFactory = (path: PathNode[], decl: _ViewDeclaration) => ViewConfig|ViewConfig[];\n\nexport interface ViewServicePluginAPI {\n  _rootViewContext(context?: ViewContext): ViewContext;\n  _viewConfigFactory(viewType: string, factory: ViewConfigFactory);\n  _registeredUIViews(): ActiveUIView[];\n  _activeViewConfigs(): ViewConfig[];\n}\n\n/**\n * The View service\n *\n * This service pairs existing `ui-view` components (which live in the DOM)\n * with view configs (from the state declaration objects: [[StateDeclaration.views]]).\n *\n * - After a successful Transition, the views from the newly entered states are activated via [[activateViewConfig]].\n *   The views from exited states are deactivated via [[deactivateViewConfig]].\n *   (See: the [[registerActivateViews]] Transition Hook)\n *\n * - As `ui-view` components pop in and out of existence, they register themselves using [[registerUIView]].\n *\n * - When the [[sync]] function is called, the registered `ui-view`(s) ([[ActiveUIView]])\n * are configured with the matching [[ViewConfig]](s)\n *\n */\nexport class ViewService {\n  private _uiViews: ActiveUIView[] = [];\n  private _viewConfigs: ViewConfig[] = [];\n  private _rootContext: ViewContext;\n  private _viewConfigFactories: { [key: string]: ViewConfigFactory } = {};\n\n  constructor() { }\n\n  public _pluginapi: ViewServicePluginAPI = {\n    _rootViewContext: this._rootViewContext.bind(this),\n    _viewConfigFactory: this._viewConfigFactory.bind(this),\n    _registeredUIViews: () => this._uiViews,\n    _activeViewConfigs: () => this._viewConfigs,\n  };\n\n  private _rootViewContext(context?: ViewContext): ViewContext {\n    return this._rootContext = context || this._rootContext;\n  };\n\n  private _viewConfigFactory(viewType: string, factory: ViewConfigFactory) {\n    this._viewConfigFactories[viewType] = factory;\n  }\n\n  createViewConfig(path: PathNode[], decl: _ViewDeclaration): ViewConfig[] {\n    let cfgFactory = this._viewConfigFactories[decl.$type];\n    if (!cfgFactory) throw new Error(\"ViewService: No view config factory registered for type \" + decl.$type);\n    let cfgs = cfgFactory(path, decl);\n    return isArray(cfgs) ? cfgs : [cfgs];\n  }\n  \n  /**\n   * Deactivates a ViewConfig.\n   *\n   * This function deactivates a `ViewConfig`.\n   * After calling [[sync]], it will un-pair from any `ui-view` with which it is currently paired.\n   *\n   * @param viewConfig The ViewConfig view to deregister.\n   */\n  deactivateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"<- Removing\", viewConfig);\n    removeFrom(this._viewConfigs, viewConfig);\n  }\n\n  activateViewConfig(viewConfig: ViewConfig) {\n    trace.traceViewServiceEvent(\"-> Registering\", <any> viewConfig);\n    this._viewConfigs.push(viewConfig);\n  }\n\n  /**\n   * Given a ui-view and a ViewConfig, determines if they \"match\".\n   *\n   * A ui-view has a fully qualified name (fqn) and a context object.  The fqn is built from its overall location in\n   * the DOM, describing its nesting relationship to any parent ui-view tags it is nested inside of.\n   *\n   * A ViewConfig has a target ui-view name and a context anchor.  The ui-view name can be a simple name, or\n   * can be a segmented ui-view path, describing a portion of a ui-view fqn.\n   *\n   * In order for a ui-view to match ViewConfig, ui-view's $type must match the ViewConfig's $type\n   *\n   * If the ViewConfig's target ui-view name is a simple name (no dots), then a ui-view matches if:\n   * - the ui-view's name matches the ViewConfig's target name\n   * - the ui-view's context matches the ViewConfig's anchor\n   *\n   * If the ViewConfig's target ui-view name is a segmented name (with dots), then a ui-view matches if:\n   * - There exists a parent ui-view where:\n   *    - the parent ui-view's name matches the first segment (index 0) of the ViewConfig's target name\n   *    - the parent ui-view's context matches the ViewConfig's anchor\n   * - And the remaining segments (index 1..n) of the ViewConfig's target name match the tail of the ui-view's fqn\n   *\n   * Example:\n   *\n   * DOM:\n   * <ui-view>                        <!-- created in the root context (name: \"\") -->\n   *   <ui-view name=\"foo\">                <!-- created in the context named: \"A\"      -->\n   *     <ui-view>                    <!-- created in the context named: \"A.B\"    -->\n   *       <ui-view name=\"bar\">            <!-- created in the context named: \"A.B.C\"  -->\n   *       </ui-view>\n   *     </ui-view>\n   *   </ui-view>\n   * </ui-view>\n   *\n   * uiViews: [\n   *  { fqn: \"$default\",                  creationContext: { name: \"\" } },\n   *  { fqn: \"$default.foo\",              creationContext: { name: \"A\" } },\n   *  { fqn: \"$default.foo.$default\",     creationContext: { name: \"A.B\" } }\n   *  { fqn: \"$default.foo.$default.bar\", creationContext: { name: \"A.B.C\" } }\n   * ]\n   *\n   * These four view configs all match the ui-view with the fqn: \"$default.foo.$default.bar\":\n   *\n   * - ViewConfig1: { uiViewName: \"bar\",                       uiViewContextAnchor: \"A.B.C\" }\n   * - ViewConfig2: { uiViewName: \"$default.bar\",              uiViewContextAnchor: \"A.B\" }\n   * - ViewConfig3: { uiViewName: \"foo.$default.bar\",          uiViewContextAnchor: \"A\" }\n   * - ViewConfig4: { uiViewName: \"$default.foo.$default.bar\", uiViewContextAnchor: \"\" }\n   *\n   * Using ViewConfig3 as an example, it matches the ui-view with fqn \"$default.foo.$default.bar\" because:\n   * - The ViewConfig's segmented target name is: [ \"foo\", \"$default\", \"bar\" ]\n   * - There exists a parent ui-view (which has fqn: \"$default.foo\") where:\n   *    - the parent ui-view's name \"foo\" matches the first segment \"foo\" of the ViewConfig's target name\n   *    - the parent ui-view's context \"A\" matches the ViewConfig's anchor context \"A\"\n   * - And the remaining segments [ \"$default\", \"bar\" ].join(\".\"_ of the ViewConfig's target name match\n   *   the tail of the ui-view's fqn \"default.bar\"\n   *\n   * @internalapi\n   */\n  static matches = (uiViewsByFqn: TypedMap<ActiveUIView>, uiView: ActiveUIView) => (viewConfig: ViewConfig) => {\n    // Don't supply an ng1 ui-view with an ng2 ViewConfig, etc\n    if (uiView.$type !== viewConfig.viewDecl.$type) return false;\n\n    // Split names apart from both viewConfig and uiView into segments\n    let vc = viewConfig.viewDecl;\n    let vcSegments = vc.$uiViewName.split(\".\");\n    let uivSegments = uiView.fqn.split(\".\");\n\n    // Check if the tails of the segment arrays match. ex, these arrays' tails match:\n    // vc: [\"foo\", \"bar\"], uiv fqn: [\"$default\", \"foo\", \"bar\"]\n    if (!equals(vcSegments, uivSegments.slice(0 - vcSegments.length)))\n      return false;\n\n    // Now check if the fqn ending at the first segment of the viewConfig matches the context:\n    // [\"$default\", \"foo\"].join(\".\") == \"$default.foo\", does the ui-view $default.foo context match?\n    let negOffset = (1 - vcSegments.length) || undefined;\n    let fqnToFirstSegment = uivSegments.slice(0, negOffset).join(\".\");\n    let uiViewContext = uiViewsByFqn[fqnToFirstSegment].creationContext;\n    return vc.$uiViewContextAnchor === (uiViewContext && uiViewContext.name);\n  }\n\n  sync() {\n    let uiViewsByFqn: TypedMap<ActiveUIView> =\n        this._uiViews.map(uiv => [uiv.fqn, uiv]).reduce(applyPairs, <any> {});\n\n    // Return a weighted depth value for a uiView.\n    // The depth is the nesting depth of ui-views (based on FQN; times 10,000)\n    // plus the depth of the state that is populating the uiView\n    function uiViewDepth(uiView: ActiveUIView) {\n      const stateDepth = (context: ViewContext) =>\n          context && context.parent ? stateDepth(context.parent) + 1 : 1;\n      return (uiView.fqn.split(\".\").length * 10000) + stateDepth(uiView.creationContext);\n    }\n\n    // Return the ViewConfig's context's depth in the context tree.\n    function viewConfigDepth(config: ViewConfig) {\n      let context: ViewContext = config.viewDecl.$context, count = 0;\n      while (++count && context.parent) context = context.parent;\n      return count;\n    }\n\n    // Given a depth function, returns a compare function which can return either ascending or descending order\n    const depthCompare = curry((depthFn, posNeg, left, right) => posNeg * (depthFn(left) - depthFn(right)));\n\n    const matchingConfigPair = (uiView: ActiveUIView) => {\n      let matchingConfigs = this._viewConfigs.filter(ViewService.matches(uiViewsByFqn, uiView));\n      if (matchingConfigs.length > 1) {\n        // This is OK.  Child states can target a ui-view that the parent state also targets (the child wins)\n        // Sort by depth and return the match from the deepest child\n        // console.log(`Multiple matching view configs for ${uiView.fqn}`, matchingConfigs);\n        matchingConfigs.sort(depthCompare(viewConfigDepth, -1)); // descending\n      }\n      return [uiView, matchingConfigs[0]];\n    };\n\n    const configureUIView = ([uiView, viewConfig]) => {\n      // If a parent ui-view is reconfigured, it could destroy child ui-views.\n      // Before configuring a child ui-view, make sure it's still in the active uiViews array.\n      if (this._uiViews.indexOf(uiView) !== -1)\n        uiView.configUpdated(viewConfig);\n    };\n\n    // Sort views by FQN and state depth. Process uiviews nearest the root first.\n    const pairs = this._uiViews.sort(depthCompare(uiViewDepth, 1)).map(matchingConfigPair);\n\n    trace.traceViewSync(pairs);\n\n    pairs.forEach(configureUIView);\n  };\n\n  /**\n   * Registers a `ui-view` component\n   *\n   * When a `ui-view` component is created, it uses this method to register itself.\n   * After registration the [[sync]] method is used to ensure all `ui-view` are configured with the proper [[ViewConfig]].\n   *\n   * Note: the `ui-view` component uses the `ViewConfig` to determine what view should be loaded inside the `ui-view`,\n   * and what the view's state context is.\n   *\n   * Note: There is no corresponding `deregisterUIView`.\n   *       A `ui-view` should hang on to the return value of `registerUIView` and invoke it to deregister itself.\n   *\n   * @param uiView The metadata for a UIView\n   * @return a de-registration function used when the view is destroyed.\n   */\n  registerUIView(uiView: ActiveUIView) {\n    trace.traceViewServiceUIViewEvent(\"-> Registering\", uiView);\n    let uiViews = this._uiViews;\n    const fqnAndTypeMatches = (uiv: ActiveUIView) => uiv.fqn === uiView.fqn && uiv.$type === uiView.$type;\n    if (uiViews.filter(fqnAndTypeMatches).length)\n      trace.traceViewServiceUIViewEvent(\"!!!! duplicate uiView named:\", uiView);\n\n    uiViews.push(uiView);\n    this.sync();\n\n    return () => {\n      let idx = uiViews.indexOf(uiView);\n      if (idx === -1) {\n        trace.traceViewServiceUIViewEvent(\"Tried removing non-registered uiView\", uiView);\n        return;\n      }\n      trace.traceViewServiceUIViewEvent(\"<- Deregistering\", uiView);\n      removeFrom(uiViews)(uiView);\n    };\n  };\n\n  /**\n   * Returns the list of views currently available on the page, by fully-qualified name.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  available() {\n    return this._uiViews.map(prop(\"fqn\"));\n  }\n\n  /**\n   * Returns the list of views on the page containing loaded content.\n   *\n   * @return {Array} Returns an array of fully-qualified view names.\n   */\n  active() {\n    return this._uiViews.filter(prop(\"$config\")).map(prop(\"name\"));\n  }\n\n  /**\n   * Normalizes a view's name from a state.views configuration block.\n   *\n   * This should be used by a framework implementation to calculate the values for\n   * [[_ViewDeclaration.$uiViewName]] and [[_ViewDeclaration.$uiViewContextAnchor]].\n   *\n   * @param context the context object (state declaration) that the view belongs to\n   * @param rawViewName the name of the view, as declared in the [[StateDeclaration.views]]\n   *\n   * @returns the normalized uiViewName and uiViewContextAnchor that the view targets\n   */\n  static normalizeUIViewTarget(context: ViewContext, rawViewName = \"\") {\n    // TODO: Validate incoming view name with a regexp to allow:\n    // ex: \"view.name@foo.bar\" , \"^.^.view.name\" , \"view.name@^.^\" , \"\" ,\n    // \"@\" , \"$default@^\" , \"!$default.$default\" , \"!foo.bar\"\n    let viewAtContext: string[] = rawViewName.split(\"@\");\n    let uiViewName = viewAtContext[0] || \"$default\";  // default to unnamed view\n    let uiViewContextAnchor = isString(viewAtContext[1]) ? viewAtContext[1] : \"^\";    // default to parent context\n\n    // Handle relative view-name sugar syntax.\n    // Matches rawViewName \"^.^.^.foo.bar\" into array: [\"^.^.^.foo.bar\", \"^.^.^\", \"foo.bar\"],\n    let relativeViewNameSugar = /^(\\^(?:\\.\\^)*)\\.(.*$)/.exec(uiViewName);\n    if (relativeViewNameSugar) {\n      // Clobbers existing contextAnchor (rawViewName validation will fix this)\n      uiViewContextAnchor = relativeViewNameSugar[1]; // set anchor to \"^.^.^\"\n      uiViewName = relativeViewNameSugar[2]; // set view-name to \"foo.bar\"\n    }\n\n    if (uiViewName.charAt(0) === '!') {\n      uiViewName = uiViewName.substr(1);\n      uiViewContextAnchor = \"\"; // target absolutely from root\n    }\n\n    // handle parent relative targeting \"^.^.^\"\n    let relativeMatch = /^(\\^(?:\\.\\^)*)$/;\n    if (relativeMatch.exec(uiViewContextAnchor)) {\n      let anchor = uiViewContextAnchor.split(\".\").reduce(((anchor, x) => anchor.parent), context);\n      uiViewContextAnchor = anchor.name;\n    } else if (uiViewContextAnchor === '.') {\n      uiViewContextAnchor = context.name;\n    }\n\n    return {uiViewName, uiViewContextAnchor};\n  }\n}","/**\n * @coreapi\n * @module core\n */ /** */\nimport {StateParams} from \"./params/stateParams\";\nimport {StateDeclaration} from \"./state/interface\";\nimport {StateObject} from \"./state/stateObject\";\nimport {Transition} from \"./transition/transition\";\nimport {Queue} from \"./common/queue\";\nimport {TransitionService} from \"./transition/transitionService\";\nimport {copy} from \"./common/common\";\nimport { Disposable } from './interface';\n\n/**\n * Global router state\n *\n * This is where we hold the global mutable state such as current state, current\n * params, current transition, etc.\n */\nexport class UIRouterGlobals implements Disposable {\n  /**\n   * Current parameter values\n   *\n   * The parameter values from the latest successful transition\n   */\n  params: StateParams = new StateParams();\n\n  /**\n   * Current state\n   *\n   * The to-state from the latest successful transition\n   */\n  current: StateDeclaration;\n\n  /**\n   * Current state (internal object)\n   *\n   * The to-state from the latest successful transition\n   * @internalapi\n   */\n  $current: StateObject;\n\n  /**\n   * The current started/running transition.\n   * This transition has reached at least the onStart phase, but is not yet complete\n   */\n  transition: Transition;\n\n  /** @internalapi */\n  lastStartedTransitionId: number = -1;\n\n  /** @internalapi */\n  transitionHistory = new Queue<Transition>([], 1);\n\n  /** @internalapi */\n  successfulTransitions = new Queue<Transition>([], 1);\n\n  dispose() {\n    this.transitionHistory.clear();\n    this.successfulTransitions.clear();\n    this.transition = null;\n  }\n}\n","/**\n * @coreapi\n * @module url\n */ /** */\n\nimport { UIRouter } from \"../router\";\nimport { LocationServices, notImplemented, LocationConfig } from \"../common/coreservices\";\nimport { noop, createProxyFunctions } from \"../common/common\";\nimport { UrlConfigApi, UrlSyncApi, UrlRulesApi, UrlParts, MatchResult } from \"./interface\";\n\n/** @hidden */\nconst makeStub = (keys: string[]): any =>\n    keys.reduce((acc, key) => (acc[key] = notImplemented(key), acc), { dispose: noop });\n\n/** @hidden */ const locationServicesFns = [\"url\", \"path\", \"search\", \"hash\", \"onChange\"];\n/** @hidden */ const locationConfigFns = [\"port\", \"protocol\", \"host\", \"baseHref\", \"html5Mode\", \"hashPrefix\"];\n/** @hidden */ const umfFns = [\"type\", \"caseInsensitive\", \"strictMode\", \"defaultSquashPolicy\"];\n/** @hidden */ const rulesFns = [\"sort\", \"when\", \"initial\", \"otherwise\", \"rules\", \"rule\", \"removeRule\"];\n/** @hidden */ const syncFns = [\"deferIntercept\", \"listen\", \"sync\", \"match\"];\n\n/**\n * API for URL management\n */\nexport class UrlService implements LocationServices, UrlSyncApi {\n  /** @hidden */\n  static locationServiceStub: LocationServices = makeStub(locationServicesFns);\n  /** @hidden */\n  static locationConfigStub: LocationConfig = makeStub(locationConfigFns);\n\n  /** @inheritdoc */\n  url(): string;\n  /** @inheritdoc */\n  url(newurl: string, replace?: boolean, state?): void;\n  url(newurl?, replace?, state?): any { return };\n  /** @inheritdoc */\n  path(): string { return };\n  /** @inheritdoc */\n  search(): { [key: string]: any } { return };\n  /** @inheritdoc */\n  hash(): string { return };\n  /** @inheritdoc */\n  onChange(callback: Function): Function { return };\n\n\n  /**\n   * Returns the current URL parts\n   *\n   * This method returns the current URL components as a [[UrlParts]] object.\n   *\n   * @returns the current url parts\n   */\n  parts(): UrlParts {\n    return { path: this.path(), search: this.search(), hash: this.hash() }\n  }\n\n  dispose() { }\n\n  /** @inheritdoc */\n  sync(evt?) { return }\n  /** @inheritdoc */\n  listen(enabled?: boolean): Function { return };\n  /** @inheritdoc */\n  deferIntercept(defer?: boolean) { return }\n  /** @inheritdoc */\n  match(urlParts: UrlParts): MatchResult { return }\n\n  /**\n   * A nested API for managing URL rules and rewrites\n   *\n   * See: [[UrlRulesApi]] for details\n   */\n  rules: UrlRulesApi;\n\n  /**\n   * A nested API to configure the URL and retrieve URL information\n   *\n   * See: [[UrlConfigApi]] for details\n   */\n  config: UrlConfigApi;\n\n  /** @hidden */\n  private router: UIRouter;\n\n  /** @hidden */\n  constructor(router: UIRouter, lateBind = true) {\n    this.router = router;\n    this.rules = {} as any;\n    this.config = {} as any;\n\n    // proxy function calls from UrlService to the LocationService/LocationConfig\n    const locationServices = () => router.locationService;\n    createProxyFunctions(locationServices, this, locationServices, locationServicesFns, lateBind);\n\n    const locationConfig = () => router.locationConfig;\n    createProxyFunctions(locationConfig, this.config, locationConfig, locationConfigFns, lateBind);\n\n    const umf = () => router.urlMatcherFactory;\n    createProxyFunctions(umf, this.config, umf, umfFns);\n\n    const urlRouter = () => router.urlRouter;\n    createProxyFunctions(urlRouter, this.rules, urlRouter, rulesFns);\n    createProxyFunctions(urlRouter, this, urlRouter, syncFns);\n  }\n}\n","/**\n * @coreapi\n * @module core\n */ /** */\nimport { UrlMatcherFactory } from \"./url/urlMatcherFactory\";\nimport { UrlRouter } from \"./url/urlRouter\";\nimport { TransitionService } from \"./transition/transitionService\";\nimport { ViewService } from \"./view/view\";\nimport { StateRegistry } from \"./state/stateRegistry\";\nimport { StateService } from \"./state/stateService\";\nimport { UIRouterGlobals } from \"./globals\";\nimport { UIRouterPlugin, Disposable } from \"./interface\";\nimport { values, removeFrom } from \"./common/common\";\nimport { isFunction } from \"./common/predicates\";\nimport { UrlService } from \"./url/urlService\";\nimport { LocationServices, LocationConfig } from \"./common/coreservices\";\nimport { Trace, trace } from \"./common/trace\";\n\n/** @hidden */\nlet _routerInstance = 0;\n\n/**\n * The master class used to instantiate an instance of UI-Router.\n *\n * UI-Router (for each specific framework) will create an instance of this class during bootstrap.\n * This class instantiates and wires the UI-Router services together.\n *\n * After a new instance of the UIRouter class is created, it should be configured for your app.\n * For instance, app states should be registered with the [[UIRouter.stateRegistry]].\n *\n * ---\n *\n * Normally the framework code will bootstrap UI-Router.\n * If you are bootstrapping UIRouter manually, tell it to monitor the URL by calling\n * [[UrlService.listen]] then [[UrlService.sync]].\n */\nexport class UIRouter {\n  /** @hidden */ $id = _routerInstance++;\n  /** @hidden */ _disposed = false;\n  /** @hidden */ private _disposables: Disposable[] = [];\n\n  /** Provides trace information to the console */\n  trace: Trace = trace;\n\n  /** Provides services related to ui-view synchronization */\n  viewService = new ViewService();\n\n  /** Provides services related to Transitions */\n  transitionService: TransitionService = new TransitionService(this);\n\n  /** Global router state */\n  globals: UIRouterGlobals = new UIRouterGlobals();\n\n  /**\n   * Deprecated for public use. Use [[urlService]] instead.\n   * @deprecated Use [[urlService]] instead\n   */\n  urlMatcherFactory: UrlMatcherFactory = new UrlMatcherFactory();\n\n  /**\n   * Deprecated for public use. Use [[urlService]] instead.\n   * @deprecated Use [[urlService]] instead\n   */\n  urlRouter: UrlRouter = new UrlRouter(this);\n\n  /** Provides a registry for states, and related registration services */\n  stateRegistry: StateRegistry = new StateRegistry(this);\n\n  /** Provides services related to states */\n  stateService = new StateService(this);\n\n  /** Provides services related to the URL */\n  urlService: UrlService = new UrlService(this);\n\n\n  /** Registers an object to be notified when the router is disposed */\n  disposable(disposable: Disposable) {\n    this._disposables.push(disposable);\n  }\n\n  /**\n   * Disposes this router instance\n   *\n   * When called, clears resources retained by the router by calling `dispose(this)` on all\n   * registered [[disposable]] objects.\n   *\n   * Or, if a `disposable` object is provided, calls `dispose(this)` on that object only.\n   *\n   * @param disposable (optional) the disposable to dispose\n   */\n  dispose(disposable?: any): void {\n    if (disposable && isFunction(disposable.dispose)) {\n      disposable.dispose(this);\n      return undefined;\n    }\n\n    this._disposed = true;\n    this._disposables.slice().forEach(d => {\n      try {\n        typeof d.dispose === 'function' && d.dispose(this);\n        removeFrom(this._disposables, d);\n      } catch (ignored) {}\n    });\n  }\n\n  /**\n   * Creates a new `UIRouter` object\n   *\n   * @param locationService a [[LocationServices]] implementation\n   * @param locationConfig a [[LocationConfig]] implementation\n   * @internalapi\n   */\n  constructor(\n      public locationService: LocationServices = UrlService.locationServiceStub,\n      public locationConfig: LocationConfig = UrlService.locationConfigStub\n  ) {\n\n    this.viewService._pluginapi._rootViewContext(this.stateRegistry.root());\n    this.globals.$current = this.stateRegistry.root();\n    this.globals.current = this.globals.$current.self;\n\n    this.disposable(this.globals);\n    this.disposable(this.stateService);\n    this.disposable(this.stateRegistry);\n    this.disposable(this.transitionService);\n    this.disposable(this.urlRouter);\n    this.disposable(locationService);\n    this.disposable(locationConfig);\n  }\n\n  /** @hidden */\n  private _plugins: { [key: string]: UIRouterPlugin } = {};\n\n  /** Add plugin (as ES6 class) */\n  plugin<T extends UIRouterPlugin>(plugin: { new(router: UIRouter, options?: any): T }, options?: any): T;\n  /** Add plugin (as javascript constructor function) */\n  plugin<T extends UIRouterPlugin>(plugin: { (router: UIRouter, options?: any): void }, options?: any): T;\n  /** Add plugin (as javascript factory function) */\n  plugin<T extends UIRouterPlugin>(plugin: PluginFactory<T>, options?: any): T;\n  /**\n   * Adds a plugin to UI-Router\n   *\n   * This method adds a UI-Router Plugin.\n   * A plugin can enhance or change UI-Router behavior using any public API.\n   *\n   * #### Example:\n   * ```js\n   * import { MyCoolPlugin } from \"ui-router-cool-plugin\";\n   *\n   * var plugin = router.addPlugin(MyCoolPlugin);\n   * ```\n   *\n   * ### Plugin authoring\n   *\n   * A plugin is simply a class (or constructor function) which accepts a [[UIRouter]] instance and (optionally) an options object.\n   *\n   * The plugin can implement its functionality using any of the public APIs of [[UIRouter]].\n   * For example, it may configure router options or add a Transition Hook.\n   *\n   * The plugin can then be published as a separate module.\n   *\n   * #### Example:\n   * ```js\n   * export class MyAuthPlugin implements UIRouterPlugin {\n   *   constructor(router: UIRouter, options: any) {\n   *     this.name = \"MyAuthPlugin\";\n   *     let $transitions = router.transitionService;\n   *     let $state = router.stateService;\n   *\n   *     let authCriteria = {\n   *       to: (state) => state.data && state.data.requiresAuth\n   *     };\n   *\n   *     function authHook(transition: Transition) {\n   *       let authService = transition.injector().get('AuthService');\n   *       if (!authService.isAuthenticated()) {\n   *         return $state.target('login');\n   *       }\n   *     }\n   *\n   *     $transitions.onStart(authCriteria, authHook);\n   *   }\n   * }\n   * ```\n   *\n   * @param plugin one of:\n   *        - a plugin class which implements [[UIRouterPlugin]]\n   *        - a constructor function for a [[UIRouterPlugin]] which accepts a [[UIRouter]] instance\n   *        - a factory function which accepts a [[UIRouter]] instance and returns a [[UIRouterPlugin]] instance\n   * @param options options to pass to the plugin class/factory\n   * @returns the registered plugin instance\n   */\n  plugin<T extends UIRouterPlugin>(plugin: any, options: any = {}): T {\n    let pluginInstance = new plugin(this, options);\n    if (!pluginInstance.name) throw new Error(\"Required property `name` missing on plugin: \" + pluginInstance);\n    this._disposables.push(pluginInstance);\n    return this._plugins[pluginInstance.name] = pluginInstance;\n  }\n\n  /**\n   * Returns registered plugins\n   *\n   * Returns the registered plugin of the given `pluginName`.\n   * If no `pluginName` is given, returns all registered plugins\n   *\n   * @param pluginName (optional) the name of the plugin to get\n   * @return the named plugin (undefined if not found), or all plugins (if `pluginName` is omitted)\n   */\n  getPlugin(pluginName: string): UIRouterPlugin;\n  getPlugin(): UIRouterPlugin[];\n  getPlugin(pluginName?: string): UIRouterPlugin|UIRouterPlugin[] {\n    return pluginName ? this._plugins[pluginName] : values(this._plugins);\n  }\n}\n\n/** @internalapi */\nexport type PluginFactory<T> = (router: UIRouter, options?: any) => T;\n","/** @module hooks */ /** */\nimport {isString, isFunction} from \"../common/predicates\"\nimport {Transition} from \"../transition/transition\";\nimport {services} from \"../common/coreservices\";\nimport {TargetState} from \"../state/targetState\";\nimport {TransitionService} from \"../transition/transitionService\";\nimport {TransitionHookFn} from \"../transition/interface\";\n\n/**\n * A [[TransitionHookFn]] that redirects to a different state or params\n *\n * Registered using `transitionService.onStart({ to: (state) => !!state.redirectTo }, redirectHook);`\n * \n * See [[StateDeclaration.redirectTo]]\n */\nconst redirectToHook: TransitionHookFn = (trans: Transition) => {\n  let redirect = trans.to().redirectTo;\n  if (!redirect) return;\n\n  let $state = trans.router.stateService;\n\n  function handleResult(result: any) {\n    if (!result) return;\n    if (result instanceof TargetState) return result;\n    if (isString(result)) return $state.target(<any> result, trans.params(), trans.options());\n    if (result['state'] || result['params'])\n      return $state.target(result['state'] || trans.to(), result['params'] || trans.params(), trans.options());\n  }\n\n  if (isFunction(redirect)) {\n    return services.$q.when(redirect(trans)).then(handleResult);\n  }\n  return handleResult(redirect);\n};\n\nexport const registerRedirectToHook = (transitionService: TransitionService) =>\n    transitionService.onStart({to: (state) => !!state.redirectTo}, redirectToHook);\n","/** @module hooks */\n/** for typedoc */\nimport { noop } from '../common/common';\nimport { Transition } from '../transition/transition';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { TransitionStateHookFn, TransitionHookFn } from '../transition/interface';\nimport { TransitionService } from '../transition/transitionService';\nimport { val } from '../common/hof';\nimport { StateDeclaration } from '../state/interface';\n\n/**\n * A [[TransitionHookFn]] which resolves all EAGER Resolvables in the To Path\n *\n * Registered using `transitionService.onStart({}, eagerResolvePath);`\n *\n * When a Transition starts, this hook resolves all the EAGER Resolvables, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst eagerResolvePath: TransitionHookFn = (trans: Transition) =>\n    new ResolveContext(trans.treeChanges().to)\n        .resolvePath(\"EAGER\", trans)\n        .then(noop);\n\nexport const registerEagerResolvePath = (transitionService: TransitionService) =>\n    transitionService.onStart({}, eagerResolvePath, {priority: 1000});\n\n/**\n * A [[TransitionHookFn]] which resolves all LAZY Resolvables for the state (and all its ancestors) in the To Path\n *\n * Registered using `transitionService.onEnter({ entering: () => true }, lazyResolveState);`\n *\n * When a State is being entered, this hook resolves all the Resolvables for this state, which the transition then waits for.\n *\n * See [[StateDeclaration.resolve]]\n */\nconst lazyResolveState: TransitionStateHookFn = (trans: Transition, state: StateDeclaration) =>\n    new ResolveContext(trans.treeChanges().to)\n        .subContext(state.$$state())\n        .resolvePath(\"LAZY\", trans)\n        .then(noop);\n\nexport const registerLazyResolveState = (transitionService: TransitionService) =>\n    transitionService.onEnter({ entering: val(true) }, lazyResolveState, {priority: 1000});\n\n","/** @module hooks */ /** for typedoc */\nimport {noop} from \"../common/common\";\nimport {services} from \"../common/coreservices\";\nimport {Transition} from \"../transition/transition\";\nimport {ViewService} from \"../view/view\";\nimport {ViewConfig} from \"../view/interface\";\nimport {TransitionHookFn} from \"../transition/interface\";\nimport {TransitionService} from \"../transition/transitionService\";\n\n\n/**\n * A [[TransitionHookFn]] which waits for the views to load\n *\n * Registered using `transitionService.onStart({}, loadEnteringViews);`\n *\n * Allows the views to do async work in [[ViewConfig.load]] before the transition continues.\n * In angular 1, this includes loading the templates.\n */\nconst loadEnteringViews: TransitionHookFn = (transition: Transition) => {\n  let $q = services.$q;\n  let enteringViews = transition.views(\"entering\");\n  if (!enteringViews.length) return;\n  return $q.all(enteringViews.map(view => $q.when(view.load()))).then(noop);\n};\n\nexport const registerLoadEnteringViews = (transitionService: TransitionService) =>\n    transitionService.onFinish({}, loadEnteringViews);\n\n/**\n * A [[TransitionHookFn]] which activates the new views when a transition is successful.\n *\n * Registered using `transitionService.onSuccess({}, activateViews);`\n *\n * After a transition is complete, this hook deactivates the old views from the previous state,\n * and activates the new views from the destination state.\n *\n * See [[ViewService]]\n */\nconst activateViews: TransitionHookFn = (transition: Transition) => {\n  let enteringViews = transition.views(\"entering\");\n  let exitingViews = transition.views(\"exiting\");\n  if (!enteringViews.length && !exitingViews.length) return;\n\n  let $view: ViewService = transition.router.viewService;\n\n  exitingViews.forEach((vc: ViewConfig) => $view.deactivateViewConfig(vc));\n  enteringViews.forEach((vc: ViewConfig) => $view.activateViewConfig(vc));\n\n  $view.sync();\n};\n\nexport const registerActivateViews = (transitionService: TransitionService) =>\n    transitionService.onSuccess({}, activateViews);\n","/** @module hooks */\n/** for typedoc */\nimport { Transition } from '../transition/transition';\nimport { copy } from '../common/common';\nimport { TransitionService } from '../transition/transitionService';\n\n/**\n * A [[TransitionHookFn]] which updates global UI-Router state\n *\n * Registered using `transitionService.onBefore({}, updateGlobalState);`\n *\n * Before a [[Transition]] starts, updates the global value of \"the current transition\" ([[Globals.transition]]).\n * After a successful [[Transition]], updates the global values of \"the current state\"\n * ([[Globals.current]] and [[Globals.$current]]) and \"the current param values\" ([[Globals.params]]).\n *\n * See also the deprecated properties:\n * [[StateService.transition]], [[StateService.current]], [[StateService.params]]\n */\nconst updateGlobalState = (trans: Transition) => {\n  let globals = trans.router.globals;\n\n  const transitionSuccessful = () => {\n    globals.successfulTransitions.enqueue(trans);\n    globals.$current = trans.$to();\n    globals.current = globals.$current.self;\n\n    copy(trans.params(), globals.params);\n  };\n\n  const clearCurrentTransition = () => {\n    // Do not clear globals.transition if a different transition has started in the meantime\n    if (globals.transition === trans) globals.transition = null;\n  };\n\n  trans.onSuccess({}, transitionSuccessful, { priority: 10000 });\n  trans.promise.then(clearCurrentTransition, clearCurrentTransition);\n};\n\nexport const registerUpdateGlobalState = (transitionService: TransitionService) =>\n    transitionService.onCreate({}, updateGlobalState);\n","/** @module hooks */ /** */\nimport {UrlRouter} from \"../url/urlRouter\";\nimport {StateService} from \"../state/stateService\";\nimport {Transition} from \"../transition/transition\";\nimport {TransitionHookFn} from \"../transition/interface\";\nimport {TransitionService} from \"../transition/transitionService\";\n\n/** \n * A [[TransitionHookFn]] which updates the URL after a successful transition\n * \n * Registered using `transitionService.onSuccess({}, updateUrl);`\n */\nconst updateUrl: TransitionHookFn = (transition: Transition) => {\n  let options = transition.options();\n  let $state: StateService = transition.router.stateService;\n  let $urlRouter: UrlRouter = transition.router.urlRouter;\n\n  // Dont update the url in these situations:\n  // The transition was triggered by a URL sync (options.source === 'url')\n  // The user doesn't want the url to update (options.location === false)\n  // The destination state, and all parents have no navigable url\n  if (options.source !== 'url' && options.location && $state.$current.navigable) {\n    var urlOptions = {replace: options.location === 'replace'};\n    $urlRouter.push($state.$current.navigable.url, $state.params, urlOptions);\n  }\n\n  $urlRouter.update(true);\n};\n\nexport const registerUpdateUrl = (transitionService: TransitionService) =>\n    transitionService.onSuccess({}, updateUrl, {priority: 9999});\n","/** @module transition */ /** */\nimport { TransitionHookPhase, PathType } from \"./interface\";\nimport { GetErrorHandler, GetResultHandler, TransitionHook } from \"./transitionHook\";\n/**\n * This class defines a type of hook, such as `onBefore` or `onEnter`.\n * Plugins can define custom hook types, such as sticky states does for `onInactive`.\n *\n * @interalapi\n */\nexport class TransitionEventType {\n\n  constructor(public name:               string,\n              public hookPhase:          TransitionHookPhase,\n              public hookOrder:          number,\n              public criteriaMatchPath:  PathType,\n              public reverseSort:        boolean = false,\n              public getResultHandler:   GetResultHandler = TransitionHook.HANDLE_RESULT,\n              public getErrorHandler:    GetErrorHandler = TransitionHook.REJECT_ERROR,\n              public synchronous:        boolean = false,\n  ) { }\n}\n","/**\n * @coreapi\n * @module transition\n */\n/** for typedoc */\nimport {\n  IHookRegistry, TransitionOptions, TransitionHookScope, TransitionHookPhase, TransitionCreateHookFn, HookMatchCriteria,\n  HookRegOptions, PathTypes, PathType, RegisteredHooks, TransitionHookFn, TransitionStateHookFn\n} from \"./interface\";\nimport { Transition } from \"./transition\";\nimport { makeEvent, RegisteredHook } from \"./hookRegistry\";\nimport { TargetState } from \"../state/targetState\";\nimport { PathNode } from \"../path/pathNode\";\nimport { ViewService } from \"../view/view\";\nimport { UIRouter } from \"../router\";\nimport { registerAddCoreResolvables } from \"../hooks/coreResolvables\";\nimport { registerRedirectToHook } from \"../hooks/redirectTo\";\nimport { registerOnExitHook, registerOnRetainHook, registerOnEnterHook } from \"../hooks/onEnterExitRetain\";\nimport { registerEagerResolvePath, registerLazyResolveState } from \"../hooks/resolve\";\nimport { registerLoadEnteringViews, registerActivateViews } from \"../hooks/views\";\nimport { registerUpdateGlobalState } from \"../hooks/updateGlobals\";\nimport { registerUpdateUrl } from \"../hooks/url\";\nimport { registerLazyLoadHook } from \"../hooks/lazyLoad\";\nimport { TransitionEventType } from \"./transitionEventType\";\nimport { TransitionHook, GetResultHandler, GetErrorHandler } from \"./transitionHook\";\nimport { isDefined } from \"../common/predicates\";\nimport { removeFrom, values, createProxyFunctions } from \"../common/common\";\nimport { Disposable } from \"../interface\"; // has or is using\nimport { val } from \"../common/hof\";\nimport { registerIgnoredTransitionHook } from '../hooks/ignoredTransition';\nimport { registerInvalidTransitionHook } from '../hooks/invalidTransition';\n\n/**\n * The default [[Transition]] options.\n *\n * Include this object when applying custom defaults:\n * let reloadOpts = { reload: true, notify: true }\n * let options = defaults(theirOpts, customDefaults, defaultOptions);\n */\nexport let defaultTransOpts: TransitionOptions = {\n  location    : true,\n  relative    : null,\n  inherit     : false,\n  notify      : true,\n  reload      : false,\n  custom      : {},\n  current     : () => null,\n  source      : \"unknown\"\n};\n\n\n/**\n * Plugin API for Transition Service\n * @internalapi\n */\nexport interface TransitionServicePluginAPI {\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   */\n  _definePathType(name: string, hookScope: TransitionHookScope);\n\n  /**\n   * Gets a Path definition used as a criterion against a TreeChanges path\n   */\n  _getPathTypes(): PathTypes;\n\n  /**\n   * Defines a transition hook type and returns a transition hook registration\n   * function (which can then be used to register hooks of this type).\n   */\n  _defineEvent(name: string,\n               hookPhase: TransitionHookPhase,\n               hookOrder: number,\n               criteriaMatchPath: PathType,\n               reverseSort?: boolean,\n               getResultHandler?: GetResultHandler,\n               getErrorHandler?: GetErrorHandler,\n               rejectIfSuperseded?: boolean);\n\n  /**\n   * Returns the known event types, such as `onBefore`\n   * If a phase argument is provided, returns only events for the given phase.\n   */\n  _getEvents(phase?: TransitionHookPhase): TransitionEventType[];\n\n  /** Returns the hooks registered for the given hook name */\n  getHooks(hookName: string): RegisteredHook[];\n}\n\n/**\n * This class provides services related to Transitions.\n *\n * - Most importantly, it allows global Transition Hooks to be registered.\n * - It allows the default transition error handler to be set.\n * - It also has a factory function for creating new [[Transition]] objects, (used internally by the [[StateService]]).\n *\n * At bootstrap, [[UIRouter]] creates a single instance (singleton) of this class.\n */\nexport class TransitionService implements IHookRegistry, Disposable {\n  /** @hidden */\n  _transitionCount = 0;\n\n  /**\n   * Registers a [[TransitionHookFn]], called *while a transition is being constructed*.\n   *\n   * Registers a transition lifecycle hook, which is invoked during transition construction.\n   *\n   * This low level hook should only be used by plugins.\n   * This can be a useful time for plugins to add resolves or mutate the transition as needed.\n   * The Sticky States plugin uses this hook to modify the treechanges.\n   *\n   * ### Lifecycle\n   *\n   * `onCreate` hooks are invoked *while a transition is being constructed*.\n   *\n   * ### Return value\n   *\n   * The hook's return value is ignored\n   *\n   * @internalapi\n   * @param criteria defines which Transitions the Hook should be invoked for.\n   * @param callback the hook function which will be invoked.\n   * @param options the registration options\n   * @returns a function which deregisters the hook.\n   */\n  onCreate(criteria: HookMatchCriteria, callback: TransitionCreateHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onBefore(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onStart(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onExit(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onRetain(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onEnter(criteria: HookMatchCriteria, callback: TransitionStateHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onFinish(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onSuccess(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n  /** @inheritdoc */\n  onError(criteria: HookMatchCriteria, callback: TransitionHookFn, options?: HookRegOptions): Function { return }\n\n  /** @hidden */\n  public $view: ViewService;\n\n  /** @hidden The transition hook types, such as `onEnter`, `onStart`, etc */\n  private _eventTypes: TransitionEventType[] = [];\n  /** @hidden The registered transition hooks */\n  _registeredHooks = { } as RegisteredHooks;\n  /** @hidden The  paths on a criteria object */\n  private _criteriaPaths = { } as PathTypes;\n  /** @hidden */\n  private _router: UIRouter;\n\n  /** @internalapi */\n  _pluginapi: TransitionServicePluginAPI;\n\n  /**\n   * This object has hook de-registration functions for the built-in hooks.\n   * This can be used by third parties libraries that wish to customize the behaviors\n   *\n   * @hidden\n   */\n  _deregisterHookFns: {\n    addCoreResolves: Function;\n    ignored: Function;\n    invalid: Function;\n    redirectTo: Function;\n    onExit: Function;\n    onRetain: Function;\n    onEnter: Function;\n    eagerResolve: Function;\n    lazyResolve: Function;\n    loadViews: Function;\n    activateViews: Function;\n    updateGlobals: Function;\n    updateUrl: Function;\n    lazyLoad: Function;\n  };\n\n  /** @hidden */\n  constructor(_router: UIRouter) {\n    this._router = _router;\n    this.$view = _router.viewService;\n    this._deregisterHookFns = <any> {};\n    this._pluginapi = <TransitionServicePluginAPI> createProxyFunctions(val(this), {}, val(this), [\n      '_definePathType',\n      '_defineEvent',\n      '_getPathTypes',\n      '_getEvents',\n      'getHooks',\n    ]);\n\n    this._defineCorePaths();\n    this._defineCoreEvents();\n    this._registerCoreTransitionHooks();\n  }\n\n  /**\n   * dispose\n   * @internalapi\n   */\n  dispose(router: UIRouter) {\n    values(this._registeredHooks).forEach((hooksArray: RegisteredHook[]) => hooksArray.forEach(hook => {\n      hook._deregistered = true;\n      removeFrom(hooksArray, hook);\n    }));\n  }\n\n  /**\n   * Creates a new [[Transition]] object\n   *\n   * This is a factory function for creating new Transition objects.\n   * It is used internally by the [[StateService]] and should generally not be called by application code.\n   *\n   * @param fromPath the path to the current state (the from state)\n   * @param targetState the target state (destination)\n   * @returns a Transition\n   */\n  create(fromPath: PathNode[], targetState: TargetState): Transition {\n    return new Transition(fromPath, targetState, this._router);\n  }\n\n  /** @hidden */\n  private _defineCoreEvents() {\n    const Phase = TransitionHookPhase;\n    const TH = TransitionHook;\n    const paths = this._criteriaPaths;\n    const NORMAL_SORT = false, REVERSE_SORT = true;\n    const ASYNCHRONOUS = false, SYNCHRONOUS = true;\n\n    this._defineEvent(\"onCreate\",  Phase.CREATE,  0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.THROW_ERROR, SYNCHRONOUS);\n\n    this._defineEvent(\"onBefore\",  Phase.BEFORE,  0,   paths.to);\n\n    this._defineEvent(\"onStart\",   Phase.RUN,     0,   paths.to);\n    this._defineEvent(\"onExit\",    Phase.RUN,     100, paths.exiting, REVERSE_SORT);\n    this._defineEvent(\"onRetain\",  Phase.RUN,     200, paths.retained);\n    this._defineEvent(\"onEnter\",   Phase.RUN,     300, paths.entering);\n    this._defineEvent(\"onFinish\",  Phase.RUN,     400, paths.to);\n\n    this._defineEvent(\"onSuccess\", Phase.SUCCESS, 0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n    this._defineEvent(\"onError\",   Phase.ERROR,   0,   paths.to, NORMAL_SORT, TH.LOG_REJECTED_RESULT, TH.LOG_ERROR, SYNCHRONOUS);\n  }\n\n  /** @hidden */\n  private _defineCorePaths() {\n    const { STATE, TRANSITION } = TransitionHookScope;\n\n    this._definePathType(\"to\", TRANSITION);\n    this._definePathType(\"from\", TRANSITION);\n    this._definePathType(\"exiting\", STATE);\n    this._definePathType(\"retained\", STATE);\n    this._definePathType(\"entering\", STATE);\n  }\n\n  /** @hidden */\n  _defineEvent(name: string,\n               hookPhase: TransitionHookPhase,\n               hookOrder: number,\n               criteriaMatchPath: PathType,\n               reverseSort: boolean = false,\n               getResultHandler: GetResultHandler = TransitionHook.HANDLE_RESULT,\n               getErrorHandler: GetErrorHandler = TransitionHook.REJECT_ERROR,\n               synchronous: boolean = false)\n  {\n    let eventType = new TransitionEventType(name, hookPhase, hookOrder, criteriaMatchPath, reverseSort, getResultHandler, getErrorHandler, synchronous);\n\n    this._eventTypes.push(eventType);\n    makeEvent(this, this, eventType);\n  };\n\n  /** @hidden */\n  private _getEvents(phase?: TransitionHookPhase): TransitionEventType[] {\n    let transitionHookTypes = isDefined(phase) ?\n        this._eventTypes.filter(type => type.hookPhase === phase) :\n        this._eventTypes.slice();\n\n    return transitionHookTypes.sort((l, r) => {\n      let cmpByPhase = l.hookPhase - r.hookPhase;\n      return cmpByPhase === 0 ? l.hookOrder - r.hookOrder : cmpByPhase;\n    })\n  }\n\n  /**\n   * Adds a Path to be used as a criterion against a TreeChanges path\n   *\n   * For example: the `exiting` path in [[HookMatchCriteria]] is a STATE scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('exiting', TransitionHookScope.STATE)`\n   * Each state in the exiting path is checked against the criteria and returned as part of the match.\n   *\n   * Another example: the `to` path in [[HookMatchCriteria]] is a TRANSITION scoped path.\n   * It was defined by calling `defineTreeChangesCriterion('to', TransitionHookScope.TRANSITION)`\n   * Only the tail of the `to` path is checked against the criteria and returned as part of the match.\n   *\n   * @hidden\n   */\n  private _definePathType(name: string, hookScope: TransitionHookScope) {\n    this._criteriaPaths[name] = { name, scope: hookScope };\n  }\n\n  /** * @hidden */\n  private _getPathTypes(): PathTypes {\n    return this._criteriaPaths;\n  }\n\n  /** @hidden */\n  public getHooks(hookName: string): RegisteredHook[] {\n    return this._registeredHooks[hookName];\n  }\n\n  /** @hidden */\n  private _registerCoreTransitionHooks() {\n    let fns = this._deregisterHookFns;\n\n    fns.addCoreResolves = registerAddCoreResolvables(this);\n    fns.ignored         = registerIgnoredTransitionHook(this);\n    fns.invalid         = registerInvalidTransitionHook(this);\n\n    // Wire up redirectTo hook\n    fns.redirectTo      = registerRedirectToHook(this);\n    \n    // Wire up onExit/Retain/Enter state hooks\n    fns.onExit          = registerOnExitHook(this);\n    fns.onRetain        = registerOnRetainHook(this);\n    fns.onEnter         = registerOnEnterHook(this);\n\n    // Wire up Resolve hooks\n    fns.eagerResolve    = registerEagerResolvePath(this);\n    fns.lazyResolve     = registerLazyResolveState(this);\n                                 \n    // Wire up the View management hooks\n    fns.loadViews       = registerLoadEnteringViews(this);\n    fns.activateViews   = registerActivateViews(this);\n\n    // Updates global state after a transition\n    fns.updateGlobals   = registerUpdateGlobalState(this);\n\n    // After globals.current is updated at priority: 10000\n    fns.updateUrl       = registerUpdateUrl(this);\n\n    // Lazy load state trees\n    fns.lazyLoad        = registerLazyLoadHook(this);\n  }\n}\n","/**\n * @coreapi\n * @module state\n */\n/** */\nimport { createProxyFunctions, defaults, extend, inArray, noop, removeFrom, silenceUncaughtInPromise, silentRejection } from '../common/common';\nimport { isDefined, isObject, isString } from '../common/predicates';\nimport { Queue } from '../common/queue';\nimport { services } from '../common/coreservices';\n\nimport { PathUtils } from '../path/pathFactory';\nimport { PathNode } from '../path/pathNode';\n\nimport { HookResult, TransitionOptions } from '../transition/interface';\nimport { defaultTransOpts } from '../transition/transitionService';\nimport { Rejection, RejectType } from '../transition/rejectFactory';\nimport { Transition } from '../transition/transition';\n\nimport { HrefOptions, LazyLoadResult, StateDeclaration, StateOrName, TransitionPromise } from './interface';\nimport { StateObject } from './stateObject';\nimport { TargetState } from './targetState';\n\nimport { ParamsOrArray, RawParams } from '../params/interface';\nimport { Param } from '../params/param';\nimport { Glob } from '../common/glob';\nimport { UIRouter } from '../router';\nimport { UIInjector } from '../interface';\nimport { ResolveContext } from '../resolve/resolveContext';\nimport { lazyLoadState } from '../hooks/lazyLoad';\nimport { not, val } from '../common/hof';\nimport { StateParams } from '../params/stateParams';\n\nexport type OnInvalidCallback =\n    (toState?: TargetState, fromState?: TargetState, injector?: UIInjector) => HookResult;\n\n/**\n * Provides state related service functions\n *\n * This class provides services related to ui-router states.\n * An instance of this class is located on the global [[UIRouter]] object.\n */\nexport class StateService {\n  /** @internalapi */\n  invalidCallbacks: OnInvalidCallback[] = [];\n\n  /**\n   * The [[Transition]] currently in progress (or null)\n   *\n   * This is a passthrough through to [[UIRouterGlobals.transition]]\n   */\n  get transition() { return this.router.globals.transition; }\n  /**\n   * The latest successful state parameters\n   *\n   * This is a passthrough through to [[UIRouterGlobals.params]]\n   */\n  get params(): StateParams { return this.router.globals.params; }\n  /**\n   * The current [[StateDeclaration]]\n   *\n   * This is a passthrough through to [[UIRouterGlobals.current]]\n   */\n  get current() { return this.router.globals.current; }\n  /**\n   * The current [[StateObject]]\n   *\n   * This is a passthrough through to [[UIRouterGlobals.$current]]\n   */\n  get $current() { return this.router.globals.$current; }\n\n  /** @internalapi */\n  constructor(private router: UIRouter) {\n    let getters = ['current', '$current', 'params', 'transition'];\n    let boundFns = Object.keys(StateService.prototype).filter(not(inArray(getters)));\n    createProxyFunctions(val(StateService.prototype), this, val(this), boundFns);\n  }\n\n  /** @internalapi */\n  dispose() {\n    this.defaultErrorHandler(noop);\n    this.invalidCallbacks = [];\n  }\n\n  /**\n   * Handler for when [[transitionTo]] is called with an invalid state.\n   *\n   * Invokes the [[onInvalid]] callbacks, in natural order.\n   * Each callback's return value is checked in sequence until one of them returns an instance of TargetState.\n   * The results of the callbacks are wrapped in $q.when(), so the callbacks may return promises.\n   *\n   * If a callback returns an TargetState, then it is used as arguments to $state.transitionTo() and the result returned.\n   *\n   * @internalapi\n   */\n  private _handleInvalidTargetState(fromPath: PathNode[], toState: TargetState) {\n    let fromState = PathUtils.makeTargetState(fromPath);\n    let globals = this.router.globals;\n    const latestThing = () => globals.transitionHistory.peekTail();\n    let latest = latestThing();\n    let callbackQueue = new Queue<OnInvalidCallback>(this.invalidCallbacks.slice());\n    let injector = new ResolveContext(fromPath).injector();\n\n    const checkForRedirect = (result: HookResult) => {\n      if (!(result instanceof TargetState)) {\n        return;\n      }\n\n      let target = <TargetState> result;\n      // Recreate the TargetState, in case the state is now defined.\n      target = this.target(target.identifier(), target.params(), target.options());\n\n      if (!target.valid()) {\n        return Rejection.invalid(target.error()).toPromise();\n      }\n\n      if (latestThing() !== latest) {\n        return Rejection.superseded().toPromise();\n      }\n\n      return this.transitionTo(target.identifier(), target.params(), target.options());\n    };\n\n    function invokeNextCallback() {\n      let nextCallback = callbackQueue.dequeue();\n      if (nextCallback === undefined) return Rejection.invalid(toState.error()).toPromise();\n\n      let callbackResult = services.$q.when(nextCallback(toState, fromState, injector));\n      return callbackResult.then(checkForRedirect).then(result => result || invokeNextCallback());\n    }\n\n    return invokeNextCallback();\n  }\n\n  /**\n   * Registers an Invalid State handler\n   *\n   * Registers a [[OnInvalidCallback]] function to be invoked when [[StateService.transitionTo]]\n   * has been called with an invalid state reference parameter\n   *\n   * Example:\n   * ```js\n   * stateService.onInvalid(function(to, from, injector) {\n   *   if (to.name() === 'foo') {\n   *     let lazyLoader = injector.get('LazyLoadService');\n   *     return lazyLoader.load('foo')\n   *         .then(() => stateService.target('foo'));\n   *   }\n   * });\n   * ```\n   *\n   * @param {function} callback invoked when the toState is invalid\n   *   This function receives the (invalid) toState, the fromState, and an injector.\n   *   The function may optionally return a [[TargetState]] or a Promise for a TargetState.\n   *   If one is returned, it is treated as a redirect.\n   *\n   * @returns a function which deregisters the callback\n   */\n  onInvalid(callback: OnInvalidCallback): Function {\n    this.invalidCallbacks.push(callback);\n    return function deregisterListener() {\n      removeFrom(this.invalidCallbacks)(callback);\n    }.bind(this);\n  }\n\n\n  /**\n   * Reloads the current state\n   *\n   * A method that force reloads the current state, or a partial state hierarchy.\n   * All resolves are re-resolved, and components reinstantiated.\n   *\n   * #### Example:\n   * ```js\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     $state.reload();\n   *   }\n   * });\n   * ```\n   *\n   * Note: `reload()` is just an alias for:\n   *\n   * ```js\n   * $state.transitionTo($state.current, $state.params, {\n   *   reload: true, inherit: false\n   * });\n   * ```\n   *\n   * @param reloadState A state name or a state object.\n   *    If present, this state and all its children will be reloaded, but ancestors will not reload.\n   *\n   * #### Example:\n   * ```js\n   * //assuming app application consists of 3 states: 'contacts', 'contacts.detail', 'contacts.detail.item'\n   * //and current state is 'contacts.detail.item'\n   * let app angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.reload = function(){\n   *     //will reload 'contact.detail' and nested 'contact.detail.item' states\n   *     $state.reload('contact.detail');\n   *   }\n   * });\n   * ```\n   *\n   * @returns A promise representing the state of the new transition. See [[StateService.go]]\n   */\n  reload(reloadState?: StateOrName): Promise<StateObject> {\n    return this.transitionTo(this.current, this.params, {\n      reload: isDefined(reloadState) ? reloadState : true,\n      inherit: false,\n      notify: false,\n    });\n  };\n\n  /**\n   * Transition to a different state and/or parameters\n   *\n   * Convenience method for transitioning to a new state.\n   *\n   * `$state.go` calls `$state.transitionTo` internally but automatically sets options to\n   * `{ location: true, inherit: true, relative: router.globals.$current, notify: true }`.\n   * This allows you to use either an absolute or relative `to` argument (because of `relative: router.globals.$current`).\n   * It also allows you to specify * only the parameters you'd like to update, while letting unspecified parameters\n   * inherit from the current parameter values (because of `inherit: true`).\n   *\n   * #### Example:\n   * ```js\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.go('contact.detail');\n   *   };\n   * });\n   * ```\n   *\n   * @param to Absolute state name, state object, or relative state path (relative to current state).\n   *\n   * Some examples:\n   *\n   * - `$state.go('contact.detail')` - will go to the `contact.detail` state\n   * - `$state.go('^')` - will go to the parent state\n   * - `$state.go('^.sibling')` - if current state is `home.child`, will go to the `home.sibling` state\n   * - `$state.go('.child.grandchild')` - if current state is home, will go to the `home.child.grandchild` state\n   *\n   * @param params A map of the parameters that will be sent to the state, will populate $stateParams.\n   *\n   *    Any parameters that are not specified will be inherited from current parameter values (because of `inherit: true`).\n   *    This allows, for example, going to a sibling state that shares parameters defined by a parent state.\n   *\n   * @param options Transition options\n   *\n   * @returns {promise} A promise representing the state of the new transition.\n   */\n  go(to: StateOrName, params?: RawParams, options?: TransitionOptions): TransitionPromise {\n    let defautGoOpts = { relative: this.$current, inherit: true };\n    let transOpts = defaults(options, defautGoOpts, defaultTransOpts);\n    return this.transitionTo(to, params, transOpts);\n  };\n\n  /**\n   * Creates a [[TargetState]]\n   *\n   * This is a factory method for creating a TargetState\n   *\n   * This may be returned from a Transition Hook to redirect a transition, for example.\n   */\n  target(identifier: StateOrName, params?: ParamsOrArray, options: TransitionOptions = {}): TargetState {\n    // If we're reloading, find the state object to reload from\n    if (isObject(options.reload) && !(<any>options.reload).name)\n      throw new Error('Invalid reload state object');\n    let reg = this.router.stateRegistry;\n    options.reloadState = options.reload === true ? reg.root() : reg.matcher.find(<any> options.reload, options.relative);\n\n    if (options.reload && !options.reloadState)\n      throw new Error(`No such reload state '${(isString(options.reload) ? options.reload : (<any>options.reload).name)}'`);\n\n    let stateDefinition = reg.matcher.find(identifier, options.relative);\n    return new TargetState(identifier, stateDefinition, params, options);\n  };\n\n  private getCurrentPath(): PathNode[] {\n    let globals = this.router.globals;\n    let latestSuccess: Transition = globals.successfulTransitions.peekTail();\n    const rootPath = () => [ new PathNode(this.router.stateRegistry.root()) ];\n    return latestSuccess ? latestSuccess.treeChanges().to : rootPath();\n  }\n\n  /**\n   * Low-level method for transitioning to a new state.\n   *\n   * The [[go]] method (which uses `transitionTo` internally) is recommended in most situations.\n   *\n   * #### Example:\n   * ```js\n   * let app = angular.module('app', ['ui.router']);\n   *\n   * app.controller('ctrl', function ($scope, $state) {\n   *   $scope.changeState = function () {\n   *     $state.transitionTo('contact.detail');\n   *   };\n   * });\n   * ```\n   *\n   * @param to State name or state object.\n   * @param toParams A map of the parameters that will be sent to the state,\n   *      will populate $stateParams.\n   * @param options Transition options\n   *\n   * @returns A promise representing the state of the new transition. See [[go]]\n   */\n  transitionTo(to: StateOrName, toParams: RawParams = {}, options: TransitionOptions = {}): TransitionPromise {\n    let router = this.router;\n    let globals = router.globals;\n    options = defaults(options, defaultTransOpts);\n    const getCurrent = () =>\n        globals.transition;\n    options = extend(options, { current: getCurrent });\n\n    let ref: TargetState = this.target(to, toParams, options);\n    let currentPath = this.getCurrentPath();\n\n    if (!ref.exists())\n      return this._handleInvalidTargetState(currentPath, ref);\n\n    if (!ref.valid())\n      return <TransitionPromise> silentRejection(ref.error());\n\n    /**\n     * Special handling for Ignored, Aborted, and Redirected transitions\n     *\n     * The semantics for the transition.run() promise and the StateService.transitionTo()\n     * promise differ. For instance, the run() promise may be rejected because it was\n     * IGNORED, but the transitionTo() promise is resolved because from the user perspective\n     * no error occurred.  Likewise, the transition.run() promise may be rejected because of\n     * a Redirect, but the transitionTo() promise is chained to the new Transition's promise.\n     */\n    const rejectedTransitionHandler = (transition: Transition) => (error: any): Promise<any> => {\n      if (error instanceof Rejection) {\n        const isLatest = router.globals.lastStartedTransitionId === transition.$id;\n\n        if (error.type === RejectType.IGNORED) {\n          isLatest && router.urlRouter.update();\n          // Consider ignored `Transition.run()` as a successful `transitionTo`\n          return services.$q.when(globals.current);\n        }\n\n        const detail: any = error.detail;\n        if (error.type === RejectType.SUPERSEDED && error.redirected && detail instanceof TargetState) {\n          // If `Transition.run()` was redirected, allow the `transitionTo()` promise to resolve successfully\n          // by returning the promise for the new (redirect) `Transition.run()`.\n          let redirect: Transition = transition.redirect(detail);\n          return redirect.run().catch(rejectedTransitionHandler(redirect));\n        }\n\n        if (error.type === RejectType.ABORTED) {\n          isLatest && router.urlRouter.update();\n          return services.$q.reject(error);\n        }\n      }\n\n      let errorHandler = this.defaultErrorHandler();\n      errorHandler(error);\n\n      return services.$q.reject(error);\n    };\n\n    let transition = this.router.transitionService.create(currentPath, ref);\n    let transitionToPromise = transition.run().catch(rejectedTransitionHandler(transition));\n    silenceUncaughtInPromise(transitionToPromise); // issue #2676\n\n    // Return a promise for the transition, which also has the transition object on it.\n    return extend(transitionToPromise, { transition });\n  };\n\n  /**\n   * Checks if the current state *is* the provided state\n   *\n   * Similar to [[includes]] but only checks for the full state name.\n   * If params is supplied then it will be tested for strict equality against the current\n   * active params object, so all params must match with none missing and no extras.\n   *\n   * #### Example:\n   * ```js\n   * $state.$current.name = 'contacts.details.item';\n   *\n   * // absolute name\n   * $state.is('contact.details.item'); // returns true\n   * $state.is(contactDetailItemStateObject); // returns true\n   * ```\n   *\n   * // relative name (. and ^), typically from a template\n   * // E.g. from the 'contacts.details' template\n   * ```html\n   * <div ng-class=\"{highlighted: $state.is('.item')}\">Item</div>\n   * ```\n   *\n   * @param stateOrName The state name (absolute or relative) or state object you'd like to check.\n   * @param params A param object, e.g. `{sectionId: section.id}`, that you'd like\n   * to test against the current active state.\n   * @param options An options object. The options are:\n   *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   *     test relative to `options.relative` state (or name).\n   *\n   * @returns Returns true if it is the state.\n   */\n  is(stateOrName: StateOrName, params?: RawParams, options?: { relative?: StateOrName }): boolean {\n    options = defaults(options, { relative: this.$current });\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n    if (!isDefined(state)) return undefined;\n    if (this.$current !== state) return false;\n    if (!params) return true;\n\n    let schema: Param[] = state.parameters({ inherit: true, matchingKeys: params });\n    return Param.equals(schema, Param.values(schema, params), this.params);\n  };\n\n  /**\n   * Checks if the current state *includes* the provided state\n   *\n   * A method to determine if the current active state is equal to or is the child of the\n   * state stateName. If any params are passed then they will be tested for a match as well.\n   * Not all the parameters need to be passed, just the ones you'd like to test for equality.\n   *\n   * #### Example when `$state.$current.name === 'contacts.details.item'`\n   * ```js\n   * // Using partial names\n   * $state.includes(\"contacts\"); // returns true\n   * $state.includes(\"contacts.details\"); // returns true\n   * $state.includes(\"contacts.details.item\"); // returns true\n   * $state.includes(\"contacts.list\"); // returns false\n   * $state.includes(\"about\"); // returns false\n   * ```\n   *\n   * #### Glob Examples when `* $state.$current.name === 'contacts.details.item.url'`:\n   * ```js\n   * $state.includes(\"*.details.*.*\"); // returns true\n   * $state.includes(\"*.details.**\"); // returns true\n   * $state.includes(\"**.item.**\"); // returns true\n   * $state.includes(\"*.details.item.url\"); // returns true\n   * $state.includes(\"*.details.*.url\"); // returns true\n   * $state.includes(\"*.details.*\"); // returns false\n   * $state.includes(\"item.**\"); // returns false\n   * ```\n   *\n   * @param stateOrName A partial name, relative name, glob pattern,\n   *   or state object to be searched for within the current state name.\n   * @param params A param object, e.g. `{sectionId: section.id}`,\n   *   that you'd like to test against the current active state.\n   * @param options An options object. The options are:\n   *   - `relative`: If `stateOrName` is a relative state name and `options.relative` is set, .is will\n   *     test relative to `options.relative` state (or name).\n   *\n   * @returns {boolean} Returns true if it does include the state\n   */\n  includes(stateOrName: StateOrName, params?: RawParams, options?: TransitionOptions): boolean {\n    options = defaults(options, { relative: this.$current });\n    let glob = isString(stateOrName) && Glob.fromString(<string> stateOrName);\n\n    if (glob) {\n      if (!glob.matches(this.$current.name)) return false;\n      stateOrName = this.$current.name;\n    }\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative), include = this.$current.includes;\n\n    if (!isDefined(state)) return undefined;\n    if (!isDefined(include[state.name])) return false;\n    if (!params) return true;\n\n    let schema: Param[] = state.parameters({ inherit: true, matchingKeys: params });\n    return Param.equals(schema, Param.values(schema, params), this.params);\n  };\n\n\n  /**\n   * Generates a URL for a state and parameters\n   *\n   * Returns the url for the given state populated with the given params.\n   *\n   * #### Example:\n   * ```js\n   * expect($state.href(\"about.person\", { person: \"bob\" })).toEqual(\"/about/bob\");\n   * ```\n   *\n   * @param stateOrName The state name or state object you'd like to generate a url from.\n   * @param params An object of parameter values to fill the state's required parameters.\n   * @param options Options object. The options are:\n   *\n   * @returns {string} compiled state url\n   */\n  href(stateOrName: StateOrName, params: RawParams, options?: HrefOptions): string {\n    let defaultHrefOpts = {\n      lossy:    true,\n      inherit:  true,\n      absolute: false,\n      relative: this.$current,\n    };\n    options = defaults(options, defaultHrefOpts);\n    params = params || {};\n\n    let state = this.router.stateRegistry.matcher.find(stateOrName, options.relative);\n\n    if (!isDefined(state)) return null;\n    if (options.inherit) params = <any> this.params.$inherit(params, this.$current, state);\n\n    let nav = (state && options.lossy) ? state.navigable : state;\n\n    if (!nav || nav.url === undefined || nav.url === null) {\n      return null;\n    }\n    return this.router.urlRouter.href(nav.url, params, {\n      absolute: options.absolute,\n    });\n  };\n\n  /** @hidden */\n  private _defaultErrorHandler: ((_error: any) => void) = function $defaultErrorHandler($error$) {\n    if ($error$ instanceof Error && $error$.stack) {\n      console.error($error$);\n      console.error($error$.stack);\n    } else if ($error$ instanceof Rejection) {\n      console.error($error$.toString());\n      if ($error$.detail && $error$.detail.stack)\n        console.error($error$.detail.stack);\n    } else {\n      console.error($error$);\n    }\n  };\n\n  /**\n   * Sets or gets the default [[transitionTo]] error handler.\n   *\n   * The error handler is called when a [[Transition]] is rejected or when any error occurred during the Transition.\n   * This includes errors caused by resolves and transition hooks.\n   *\n   * Note:\n   * This handler does not receive certain Transition rejections.\n   * Redirected and Ignored Transitions are not considered to be errors by [[StateService.transitionTo]].\n   *\n   * The built-in default error handler logs the error to the console.\n   *\n   * You can provide your own custom handler.\n   *\n   * #### Example:\n   * ```js\n   * stateService.defaultErrorHandler(function() {\n   *   // Do not log transitionTo errors\n   * });\n   * ```\n   *\n   * @param handler a global error handler function\n   * @returns the current global error handler\n   */\n  defaultErrorHandler(handler?: (error: any) => void): (error: any) => void {\n    return this._defaultErrorHandler = handler || this._defaultErrorHandler;\n  }\n\n  /**\n   * Gets a registered [[StateDeclaration]] object\n   *\n   * Returns the state declaration object for any specific state, or for all registered states.\n   *\n   * @param stateOrName (absolute or relative) If provided, will only get the declaration object for the requested state.\n   * If not provided, returns an array of ALL states.\n   * @param base When `stateOrName` is a relative state reference (such as `.bar.baz`), the state will be retrieved relative to this state.\n   *\n   * @returns a [[StateDeclaration]] object (or array of all registered [[StateDeclaration]] objects.)\n   */\n  get(stateOrName: StateOrName, base: StateOrName): StateDeclaration;\n  get(stateOrName: StateOrName): StateDeclaration;\n  get(): StateDeclaration[];\n  get(stateOrName?: StateOrName, base?: StateOrName): any {\n    let reg = this.router.stateRegistry;\n    if (arguments.length === 0) return reg.get();\n    return reg.get(stateOrName, base || this.$current);\n  }\n\n  /**\n   * Lazy loads a state\n   *\n   * Explicitly runs a state's [[StateDeclaration.lazyLoad]] function.\n   *\n   * @param stateOrName the state that should be lazy loaded\n   * @param transition the optional Transition context to use (if the lazyLoad function requires an injector, etc)\n   * Note: If no transition is provided, a noop transition is created using the from the current state to the current state.\n   * This noop transition is not actually run.\n   *\n   * @returns a promise to lazy load\n   */\n  lazyLoad(stateOrName: StateOrName, transition?: Transition): Promise<LazyLoadResult> {\n    let state: StateDeclaration = this.get(stateOrName);\n    if (!state || !state.lazyLoad) throw new Error(\"Can not lazy load \" + stateOrName);\n\n    let currentPath = this.getCurrentPath();\n    let target = PathUtils.makeTargetState(currentPath);\n    transition = transition || this.router.transitionService.create(currentPath, target);\n\n    return lazyLoadState(transition, state);\n  }\n}\n","/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { isArray, isObject, $QLike } from \"../common/index\";\n\n/**\n * An angular1-like promise api\n *\n * This object implements four methods similar to the\n * [angular 1 promise api](https://docs.angularjs.org/api/ng/service/$q)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This API provides native ES6 promise support wrapped as a $q-like API.\n * Internally, UI-Router uses this $q object to perform promise operations.\n * The `angular-ui-router` (ui-router for angular 1) uses the $q API provided by angular.\n *\n * $q-like promise api\n */\nexport const $q = {\n  /** Normalizes a value as a promise */\n  when: (val) => new Promise((resolve, reject) => resolve(val)),\n\n  /** Normalizes a value as a promise rejection */\n  reject: (val) => new Promise((resolve, reject) => { reject(val); }),\n\n  /** @returns a deferred object, which has `resolve` and `reject` functions */\n  defer: () => {\n    let deferred: any = {};\n    deferred.promise = new Promise((resolve, reject) => {\n      deferred.resolve = resolve;\n      deferred.reject = reject;\n    });\n    return deferred;\n  },\n\n  /** Like Promise.all(), but also supports object key/promise notation like $q */\n  all: (promises: { [key: string]: Promise<any> } | Promise<any>[]) => {\n    if (isArray(promises)) {\n      return Promise.all(promises);\n    }\n\n    if (isObject(promises)) {\n      // Convert promises map to promises array.\n      // When each promise resolves, map it to a tuple { key: key, val: val }\n      let chain = Object.keys(promises)\n          .map(key => promises[key].then(val => ({key, val})));\n\n      // Then wait for all promises to resolve, and convert them back to an object\n      return $q.all(chain).then(values =>\n        values.reduce((acc, tuple) => { acc[tuple.key] = tuple.val; return acc; }, {}));\n    }\n  }\n} as $QLike;","/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport {\n  extend, assertPredicate, isFunction, isArray, isInjectable, $InjectorLike, IInjectable\n} from \"../common/index\";\n\n// globally available injectables\nlet globals = {};\nlet STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\nlet ARGUMENT_NAMES = /([^\\s,]+)/g;\n\n/**\n * A basic angular1-like injector api\n *\n * This object implements four methods similar to the\n * [angular 1 dependency injector](https://docs.angularjs.org/api/auto/service/$injector)\n *\n * UI-Router evolved from an angular 1 library to a framework agnostic library.\n * However, some of the `@uirouter/core` code uses these ng1 style APIs to support ng1 style dependency injection.\n *\n * This object provides a naive implementation of a globally scoped dependency injection system.\n * It supports the following DI approaches:\n *\n * ### Function parameter names\n *\n * A function's `.toString()` is called, and the parameter names are parsed.\n * This only works when the parameter names aren't \"mangled\" by a minifier such as UglifyJS.\n *\n * ```js\n * function injectedFunction(FooService, BarService) {\n *   // FooService and BarService are injected\n * }\n * ```\n *\n * ### Function annotation\n *\n * A function may be annotated with an array of dependency names as the `$inject` property.\n *\n * ```js\n * injectedFunction.$inject = [ 'FooService', 'BarService' ];\n * function injectedFunction(fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }\n * ```\n *\n * ### Array notation\n *\n * An array provides the names of the dependencies to inject (as strings).\n * The function is the last element of the array.\n *\n * ```js\n * [ 'FooService', 'BarService', function (fs, bs) {\n *   // FooService and BarService are injected as fs and bs parameters\n * }]\n * ```\n *\n * @type {$InjectorLike}\n */\nexport const $injector = {\n  /** Gets an object from DI based on a string token */\n  get: name => globals[name],\n\n  /** Returns true if an object named `name` exists in global DI */\n  has: (name) => $injector.get(name) != null,\n\n  /**\n   * Injects a function\n   *\n   * @param fn the function to inject\n   * @param context the function's `this` binding\n   * @param locals An object with additional DI tokens and values, such as `{ someToken: { foo: 1 } }`\n   */\n  invoke: (fn: IInjectable, context?, locals?) => {\n    let all = extend({}, globals, locals || {});\n    let params = $injector.annotate(fn);\n    let ensureExist = assertPredicate((key: string) => all.hasOwnProperty(key), key => `DI can't find injectable: '${key}'`);\n    let args = params.filter(ensureExist).map(x => all[x]);\n    if (isFunction(fn)) return fn.apply(context, args);\n    else return (fn as any[]).slice(-1)[0].apply(context, args);\n  },\n\n  /**\n   * Returns a function's dependencies\n   *\n   * Analyzes a function (or array) and returns an array of DI tokens that the function requires.\n   * @return an array of `string`s\n   */\n  annotate: (fn: IInjectable): any[] => {\n    if (!isInjectable(fn)) throw new Error(`Not an injectable function: ${fn}`);\n    if (fn && (fn as any).$inject) return (fn as any).$inject;\n    if (isArray(fn)) return fn.slice(0, -1);\n    let fnStr = fn.toString().replace(STRIP_COMMENTS, '');\n    let result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);\n    return result || [];\n  }\n} as $InjectorLike;","/**\n * @internalapi\n * @module vanilla\n */ /** */\n\nimport { LocationServices } from \"../common/coreservices\";\nimport { Disposable } from \"../interface\";\nimport { UIRouter } from \"../router\";\nimport { LocationLike, HistoryLike } from \"./interface\";\nimport { parseUrl, getParams, buildUrl } from \"./utils\";\nimport { isDefined } from \"../common/predicates\";\nimport { extend, deregAll, removeFrom } from \"../common/common\";\n/** A base `LocationServices` */\nexport abstract class BaseLocationServices implements LocationServices, Disposable {\n  constructor(router: UIRouter, public fireAfterUpdate: boolean) {\n    this._location = window && window.location;\n    this._history = window && window.history;\n  }\n\n  _listener = evt => this._listeners.forEach(cb => cb(evt));\n\n  private _listeners: Function[] = [];\n  _location: LocationLike;\n  _history: HistoryLike;\n\n  /**\n   * This should return the current internal URL representation.\n   *\n   * The internal URL includes only the portion that UI-Router matches.\n   * It does not include:\n   * - protocol\n   * - server\n   * - port\n   * - base href or hash\n   */\n  abstract _get(): string;\n\n  /**\n   * This should set the current URL.\n   *\n   * The `url` param should include only the portion that UI-Router matches on.\n   * It should not include:\n   * - protocol\n   * - server\n   * - port\n   * - base href or hash\n   *\n   * However, after this function completes, the browser URL should reflect the entire (fully qualified)\n   * HREF including those data.\n   */\n  abstract _set(state: any, title: string, url: string, replace: boolean);\n\n  hash   = () => parseUrl(this._get()).hash;\n  path   = () => parseUrl(this._get()).path;\n  search = () => getParams(parseUrl(this._get()).search);\n\n  url(url?: string, replace: boolean = true): string {\n    if (isDefined(url) && url !== this._get()) {\n      this._set(null, null, url, replace);\n\n      if (this.fireAfterUpdate) {\n        let evt = extend(new Event(\"locationchange\"), { url });\n        this._listeners.forEach(cb => cb(evt));\n      }\n    }\n\n    return buildUrl(this);\n  }\n\n  onChange(cb: EventListener) {\n    this._listeners.push(cb);\n    return () => removeFrom(this._listeners, cb);\n  }\n\n  dispose(router: UIRouter) {\n    deregAll(this._listeners);\n  }\n}\n","/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { trimHashVal } from \"./utils\";\nimport { UIRouter } from \"../router\";\nimport { BaseLocationServices } from \"./baseLocationService\";\n\n/** A `LocationServices` that uses the browser hash \"#\" to get/set the current location */\nexport class HashLocationService extends BaseLocationServices {\n  constructor(router: UIRouter) {\n    super(router, false);\n    window.addEventListener('hashchange', this._listener, false);\n  }\n\n  _get() {\n    return trimHashVal(this._location.hash);\n  }\n  _set(state: any, title: string, url: string, replace: boolean) {\n    this._location.hash = url;\n  }\n\n  dispose (router: UIRouter) {\n    super.dispose(router);\n    window.removeEventListener('hashchange', this._listener);\n  }\n}\n\n","/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { BaseLocationServices } from \"./baseLocationService\";\nimport { UIRouter } from \"../router\";\n\n/** A `LocationServices` that gets/sets the current location from an in-memory object */\nexport class MemoryLocationService extends BaseLocationServices {\n  _url: string;\n\n  constructor(router: UIRouter) {\n    super(router, true);\n  }\n\n  _get() {\n    return this._url;\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean) {\n    this._url = url;\n  }\n}\n","/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { LocationConfig } from \"../common/coreservices\";\nimport { splitQuery, splitHash } from \"./utils\";\nimport { UIRouter } from \"../router\";\nimport { BaseLocationServices } from \"./baseLocationService\";\n\n/**\n * A `LocationServices` that gets/sets the current location using the browser's `location` and `history` apis\n *\n * Uses `history.pushState` and `history.replaceState`\n */\nexport class PushStateLocationService extends BaseLocationServices {\n  _config: LocationConfig;\n\n  constructor(router: UIRouter) {\n    super(router, true);\n    this._config = router.urlService.config;\n    window.addEventListener(\"popstate\", this._listener, false);\n  };\n\n  _get() {\n    let { pathname, hash, search } = this._location;\n    search = splitQuery(search)[1]; // strip ? if found\n    hash = splitHash(hash)[1]; // strip # if found\n    return pathname + (search ? \"?\" + search : \"\") + (hash ? \"$\" + search : \"\");\n  }\n\n  _set(state: any, title: string, url: string, replace: boolean) {\n    let { _config, _history } = this;\n    let fullUrl = _config.baseHref() + url;\n\n    if (replace) {\n      _history.replaceState(state, title, fullUrl);\n    } else {\n      _history.pushState(state, title, fullUrl);\n    }\n  }\n\n  dispose(router: UIRouter) {\n    super.dispose(router);\n    window.removeEventListener(\"popstate\", this._listener);\n  }\n}\n\n","/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { LocationConfig } from \"../common/coreservices\";\nimport { isDefined } from \"../common/predicates\";\nimport { noop } from \"../common/common\";\n\n/** A `LocationConfig` mock that gets/sets all config from an in-memory object */\nexport class MemoryLocationConfig implements LocationConfig {\n  _baseHref = '';\n  _port = 80;\n  _protocol = \"http\";\n  _host = \"localhost\";\n  _hashPrefix = \"\";\n\n  port = () => this._port;\n  protocol = () => this._protocol;\n  host = () => this._host;\n  baseHref = () => this._baseHref;\n  html5Mode = () => false;\n  hashPrefix = (newval?) => isDefined(newval) ? this._hashPrefix = newval : this._hashPrefix;\n  dispose = noop;\n}","/**\n * @internalapi\n * @module vanilla\n */\n/** */\nimport { isDefined } from \"../common/predicates\";\nimport { LocationConfig } from \"../common/coreservices\";\n\n/** A `LocationConfig` that delegates to the browser's `location` object */\nexport class BrowserLocationConfig implements LocationConfig {\n  private _baseHref = undefined;\n  private _hashPrefix = \"\";\n\n  constructor(router?, private _isHtml5 = false) { }\n\n  port(): number {\n    if (location.port) {\n      return Number(location.port);\n    }\n\n    return this.protocol() === 'https' ? 443 : 80;\n  }\n\n  protocol(): string {\n    return location.protocol.replace(/:/g, '');\n  }\n\n  host(): string {\n    return location.host;\n  }\n\n  html5Mode(): boolean {\n    return this._isHtml5;\n  }\n\n  hashPrefix(): string;\n  hashPrefix(newprefix?: string): string {\n    return isDefined(newprefix) ? this._hashPrefix = newprefix : this._hashPrefix;\n  };\n\n  baseHref(href?: string): string {\n    return isDefined(href) ? this._baseHref = href : this._baseHref || this.applyDocumentBaseHref();\n  }\n\n  applyDocumentBaseHref() {\n    let baseTags = document.getElementsByTagName(\"base\");\n    return this._baseHref = baseTags.length ? baseTags[0].href.substr(location.origin.length) : \"\";\n  }\n\n  dispose() {}\n}","/**\n * # Core classes and interfaces\n *\n * The classes and interfaces that are core to ui-router and do not belong\n * to a more specific subsystem (such as resolve).\n *\n * @coreapi\n * @preferred\n * @module core\n */ /** for typedoc */\n\n// Need to import or export at least one concrete something\nimport {noop} from \"./common/common\";\nimport {UIRouter} from \"./router\";\n\n/**\n * An interface for getting values from dependency injection.\n *\n * This is primarily used to get resolve values for a given token.\n * An instance of the `UIInjector` can be retrieved from the current transition using [[Transition.injector]].\n *\n * ---\n *\n * If no resolve is found for a token, then it will delegate to the native injector.\n * The native injector may be Angular 1 `$injector`, Angular 2 `Injector`, or a simple polyfill.\n *\n * In Angular 2, the native injector might be the root Injector,\n * or it might be a lazy loaded `NgModule` injector scoped to a lazy load state tree.\n */\nexport interface UIInjector {\n  /**\n   * Gets a value from the injector.\n   *\n   * For a given token, returns the value from the injector that matches the token.\n   * If the token is for a resolve that has not yet been fetched, this throws an error.\n   *\n   * #### Example:\n   * ```js\n   * var myResolve = injector.get('myResolve');\n   * ```\n   *\n   * #### ng1 Example:\n   * ```js\n   * // Fetch StateService\n   * injector.get('$state').go('home');\n   * ```\n   *\n   * #### ng2 Example:\n   * ```js\n   * import {StateService} from \"ui-router-ng2\";\n   * // Fetch StateService\n   * injector.get(StateService).go('home');\n   * ```\n   *\n   * #### Typescript Example:\n   * ```js\n   * var stringArray = injector.get<string[]>('myStringArray');\n   * ```\n   *\n   * ### `NOWAIT` policy\n   *\n   * When using [[ResolvePolicy.async]] === `NOWAIT`, the value returned from `get()` is a promise for the result.\n   * The promise is not automatically unwrapped.\n   *\n   * @param token the key for the value to get.  May be a string, a class, or any arbitrary object.\n   * @return the Dependency Injection value that matches the token\n   */\n  get(token: any): any;\n  /** Gets a value as type `T` (generics parameter) */\n  get<T>(token: any): T;\n\n  /**\n   * Asynchronously gets a value from the injector\n   *\n   * For a given token, returns a promise for the value from the injector that matches the token.\n   * If the token is for a resolve that has not yet been fetched, this triggers the resolve to load.\n   *\n   * #### Example:\n   * ```js\n   * return injector.getAsync('myResolve').then(value => {\n   *   if (value === 'declined') return false;\n   * });\n   * ```\n   *\n   * @param token the key for the value to get.  May be a string or arbitrary object.\n   * @return a Promise for the Dependency Injection value that matches the token\n   */\n  getAsync(token: any): Promise<any>;\n  /** Asynchronously gets a value as type `T` (generics parameter) */\n  getAsync<T>(token: any): Promise<T>;\n\n  /**\n   * Gets a value from the native injector\n   *\n   * Returns a value from the native injector, bypassing anything in the [[ResolveContext]].\n   *\n   * Example:\n   * ```js\n   * let someThing = injector.getNative(SomeToken);\n   * ```\n   *\n   * @param token the key for the value to get.  May be a string or arbitrary object.\n   * @return the Dependency Injection value that matches the token\n   */\n  getNative(token: any): any;\n  getNative<T>(token: any): T;\n}\n\n/** @internalapi */\nexport interface UIRouterPlugin extends Disposable {\n  name: string;\n}\n\n/** @internalapi */\nexport abstract class UIRouterPluginBase implements UIRouterPlugin, Disposable {\n  abstract name: string;\n  dispose(router: UIRouter) { }\n}\n\n/** @internalapi */\nexport interface Disposable {\n  /** Instructs the Disposable to clean up any resources */\n  dispose(router?: UIRouter);\n}"],"names":["fn","args","length","func_args_length","apply","curried","concat","slice","arguments","initial_args","start","i","result","this","call","_i","funcs","compose","reverse","fn1","fn2","fnName","obj","struct","x","val","isArray","head","tail","filter","not","isString","isFunction","source","target","bind","fnNames","latebind","bindFunction","makeLateRebindFn","Object","keys","reduce","acc","name","array","indexOf","idx","splice","arr","push","opts","defaultsList","_defaultsList","defaultVals","extend","pick","first","second","path","n","propNames","objCopy","prop_1","inArray","key","collection","propName","map","prop","callback","accept","forEach","item","predicateOrMap","errMsg","Error","maxArrayLen","min","Math","memo","keyValTuple","value","undefined","src","dest","cb","_this","toObj","j","o1","o2","t1","tup","all","_arraysEq","isDate","getTime","isRegExp","toString","any","b","_equals","a1","a2","arrayTuples","t","uiview","state","creationContext","id","$type","fqn","input","isNumber","Category","criterion","_state","globStrings","toMatch","glob","Glob","matches","matchGlobs","registry","transitionService","eventType","matchObject","options","registeredHook","RegisteredHook","hooks","_deregistered","removeFrom","_registeredHooks","hookRegistrationFn","reverseDepthSort","l","r","factor","depthDelta","node","hook","priority","type","mode","isDefined","allTruthyMode","arrayWrap","arrayUnwrap","val1","val2","left","right","paramTypeFn","wrapperFn","arrayEqualsHandler","arrayHandler","dynamic","pattern","inherit","is","$arrayMode","cfg","isShorthand","getStaticDefaultValue","$$fn","isInjectable","urlType","location","paramTypes","DefType","CONFIG","PATH","SEARCH","ParamType","config","isOptional","defaultPolicy","squash","arrayMode","replace","configuredKeys","from","to","max","str","substr","camelCase","$1","toLowerCase","fnStr","fnToString","namedFunctionMatch","match","toStr","_fn","o","isObject","seen","stringifyPattern","JSON","stringify","format","delim","re","RegExp","split","identity","pushR","self","$$state","parent","data","includes","annotate","$injector","services","strictDi","isResolveLiteral","token","resolveFn","isLikeNg2Provider","provide","useValue","useFactory","useExisting","useClass","isTupleFromObj","p","literal2Resolvable","Resolvable","deps","policy","dependencies","tuple2Resolvable","pipe","tuple","item2Resolvable","decl","resolve","resolveObj","resolvePolicies","resolvePolicy","string","param","surroundPattern","url","isHtml5","absolute","baseHref","handler","TargetState","isDef","trans","addResolvable","UIRouter","router","Transition","params","entering","hookName","transition","hookFn","Array","states","stateRegistry","register","lazyLoadFn","lazyLoad","promise","success","error","err","$q","reject","when","then","updateStateRegistry","ignoredReason","_ignoredReason","trace","traceTransitionIgnored","pending","globals","abort","Rejection","ignored","toPromise","valid","orEmptyString","_a","beforehash","hash","_b","search","serviceClass","configurationClass","dispose","service","configuration","locationService","locationConfig","propEq","curry","parse","ctor","constructor","eq","other","v","text","regexpString","seg","join","regexp","test","exec","StateObject","create","stateDecl","isStateClass","prototype","__stateObjectCache","nameGlob","fromString","ref","root","defaults","matchingKeys","parameters","values","hasOwnProperty","parameter","find","tis","isUndefined","isNull","isNullOrUndefined","or","isState","isPromise","and","notImplemented","fnname","w","window","angular","fromJson","toJson","copy","_copy","_forEach","assign","_extend","equals","extra","_inArray","_removeFrom","pushTo","_pushTo","deregAll","functions","mergeR","mapObj","allTrueR","elem","anyTrueR","unnestR","flattenR","uniqR","unnest","flatten","assertPredicate","assertFn","assertMap","pairs","sortBy","propFn","checkFn","a","composeSort","sortFns","prev","silenceUncaughtInPromise","catch","e","silentRejection","_items","_limit","Queue","items","shift","size","current","RejectType","message","detail","d","_transitionRejection","rejection","SUPERSEDED","redirected","superseded","INVALID","IGNORED","ABORTED","ERROR","errored","viewConfigString","viewConfig","view","viewDecl","$context","$id","$uiViewName","$uiViewContextAnchor","_tid","_rid","transLbl","approximateDigests","Trace","enabled","categories","k","parseInt","isNaN","normalizedCat","category","_enabled","_set","TRANSITION","console","log","step","HOOK","event","context","functionToString","maxLength","hookResult","transitionOptions","RESOLVE","resolvable","reason","finalState","viewData","UIVIEW","padString","uiViewString","traceUIViewEvent","html","VIEWCONFIG","mapping","uiViewData","ui-view fqn","state: view name","$name","sort","localeCompare","table","TransitionHookPhase","TransitionHookScope","_identifier","_definition","_params","_options","base","relative","stateName","defaultOptions","noop","traceData","stateContext","hookPhase","RUN","isActive","TransitionHook","stateService","defaultErrorHandler","notCurrent","getNotCurrentRejection","traceHookInvocation","normalizeErr","normalize","handleError","getErrorHandler","handleResult","getResultHandler","synchronous","handleHookResult","traceHookResult","aborted","_disposed","_aborted","isSuperseded","waitFor","createHookChainR","nextHook","invokeHook","doneCallback","remainingHooks","chain","logError","tranSvc","matchCriteria","nodes","matching","matchState","_pluginapi","_getPathTypes","treeChanges","criteria","_getDefaultMatchCriteria","mn","pathtype","isStateHook","scope","STATE","_matchingNodes","_getMatchingNodes","every","HookBuilder","phase","_getEvents","buildHooks","hookType","matchingHooks","getMatchingHooks","baseHookOptions","makeTransitionHooks","criteriaMatchPath","transitionHook","tupleSort","reverseSort","isCreate","CREATE","$transitions","reg","getHooks","def","sub","decode","isSearch","ArrayType","hasOwn","urlMatcherFactory","unwrapShorthand","getType","arrayDefaults","arrayParamNomenclature","$asArray","raw","getSquashPolicy","defaultSquashPolicy","getReplace","Param","_defaultValueCache","defaultValue","invoke","$normalize","normalized","encoded","encode","paramValues","params_1","values1","values2","changed","validates","stateOrNode","PathNode","paramSchema","resolvables","views","res","clone","getParamVal","paramDef","pDef","applyPairs","paramsFn","diff","PathUtils","targetState","toParams","$state","applyRawParams","fromPath","toPath","buildPath","inheritParams","$view","viewDecls","subPath","viewConfigs","createViewConfig","toKeys","toNode","toParamVals","incomingParamVals","omit","fromParamVals","nodeParamVals","noInherit","ownParamVals","makeInheritedParamsNode","reloadState","retainedNode","cloned","keep","node1","node2","nonDynamicParams","retained","exiting","retainedWithToParams","applyToParams","pathA","pathB","done","nodeA","nodeB","predicate","elementIdx","defaultResolvePolicy","async","arg1","resolved","literal","thisPolicy","statePolicy","resolveContext","getResolvableDependencies","getDependencies","get","invokeResolveFn","resolvedDeps","waitForRx","observable$","cached","cache","take","findNode","maybeWaitForRx","getPolicy","applyResolvedValue","resolvedValue","traceResolvableResolved","LAZY","EAGER","WAIT","NOWAIT","RXWAIT","ALL_WHENS","EAGER_WHENS","NATIVE_INJECTOR_TOKEN","_path","ResolveContext","newResolvables","whenOption","matchedWhens","traceResolvePath","matchesPolicy","acceptedVals","whenOrAsync","promises","nodeResolvables","nowait","wait","subContext","getResult","_injector","UIInjectorImpl","availableResolvables","getDependency","fromInjector","injector","getNative","native","getResolvable","stateSelf","defer","_deferred","_targetState","_transitionCount","buildToPath","_treeChanges","createTransitionHookRegFns","onCreateHooks","_hookBuilder","buildHooksForPhase","invokeHooks","applyViewConfigs","makeEvent","enteringStates","$from","$to","compare","pathname","freeze","pathName","getTokens","topath","targetNode","addResolvables","redirectedFrom","rf","originalTransition","redirects","redirectOpts","newOptions","identifier","newTransition","originalEnteringNodes","redirectEnteringNodes","tc","reload","nodeSchemas","schema","toVals","fromVals","changes","_changedParams","same","newTC","pendTC","runAllHooks","getHooksFor","transitionSuccess","traceSuccess","SUCCESS","transitionError","traceError","_error","runTransition","allRunHooks","startTransition","lastStartedTransitionId","transitionHistory","enqueue","traceTransitionStart","allBeforeHooks","BEFORE","abstract","paramDefs","invalidParams","fromStateOrName","toStateOrName","avoidEmptyHash","stringifyPatternFn","isRejection","isRejectionPromise","beforeAfterSubstr","char","ParamTypes","makeType","definition","types","defaultTypes","definitionFn","typeQueue","_flushTypeQueue","makeDefaultType","valToString","defaultTypeBase","String","query","int","bool","Boolean","date","getFullYear","getMonth","getDate","capture","Date","valueOf","json","defaultRuleSortFn","StateParams","newParams","$current","parentParams","parents","ancestors","inherited","inheritList","parseUrl","charAt","substring","getUrlBuilder","$urlMatcherFactoryProvider","stateDec","parsed","compile","paramMap","paramConfig","reloadOnSearch","isMatcher","navigable","append","getNavigableBuilder","isRoot","getParamsBuilder","paramFactory","makeConfigParam","fromConfig","urlParams","nonUrlParams","matcher","parentName","builders","nameBuilder","selfBuilder","parentBuilder","dataBuilder","pathBuilder","includesBuilder","resolvablesBuilder","StateBuilder","parentFn","segments","pop","_states","StateMatcher","stateOrName","matchGlob","isStr","isRelative","resolvePath","baseState","splitName","pathLength","relName","$registry","$urlRouter","builder","listeners","queue","StateQueueManager","flush","registered","orphans","previousQueueLength","getState","name_1","build","orphanIdx","existingState","existingFutureState","deregister","attachRoute","listener","s","rule","urlRuleFactory","_router","stateQueue","urlRouter","_registerRoot","StateRegistry","rootStateDef","#","_root","stateDefinition","getChildren","children","deregistered","$ur","rules","removeRule","deregisteredStates","_deregisterTree","found","func","memoizeTo","splitOnSlash","splitOnDelim","strict","caseInsensitive","m","segment","placeholder","searchPlaceholder","last","patterns","checkParamErrors","UrlMatcher","nameValidator","matchDetails","index","_segments","lastIndex","fromSearch","_compiled","quoteRegExp","_children","_cache","allParams","pathParams","searchParams","nPathSegments","urlm","reverseString","unquoteDashes","validParamVal","isValid","isDefaultValue","urlMatchers","pathSegmentsAndParams","getDetails","queryParams","isInvalid","pathString","encodeDashes","encodeURIComponent","queryString","paramDetails","c","charCodeAt","toUpperCase","cmp","joinNeighborsR","weights","_isStrictMode","_isCaseInsensitive","UrlMatcherFactory","_defaultSquashPolicy","_getConfig","object","UrlRuleFactory","what","makeRule","_what","fromUrlMatcher","fromState","fromRegExp","BaseUrlRule","urlMatcher","optional","_handler","details","matchPriority","href","transitionTo","global","sticky","redirectUrlTo","Number","getMatcher","URLMATCHER","REGEXP","RAW","OTHER","createProxyFunctions","UrlRouter","listen","_rules","_otherwiseFn","compareFn","_sortFn","_sorted","ensureSorted","best","weight","evt","defaultPrevented","$url","urlService","newurl","go","_stopFn","onChange","sync","read","html5Mode","hashPrefix","appendBasePath","slash","port","protocol","host","isUrlRule","_id","handlerFn","getHandlerFn","matchFn","urlParts","interceptDeferred","_rootViewContext","_viewConfigFactory","_registeredUIViews","_uiViews","_activeViewConfigs","_viewConfigs","ViewService","_rootContext","viewType","factory","_viewConfigFactories","cfgFactory","cfgs","traceViewServiceEvent","uiView","stateDepth","count","uiViewsByFqn","uiv","depthCompare","depthFn","posNeg","matchingConfigPair","matchingConfigs","viewConfigDepth","configureUIView","configUpdated","uiViewDepth","traceViewSync","traceViewServiceUIViewEvent","uiViews","fqnAndTypeMatches","rawViewName","viewAtContext","uiViewName","uiViewContextAnchor","relativeViewNameSugar","anchor","vc","vcSegments","uivSegments","negOffset","fqnToFirstSegment","uiViewContext","UIRouterGlobals","clear","successfulTransitions","makeStub","locationServicesFns","locationConfigFns","umfFns","rulesFns","syncFns","lateBind","locationServices","umf","UrlService","_routerInstance","locationServiceStub","locationConfigStub","TransitionService","StateService","viewService","disposable","_disposables","plugin","pluginInstance","_plugins","pluginName","registerAddCoreResolvables","onCreate","addCoreResolvables","redirectToHook","redirect","redirectTo","registerRedirectToHook","onStart","onExitHook","makeEnterExitRetainHook","registerOnExitHook","onExit","onRetainHook","registerOnRetainHook","onRetain","onEnterHook","registerOnEnterHook","onEnter","eagerResolvePath","registerEagerResolvePath","lazyResolveState","registerLazyResolveState","loadEnteringViews","enteringViews","load","registerLoadEnteringViews","onFinish","activateViews","exitingViews","deactivateViewConfig","activateViewConfig","registerActivateViews","onSuccess","updateGlobalState","transitionSuccessful","clearCurrentTransition","registerUpdateGlobalState","updateUrl","urlOptions","update","registerUpdateUrl","lazyLoadHook","orig","parts","lazyLoadState","retryTransition","registerLazyLoadHook","onBefore","hookOrder","HANDLE_RESULT","REJECT_ERROR","registerIgnoredTransitionHook","ignoredHook","registerInvalidTransitionHook","invalidTransitionHook","defaultTransOpts","notify","custom","_deregisterHookFns","_defineCorePaths","_defineCoreEvents","_registerCoreTransitionHooks","hooksArray","Phase","TH","paths","_criteriaPaths","_defineEvent","LOG_REJECTED_RESULT","THROW_ERROR","LOG_ERROR","_definePathType","TransitionEventType","_eventTypes","cmpByPhase","hookScope","fns","addCoreResolves","invalid","eagerResolve","lazyResolve","loadViews","updateGlobals","$error$","stack","getters","boundFns","invalidCallbacks","toState","nextCallback","callbackQueue","dequeue","checkForRedirect","invokeNextCallback","makeTargetState","latestThing","peekTail","latest","defautGoOpts","transOpts","latestSuccess","currentPath","getCurrentPath","exists","_handleInvalidTargetState","rejectedTransitionHandler","isLatest","run","transitionToPromise","include","lossy","$inherit","nav","_defaultErrorHandler","Promise","deferred","STRIP_COMMENTS","ARGUMENT_NAMES","has","locals","ensureExist","$inject","splitHash","splitQuery","splitEqual","trimHashVal","keyValsToObjectR","accum","getParams","buildUrl","loc","searchObject","fireAfterUpdate","_listeners","_get","_location","_history","history","BaseLocationServices","evt_1","Event","_super","addEventListener","_listener","__extends","HashLocationService","title","removeEventListener","MemoryLocationService","_url","_config","PushStateLocationService","fullUrl","replaceState","pushState","_port","_protocol","_host","_baseHref","newval","_hashPrefix","_isHtml5","BrowserLocationConfig","newprefix","applyDocumentBaseHref","baseTags","document","getElementsByTagName","origin","hashLocationPlugin","locationPluginFactory","pushStateLocationPlugin","memoryLocationPlugin","MemoryLocationConfig","UIRouterPluginBase"],"mappings":"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"}